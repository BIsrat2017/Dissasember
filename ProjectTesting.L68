00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 12/3/2017 11:26:45 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =0000000D                  8  CR                      EQU         $0D                     *carriage return
00000000  =0000000A                  9  LF                      EQU         $0A                     *line feed
00000000                            10  
00001000                            11  START                   ORG         $1000
00001000  43F9 00005000             12  WELCOMELBL              LEA         WECLOMEMSG,A1           *Load welcome message
00001006  103C 000E                 13                          MOVE.B      #14,D0                  *Set trap task to 14 (display message in A1)
0000100A  4E4F                      14                          TRAP        #15                     *Execute task to display message
0000100C  4EB9 0000124C             15                          JSR         WAIT4ENTER_SR           *Call WAIT4ENTER sub routine
00001012                            16  
00001012                            17                                                              *Clear screen
00001012  323C 00FF                 18                          MOVE.W      #$00FF,D1
00001016  103C 000B                 19                          MOVE.B      #11,D0
0000101A  4E4F                      20                          TRAP        #15
0000101C                            21  
0000101C  43F9 0000500B             22  PROMPT4MEM              LEA         MEMLOCMSG,A1            *Prompt user for memory location
00001022  103C 000E                 23                          MOVE.B      #14,D0                  *Set trap task to 14 (display message in A1)
00001026  4E4F                      24                          TRAP        #15                     *Execute task to display message
00001028                            25  
00001028  43F9 00010020             26  WAIT4MEM                LEA         USERINPUT,A1
0000102E  103C 0002                 27                          MOVE.B      #2,D0                   *Gets string input from user
00001032  4E4F                      28                          TRAP        #15                     *String stored at A1 (null terminated), length stored in D1.W
00001034  B27C 0000                 29                          CMP.W       #0,D1                   *Is length valid
00001038  6F00 0026                 30                          BLE         INVALIDMEM              *Not long enough...
0000103C  B27C 0006                 31                          CMP.W       #6,D1
00001040  6E00 001E                 32                          BGT         INVALIDMEM              *Too long...
00001044  4EB9 00004386             33                          JSR         INPUTTOHEX_SR           *Convert to hex
0000104A  BA3C 0001                 34                          CMP.B       #1,D5
0000104E  6700 0010                 35                          BEQ         INVALIDMEM              *Error in reading
00001052  B8BC 00FFF000             36                          CMP.L       #$FFF000,D4
00001058  6E00 0006                 37                          BGT         INVALIDMEM
0000105C  6000 0010                 38                          BRA         VALIDMEM                *Read just fine! :D
00001060                            39  
00001060  43F9 0000505D             40  INVALIDMEM              LEA         MEMLOCERROR,A1          *invalid memory input
00001066  103C 000E                 41                          MOVE.B      #14,D0
0000106A  4E4F                      42                          TRAP        #15
0000106C  60BA                      43                          BRA         WAIT4MEM
0000106E                            44  
0000106E  23C4 00005232             45  VALIDMEM                MOVE.L      D4,(STARTMEM)
00001074  23C4 00005236             46                          MOVE.L      D4,(CURRENTMEM)
0000107A  6000 0012                 47                          BRA         PROMPT4FILENUM
0000107E                            48  
0000107E  43F9 0000515A             49  FILEDNE                 LEA         FILENOTFOUND,A1         *File not found :(
00001084  103C 000E                 50                          MOVE.B      #14,D0
00001088  4E4F                      51                          TRAP        #15
0000108A  6000 0002                 52                          BRA         PROMPT4FILENUM
0000108E                            53  
0000108E  43F9 0000509D             54  PROMPT4FILENUM          LEA         FILENUMMSG,A1           *Asks for file number
00001094  103C 000E                 55                          MOVE.B      #14,D0
00001098  4E4F                      56                          TRAP        #15
0000109A                            57  
0000109A  43F9 00010020             58  WAIT4NUM                LEA         USERINPUT,A1
000010A0  103C 0002                 59                          MOVE.B      #2,D0                   *Gets string input from user
000010A4  4E4F                      60                          TRAP        #15                     *String stored at A1 (null terminated), length stored in D1.W
000010A6  B27C 0000                 61                          CMP.W       #0,D1                   *Is length valid
000010AA  6F00 0026                 62                          BLE         INVALIDNUM              *Not long enough...
000010AE  B27C 0006                 63                          CMP.W       #6,D1
000010B2  6E00 001E                 64                          BGT         INVALIDNUM              *Too long...
000010B6                            65                                                              *Is it all numbers?
000010B6  2449                      66                          MOVE.L      A1,A2                   *Copy this so we can use A1 to increment
000010B8  0C11 0000                 67  CHECKNEXTNUM            CMP.B       #0,(A1)
000010BC  6700 0022                 68                          BEQ         DONECHECKINGNUM         *Hit end of string
000010C0  0C11 0030                 69                          CMP.B       #$30,(A1)
000010C4  6D00 000C                 70                          BLT         INVALIDNUM              *Not at least 30 ascii
000010C8  0C19 0039                 71                          CMP.B       #$39,(A1)+
000010CC  6E00 0004                 72                          BGT         INVALIDNUM              *Larger than 39
000010D0  60E6                      73                          BRA         CHECKNEXTNUM
000010D2                            74  
000010D2  43F9 000050F0             75  INVALIDNUM              LEA         FILENUMERROR,A1         *invalid memory input
000010D8  103C 000E                 76                          MOVE.B      #14,D0
000010DC  4E4F                      77                          TRAP        #15
000010DE  60BA                      78                          BRA         WAIT4NUM
000010E0                            79  
000010E0                            80  DONECHECKINGNUM                                             *At this point we know that the string pointed to by A2 is our correct file input number
000010E0  43F9 0000521D             81                          LEA         FILENAMENUMB,A1
000010E6  0C12 0000                 82  NEXTCHAR                CMP.B       #0,(A2)
000010EA  6700 0006                 83                          BEQ         NOCHARLEFT
000010EE  12DA                      84                          MOVE.B      (A2)+,(A1)+
000010F0  60F4                      85                          BRA         NEXTCHAR
000010F2                            86  
000010F2  12FC 002E                 87  NOCHARLEFT              MOVE.B      #$2E,(A1)+              * .
000010F6  12FC 0054                 88                          MOVE.B      #$54,(A1)+              * T
000010FA  12FC 0058                 89                          MOVE.B      #$58,(A1)+              * X
000010FE  12FC 0054                 90                          MOVE.B      #$54,(A1)+              * T
00001102  12FC 0000                 91                          MOVE.B      #$0,(A1)+               * \0    *At this point, the string pointed to by FILENAME is now TEST<X>.TXT
00001106                            92  
00001106  7200                      93  READFILE                MOVE.L      #$0,D1                  *We get here after enter is pressed!
00001108                            94  
00001108  303C 0032                 95                          MOVE        #50,D0                  *Close open files
0000110C  4E4F                      96                          TRAP        #15
0000110E                            97  
0000110E  267C 00005000             98                          MOVEA.L     #$5000,A3               *This is where we'll move our data in the end
00001114  13FC 0000 0000522E        99                          MOVE.B      #$0,(BUFFER)            *Clear buffer
0000111C  13FC 0000 0000522F       100                          MOVE.B      #$0,(EOFHIT)            *Haven't hit the end of the file yet
00001124                           101  
00001124  43F9 00005219            102                          LEA         FILENAME,A1             *Load filename into A1
0000112A  103C 0033                103                          MOVE.B      #51,D0                  *Opens file
0000112E  4E4F                     104                          TRAP        #15
00001130  B2BC FFFFFFFF            105                          CMP.L       #$FFFFFFFF,D1
00001136  6700 FF46                106                          BEQ         FILEDNE
0000113A  23C1 0000522A            107                          MOVE.L      D1,(FILEID)
00001140  4239 00005228            108                          CLR.B       (LINECOUNT)             *Sets number of lines printed to 0
00001146  4239 00005230            109                          CLR.B       (LINELENGTH)            *Clears line length to start with
0000114C                           110  
0000114C  4EB9 0000436E            111  READLINE                JSR         CLEARLINE_SR            *Clears the line to get it ready for readings
00001152  2239 0000522A            112                          MOVE.L      (FILEID),D1
00001158  183C 0000                113                          MOVE.B      #$0,D4                  *0 in D4 will represent storing to the first half of the byte
0000115C  49F9 00010000            114                          LEA         LINESTARTLOC,A4         *A4 will represent the address to store to
00001162                           115  
00001162  0C39 0000 00005230       116                          CMP.B       #0,(LINELENGTH)
0000116A  6700 0012                117                          BEQ         SKIPMEMINC              *If last line length is 0, skip memory incrementing (no data)
0000116E  1C39 00005230            118                          MOVE.B      (LINELENGTH),D6
00001174  8CFC 0008                119                          DIVU.W      #8,D6
00001178  DDB9 00005236            120                          ADD.L       D6,(CURRENTMEM)
0000117E                           121  SKIPMEMINC
0000117E  1A3C 0000                122                          MOVE.B      #$0,D5                  *D5 will contain our current length in bits (which goes up in increments of 4 bits)
00001182                           123  
00001182  303C 0035                124  READBYTE                MOVE        #53,D0
00001186  43F9 0000522E            125                          LEA         BUFFER,A1               *Read to buffer
0000118C  7401                     126                          MOVE.L      #1,D2                   *Read 1 byte
0000118E  4E4F                     127                          TRAP        #15
00001190                           128  
00001190  B07C 0000                129                          CMP.W       #0,D0                   *See if read is succesful
00001194  6600 0060                130                          BNE         SETEOF                  *If not, say we're done reading
00001198                           131  
00001198                           132                                                              *(BUFFER) currently represents the ascii form of the data, we need to convert to plain hex...
00001198  0C39 000A 0000522E       133                          CMP.B       #$0A,(BUFFER)           *If is line feed
000011A0  6700 008A                134                          BEQ         DONELINE                *Then line is done
000011A4  0C39 0041 0000522E       135                          CMP.B       #$41,(BUFFER)           *Range for letters is 41 to 46
000011AC  6C00 0010                136                          BGE         ISLETTER
000011B0  0C39 0030 0000522E       137                          CMP.B       #$30,(BUFFER)           *Range for numbers is 30 to 39
000011B8  6C00 0020                138                          BGE         ISNUMBER
000011BC  60C4                     139                          BRA         READBYTE                *Not in either range, ignore for any strange symbols
000011BE                           140  
000011BE  0C39 0046 0000522E       141  ISLETTER                CMP.B       #$46,(BUFFER)           *Check if is within range
000011C6  6EBA                     142                          BGT         READBYTE
000011C8  1E39 0000522E            143                          MOVE.B      (BUFFER),D7
000011CE  0607 00A9                144                          ADDI.B      #$A9,D7                 *Subtract 37
000011D2  0207 000F                145                          ANDI.B      #%00001111,D7           *We only care about our one hex value
000011D6                           146  
000011D6  6000 002A                147                          BRA         STOREDATA
000011DA  0C39 0039 0000522E       148  ISNUMBER                CMP.B       #$39,(BUFFER)           *Check if is within range
000011E2  6E9E                     149                          BGT         READBYTE
000011E4  1E39 0000522E            150                          MOVE.B      (BUFFER),D7
000011EA  0607 00B0                151                          ADDI.B      #$B0,D7                 *Subtract 30
000011EE  0207 000F                152                          ANDI.B      #%00001111,D7           *We only care about our one hex value
000011F2  6000 000E                153                          BRA         STOREDATA
000011F6                           154  
000011F6  13FC 0001 0000522F       155  SETEOF                  MOVE.B      #$1,(EOFHIT)            *Used when end of file is hit
000011FE  6000 002C                156                          BRA         DONELINE
00001202                           157  
00001202                           158  STOREDATA                                                   *Store data to line, woohoo
00001202  B83C 0000                159                          CMP.B       #$0,D4
00001206  6600 000C                160                          BNE         NOSHIFT
0000120A  E947                     161                          ASL         #4,D7                   *Shift over to the left
0000120C  183C 0001                162                          MOVE.B      #1,D4                   *Next write to other half of byte
00001210  6000 0006                163                          BRA         DONESHIFTING
00001214  183C 0000                164  NOSHIFT                 MOVE.B      #0,D4                   *Next write to fist half of byte
00001218                           165  
00001218  8F14                     166  DONESHIFTING            OR.B        D7,(A4)                 *Put data into correct half of byte
0000121A  5845                     167                          ADDI        #$4,D5                  *Add 4 to our bit count
0000121C  B83C 0000                168                          CMP.B       #0,D4                   *If writing to first half of byte next, go to next byte
00001220  6600 0006                169                          BNE         SKIPBYTEINC
00001224  49EC 0001                170                          LEA         (1,A4),A4               *Increment to next byte
00001228                           171  
00001228  6000 FF58                172  SKIPBYTEINC             BRA         READBYTE                *Read next byte
0000122C                           173  
0000122C  13C5 00005230            174  DONELINE                MOVE.B      D5,(LINELENGTH)         *Length of our line in bits should be in D5, store that for later use
00001232  4EB9 00001278            175                          JSR         PROCESSLINE_SR
00001238                           176  
00001238                           177  
00001238  0C39 0001 0000522F       178                          CMP.B       #$1,(EOFHIT)            *If we hit end of file, stop
00001240  6700 0006                179                          BEQ         DONEREADING
00001244  6000 FF06                180                          BRA         READLINE                *Otherwise, read next line
00001248                           181  
00001248                           182  
00001248                           183  DONEREADING                                                 *Currently we get here when we hit end of file, could be other ways to get here
00001248                           184                          
00001248  6000 3206                185                          BRA         ENDPRGRM                *Skip to end, define various subroutines under here
0000124C                           186  
0000124C  48E7 FFFE                187  WAIT4ENTER_SR           MOVEM.L     D0-D7/A0-A6,-(SP)
00001250  43F9 0000513D            188                          LEA         ENTERCNT,A1             *Enter to continue message
00001256  103C 000E                189                          MOVE.B      #14,D0                  *Set trap task to 14 (Display message in A1)
0000125A  4E4F                     190                          TRAP        #15                     *Execute task to display message
0000125C  43F9 00010020            191                          LEA         USERINPUT,A1
00001262  303C 0002                192                          MOVE        #2,D0                   *Returns string from keyboard
00001266  4E4F                     193                          TRAP        #15                     *Enter pressed oh boy!
00001268                           194                                                              *Then clear screen
00001268  323C FF00                195                          MOVE.W      #$FF00,D1
0000126C  103C 000B                196                          MOVE.B      #11,D0
00001270  4E4F                     197                          TRAP        #15
00001272  4CDF 7FFF                198                          MOVEM.L     (SP)+,D0-D7/A0-A6
00001276  4E75                     199                          RTS                                 *Return to wherever we came from
00001278                           200  
00001278                           201  PROCESSLINE_SR                                              *At this point we have the line in memory at LINESTARTLOC with a length in bits at LINELENGTH
00001278  41F9 00010000            202                          LEA         LINESTARTLOC,A0
0000127E  43F9 00005230            203                          LEA         LINELENGTH,A1
00001284  0C39 001E 00005228       204                          CMP.B       #30,(LINECOUNT)         *LINE LENGTH SPECIFIED HERE
0000128C  6600 000C                205                          BNE         PROCESSLINE_CONT
00001290  4239 00005228            206                          CLR.B       (LINECOUNT)
00001296  4EB8 124C                207                          JSR         WAIT4ENTER_SR
0000129A  5239 00005228            208  PROCESSLINE_CONT        ADDI.B      #1,(LINECOUNT)
000012A0  4EB9 0000422E            209                          JSR         PRINTCURRADDR           * Every line of output should start with the current address
000012A6  2010                     210                          MOVE.L      (A0),D0                 * put the opcode bits in D0
000012A8  1211                     211                          MOVE.B      (A1),D1                 * put the length of the opcode bits in D1
000012AA  5241                     212                          ADDQ        #1,D1                   * dumb hack, TODO remove -- increase bits by 1
000012AC                           213  
000012AC                           214                                                              * The tree consists of many copies of the same structure, implementing a binary tree walk.
000012AC                           215                                                              *
000012AC                           216                                                              * {0} SUB.B #1,D1         * subtract from length
000012AC                           217                                                              * BEQ   PRINTLINE_SR  * if length is 0, fail
000012AC                           218                                                              * LSL.L #1,D0         * leftshift the opcode bits
000012AC                           219                                                              * BCC   {1}           * branch to zero-child node
000012AC                           220                                                              * BCS   {2}           * branch to ones-child node
000012AC                           221                                                              * BRA   TREEDONE      * this should never be hit
000012AC                           222                                                              * 
000012AC                           223                                                              * Autogenerated code, changes may be wiped out by regeneration
000012AC                           224                          INCLUDE     "tree_search.X68"
000012AC  5301                     225  b                       SUB.B       #1,D1               *
000012AE  6700 3004                226                          BEQ         PRINTLINE_SR        *
000012B2  E388                     227                          LSL.L       #1,D0               *
000012B4  6400 0176                228                          BCC         b0                  *
000012B8  6500 0162                229                          BCS         b1                  *
000012BC                           230  
000012BC  5301                     231  b010010001              SUB.B       #1,D1               *
000012BE  6700 2FF4                232                          BEQ         PRINTLINE_SR        *
000012C2  E388                     233                          LSL.L       #1,D0               *
000012C4  6400 1F5A                234                          BCC         MOVEMWTM_SR         *
000012C8  6500 1F5E                235                          BCS         MOVEMLTM_SR         *
000012CC                           236  
000012CC  5301                     237  b010011001              SUB.B       #1,D1               *
000012CE  6700 2FE4                238                          BEQ         PRINTLINE_SR        *
000012D2  E388                     239                          LSL.L       #1,D0               *
000012D4  6400 1F5A                240                          BCC         MOVEMWTR_SR         *
000012D8  6500 1F5E                241                          BCS         MOVEMLTR_SR         *
000012DC                           242  
000012DC  5301                     243  b010                    SUB.B       #1,D1               *
000012DE  6700 2FD4                244                          BEQ         PRINTLINE_SR        *
000012E2  E388                     245                          LSL.L       #1,D0               *
000012E4  6400 01F6                246                          BCC         b0100               *
000012E8  6500 0F38                247                          BCS         ADDQ_SR             *
000012EC                           248  
000012EC  5301                     249  b011                    SUB.B       #1,D1               *
000012EE  6700 2FC4                250                          BEQ         PRINTLINE_SR        *
000012F2  E388                     251                          LSL.L       #1,D0               *
000012F4  6400 2D12                252                          BCC         BRANCHSTUFF_SR      *
000012F8  6500 2E5A                253                          BCS         MOVEQ_SR            *
000012FC                           254  
000012FC  5301                     255  b111                    SUB.B       #1,D1               *
000012FE  6700 2FB4                256                          BEQ         PRINTLINE_SR        *
00001302  E388                     257                          LSL.L       #1,D0               *
00001304  6400 24A4                258                          BCC         SHIFTSTUFF_SR       *
00001308  6500 2FAA                259                          BCS         PRINTLINE_SR        *
0000130C                           260  
0000130C  5301                     261  b110                    SUB.B       #1,D1               *
0000130E  6700 2FA4                262                          BEQ         PRINTLINE_SR        *
00001312  E388                     263                          LSL.L       #1,D0               *
00001314  6400 1210                264                          BCC         AND_SR              *
00001318  6500 0776                265                          BCS         ADDDECODE_SR        *
0000131C                           266  
0000131C  5301                     267  b010011100111000        SUB.B       #1,D1               *
0000131E  6700 2F94                268                          BEQ         PRINTLINE_SR        *
00001322  E388                     269                          LSL.L       #1,D0               *
00001324  6400 2F8E                270                          BCC         PRINTLINE_SR        *
00001328  6500 30DE                271                          BCS         NOP_SR              *
0000132C                           272  
0000132C  5301                     273  b010010111              SUB.B       #1,D1               *
0000132E  6700 2F84                274                          BEQ         PRINTLINE_SR        *
00001332  E388                     275                          LSL.L       #1,D0               *
00001334  6400 2F7E                276                          BCC         PRINTLINE_SR        *
00001338  6500 183C                277                          BCS         LEA_SR              *
0000133C                           278  
0000133C  5301                     279  b01000101               SUB.B       #1,D1               *
0000133E  6700 2F74                280                          BEQ         PRINTLINE_SR        *
00001342  E388                     281                          LSL.L       #1,D0               *
00001344  6400 2F6E                282                          BCC         PRINTLINE_SR        *
00001348  6500 0182                283                          BCS         b010001011          *
0000134C                           284  
0000134C  5301                     285  b0100110                SUB.B       #1,D1               *
0000134E  6700 2F64                286                          BEQ         PRINTLINE_SR        *
00001352  E388                     287                          LSL.L       #1,D0               *
00001354  6400 0310                288                          BCC         b01001100           *
00001358  6500 00A2                289                          BCS         b01001101           *
0000135C                           290  
0000135C  5301                     291  b0100111                SUB.B       #1,D1               *
0000135E  6700 2F54                292                          BEQ         PRINTLINE_SR        *
00001362  E388                     293                          LSL.L       #1,D0               *
00001364  6400 02C0                294                          BCC         b01001110           *
00001368  6500 02CC                295                          BCS         b01001111           *
0000136C                           296  
0000136C  5301                     297  b01000111               SUB.B       #1,D1               *
0000136E  6700 2F44                298                          BEQ         PRINTLINE_SR        *
00001372  E388                     299                          LSL.L       #1,D0               *
00001374  6400 2F3E                300                          BCC         PRINTLINE_SR        *
00001378  6500 0172                301                          BCS         b010001111          *
0000137C                           302  
0000137C  5301                     303  b00                     SUB.B       #1,D1               *
0000137E  6700 2F34                304                          BEQ         PRINTLINE_SR        *
00001382  E388                     305                          LSL.L       #1,D0               *
00001384  6400 0196                306                          BCC         b000                *
00001388  6500 0182                307                          BCS         b001                *
0000138C                           308  
0000138C  5301                     309  b01                     SUB.B       #1,D1               *
0000138E  6700 2F24                310                          BEQ         PRINTLINE_SR        *
00001392  E388                     311                          LSL.L       #1,D0               *
00001394  6400 FF46                312                          BCC         b010                *
00001398  6500 FF52                313                          BCS         b011                *
0000139C                           314  
0000139C  5301                     315  b0100000                SUB.B       #1,D1               *
0000139E  6700 2F14                316                          BEQ         PRINTLINE_SR        *
000013A2  E388                     317                          LSL.L       #1,D0               *
000013A4  6400 2F0E                318                          BCC         PRINTLINE_SR        *
000013A8  6500 0012                319                          BCS         b01000001           *
000013AC                           320  
000013AC  5301                     321  b0100001                SUB.B       #1,D1               *
000013AE  6700 2F04                322                          BEQ         PRINTLINE_SR        *
000013B2  E388                     323                          LSL.L       #1,D0               *
000013B4  6400 01E6                324                          BCC         b01000010           *
000013B8  6500 01F2                325                          BCS         b01000011           *
000013BC                           326  
000013BC  5301                     327  b01000001               SUB.B       #1,D1               *
000013BE  6700 2EF4                328                          BEQ         PRINTLINE_SR        *
000013C2  E388                     329                          LSL.L       #1,D0               *
000013C4  6400 2EEE                330                          BCC         PRINTLINE_SR        *
000013C8  6500 028C                331                          BCS         b010000011          *
000013CC                           332  
000013CC  5301                     333  b010011100111           SUB.B       #1,D1               *
000013CE  6700 2EE4                334                          BEQ         PRINTLINE_SR        *
000013D2  E388                     335                          LSL.L       #1,D0               *
000013D4  6400 02DE                336                          BCC         b0100111001110      *
000013D8  6500 2EDA                337                          BCS         PRINTLINE_SR        *
000013DC                           338  
000013DC  5301                     339  b01001110011101         SUB.B       #1,D1               *
000013DE  6700 2ED4                340                          BEQ         PRINTLINE_SR        *
000013E2  E388                     341                          LSL.L       #1,D0               *
000013E4  6400 0166                342                          BCC         b010011100111010    *
000013E8  6500 2ECA                343                          BCS         PRINTLINE_SR        *
000013EC                           344  
000013EC  5301                     345  b01001110011100         SUB.B       #1,D1               *
000013EE  6700 2EC4                346                          BEQ         PRINTLINE_SR        *
000013F2  E388                     347                          LSL.L       #1,D0               *
000013F4  6400 FF26                348                          BCC         b010011100111000    *
000013F8  6500 2EBA                349                          BCS         PRINTLINE_SR        *
000013FC                           350  
000013FC  5301                     351  b01001101               SUB.B       #1,D1               *
000013FE  6700 2EB4                352                          BEQ         PRINTLINE_SR        *
00001402  E388                     353                          LSL.L       #1,D0               *
00001404  6400 2EAE                354                          BCC         PRINTLINE_SR        *
00001408  6500 00B2                355                          BCS         b010011011          *
0000140C                           356  
0000140C  5301                     357  b01001                  SUB.B       #1,D1               *
0000140E  6700 2EA4                358                          BEQ         PRINTLINE_SR        *
00001412  E388                     359                          LSL.L       #1,D0               *
00001414  6400 0086                360                          BCC         b010010             *
00001418  6500 0092                361                          BCS         b010011             *
0000141C                           362  
0000141C  5301                     363  b1                      SUB.B       #1,D1               *
0000141E  6700 2E94                364                          BEQ         PRINTLINE_SR        *
00001422  E388                     365                          LSL.L       #1,D0               *
00001424  6400 01A6                366                          BCC         b10                 *
00001428  6500 0192                367                          BCS         b11                 *
0000142C                           368  
0000142C  5301                     369  b0                      SUB.B       #1,D1               *
0000142E  6700 2E84                370                          BEQ         PRINTLINE_SR        *
00001432  E388                     371                          LSL.L       #1,D0               *
00001434  6400 FF46                372                          BCC         b00                 *
00001438  6500 FF52                373                          BCS         b01                 *
0000143C                           374  
0000143C  5301                     375  b01001000               SUB.B       #1,D1               *
0000143E  6700 2E74                376                          BEQ         PRINTLINE_SR        *
00001442  E388                     377                          LSL.L       #1,D0               *
00001444  6400 2E6E                378                          BCC         PRINTLINE_SR        *
00001448  6500 FE72                379                          BCS         b010010001          *
0000144C                           380  
0000144C  5301                     381  b01001001               SUB.B       #1,D1               *
0000144E  6700 2E64                382                          BEQ         PRINTLINE_SR        *
00001452  E388                     383                          LSL.L       #1,D0               *
00001454  6400 2E5E                384                          BCC         PRINTLINE_SR        *
00001458  6500 0032                385                          BCS         b010010011          *
0000145C                           386  
0000145C  5301                     387  b010000101              SUB.B       #1,D1               *
0000145E  6700 2E54                388                          BEQ         PRINTLINE_SR        *
00001462  E388                     389                          LSL.L       #1,D0               *
00001464  6400 12C8                390                          BCC         CLRL_SR             *
00001468  6500 2E4A                391                          BCS         PRINTLINE_SR        *
0000146C                           392  
0000146C  5301                     393  b010000100              SUB.B       #1,D1               *
0000146E  6700 2E44                394                          BEQ         PRINTLINE_SR        *
00001472  E388                     395                          LSL.L       #1,D0               *
00001474  6400 12AC                396                          BCC         CLRB_SR             *
00001478  6500 12AE                397                          BCS         CLRW_SR             *
0000147C                           398  
0000147C  5301                     399  b0000                   SUB.B       #1,D1               *
0000147E  6700 2E34                400                          BEQ         PRINTLINE_SR        *
00001482  E388                     401                          LSL.L       #1,D0               *
00001484  6400 01F0                402                          BCC         b00000              *
00001488  6500 2E2A                403                          BCS         PRINTLINE_SR        *
0000148C                           404  
0000148C  5301                     405  b010010011              SUB.B       #1,D1               *
0000148E  6700 2E24                406                          BEQ         PRINTLINE_SR        *
00001492  E388                     407                          LSL.L       #1,D0               *
00001494  6400 2E1E                408                          BCC         PRINTLINE_SR        *
00001498  6500 16DC                409                          BCS         LEA_SR              *
0000149C                           410  
0000149C  5301                     411  b010010                 SUB.B       #1,D1               *
0000149E  6700 2E14                412                          BEQ         PRINTLINE_SR        *
000014A2  E388                     413                          LSL.L       #1,D0               *
000014A4  6400 00E6                414                          BCC         b0100100            *
000014A8  6500 00D2                415                          BCS         b0100101            *
000014AC                           416  
000014AC  5301                     417  b010011                 SUB.B       #1,D1               *
000014AE  6700 2E04                418                          BEQ         PRINTLINE_SR        *
000014B2  E388                     419                          LSL.L       #1,D0               *
000014B4  6400 FE96                420                          BCC         b0100110            *
000014B8  6500 FEA2                421                          BCS         b0100111            *
000014BC                           422  
000014BC  5301                     423  b010011011              SUB.B       #1,D1               *
000014BE  6700 2DF4                424                          BEQ         PRINTLINE_SR        *
000014C2  E388                     425                          LSL.L       #1,D0               *
000014C4  6400 2DEE                426                          BCC         PRINTLINE_SR        *
000014C8  6500 16AC                427                          BCS         LEA_SR              *
000014CC                           428  
000014CC  5301                     429  b010001011              SUB.B       #1,D1               *
000014CE  6700 2DE4                430                          BEQ         PRINTLINE_SR        *
000014D2  E388                     431                          LSL.L       #1,D0               *
000014D4  6400 2DDE                432                          BCC         PRINTLINE_SR        *
000014D8  6500 169C                433                          BCS         LEA_SR              *
000014DC                           434  
000014DC  5301                     435  b0100                   SUB.B       #1,D1               *
000014DE  6700 2DD4                436                          BEQ         PRINTLINE_SR        *
000014E2  E388                     437                          LSL.L       #1,D0               *
000014E4  6400 0016                438                          BCC         b01000              *
000014E8  6500 FF22                439                          BCS         b01001              *
000014EC                           440  
000014EC  5301                     441  b010001111              SUB.B       #1,D1               *
000014EE  6700 2DC4                442                          BEQ         PRINTLINE_SR        *
000014F2  E388                     443                          LSL.L       #1,D0               *
000014F4  6400 2DBE                444                          BCC         PRINTLINE_SR        *
000014F8  6500 167C                445                          BCS         LEA_SR              *
000014FC                           446  
000014FC  5301                     447  b01000                  SUB.B       #1,D1               *
000014FE  6700 2DB4                448                          BEQ         PRINTLINE_SR        *
00001502  E388                     449                          LSL.L       #1,D0               *
00001504  6400 018E                450                          BCC         b010000             *
00001508  6500 017A                451                          BCS         b010001             *
0000150C                           452  
0000150C  5301                     453  b001                    SUB.B       #1,D1               *
0000150E  6700 2DA4                454                          BEQ         PRINTLINE_SR        *
00001512  E388                     455                          LSL.L       #1,D0               *
00001514  6400 17DA                456                          BCC         MOVEDECODE_SR       *
00001518  6500 17D6                457                          BCS         MOVEDECODE_SR       *
0000151C                           458  
0000151C  5301                     459  b000                    SUB.B       #1,D1               *
0000151E  6700 2D94                460                          BEQ         PRINTLINE_SR        *
00001522  E388                     461                          LSL.L       #1,D0               *
00001524  6400 FF56                462                          BCC         b0000               *
00001528  6500 17C6                463                          BCS         MOVEDECODE_SR       *
0000152C                           464  
0000152C  5301                     465  b01001110011            SUB.B       #1,D1               *
0000152E  6700 2D84                466                          BEQ         PRINTLINE_SR        *
00001532  E388                     467                          LSL.L       #1,D0               *
00001534  6400 2D7E                468                          BCC         PRINTLINE_SR        *
00001538  6500 FE92                469                          BCS         b010011100111       *
0000153C                           470  
0000153C  5301                     471  b010011111              SUB.B       #1,D1               *
0000153E  6700 2D74                472                          BEQ         PRINTLINE_SR        *
00001542  E388                     473                          LSL.L       #1,D0               *
00001544  6400 2D6E                474                          BCC         PRINTLINE_SR        *
00001548  6500 162C                475                          BCS         LEA_SR              *
0000154C                           476  
0000154C  5301                     477  b010011100111010        SUB.B       #1,D1               *
0000154E  6700 2D64                478                          BEQ         PRINTLINE_SR        *
00001552  E388                     479                          LSL.L       #1,D0               *
00001554  6400 2D5E                480                          BCC         PRINTLINE_SR        *
00001558  6500 2E8E                481                          BCS         RTS_SR              *
0000155C                           482  
0000155C  5301                     483  b100                    SUB.B       #1,D1               *
0000155E  6700 2D54                484                          BEQ         PRINTLINE_SR        *
00001562  E388                     485                          LSL.L       #1,D0               *
00001564  6400 2048                486                          BCC         OR_SR               *
00001568  6500 2880                487                          BCS         SUB_SR              *
0000156C                           488  
0000156C  5301                     489  b101                    SUB.B       #1,D1               *
0000156E  6700 2D44                490                          BEQ         PRINTLINE_SR        *
00001572  E388                     491                          LSL.L       #1,D0               *
00001574  6400 2D3E                492                          BCC         PRINTLINE_SR        *
00001578  6500 1210                493                          BCS         CMP_SR              *
0000157C                           494  
0000157C  5301                     495  b0100101                SUB.B       #1,D1               *
0000157E  6700 2D34                496                          BEQ         PRINTLINE_SR        *
00001582  E388                     497                          LSL.L       #1,D0               *
00001584  6400 2D2E                498                          BCC         PRINTLINE_SR        *
00001588  6500 006E                499                          BCS         b01001011           *
0000158C                           500  
0000158C  5301                     501  b0100100                SUB.B       #1,D1               *
0000158E  6700 2D24                502                          BEQ         PRINTLINE_SR        *
00001592  E388                     503                          LSL.L       #1,D0               *
00001594  6400 FEA6                504                          BCC         b01001000           *
00001598  6500 FEB2                505                          BCS         b01001001           *
0000159C                           506  
0000159C  5301                     507  b01000010               SUB.B       #1,D1               *
0000159E  6700 2D14                508                          BEQ         PRINTLINE_SR        *
000015A2  E388                     509                          LSL.L       #1,D0               *
000015A4  6400 FEC6                510                          BCC         b010000100          *
000015A8  6500 FEB2                511                          BCS         b010000101          *
000015AC                           512  
000015AC  5301                     513  b01000011               SUB.B       #1,D1               *
000015AE  6700 2D04                514                          BEQ         PRINTLINE_SR        *
000015B2  E388                     515                          LSL.L       #1,D0               *
000015B4  6400 2CFE                516                          BCC         PRINTLINE_SR        *
000015B8  6500 010A                517                          BCS         b010000111          *
000015BC                           518  
000015BC  5301                     519  b11                     SUB.B       #1,D1               *
000015BE  6700 2CF4                520                          BEQ         PRINTLINE_SR        *
000015C2  E388                     521                          LSL.L       #1,D0               *
000015C4  6400 FD46                522                          BCC         b110                *
000015C8  6500 FD32                523                          BCS         b111                *
000015CC                           524  
000015CC  5301                     525  b10                     SUB.B       #1,D1               *
000015CE  6700 2CE4                526                          BEQ         PRINTLINE_SR        *
000015D2  E388                     527                          LSL.L       #1,D0               *
000015D4  6486                     528                          BCC         b100                *
000015D6  6594                     529                          BCS         b101                *
000015D8                           530  
000015D8  5301                     531  b0100011                SUB.B       #1,D1               *
000015DA  6700 2CD8                532                          BEQ         PRINTLINE_SR        *
000015DE  E388                     533                          LSL.L       #1,D0               *
000015E0  6400 2CD2                534                          BCC         PRINTLINE_SR        *
000015E4  6500 FD86                535                          BCS         b01000111           *
000015E8                           536  
000015E8  5301                     537  b0100010                SUB.B       #1,D1               *
000015EA  6700 2CC8                538                          BEQ         PRINTLINE_SR        *
000015EE  E388                     539                          LSL.L       #1,D0               *
000015F0  6400 2CC2                540                          BCC         PRINTLINE_SR        *
000015F4  6500 FD46                541                          BCS         b01000101           *
000015F8                           542  
000015F8  5301                     543  b01001011               SUB.B       #1,D1               *
000015FA  6700 2CB8                544                          BEQ         PRINTLINE_SR        *
000015FE  E388                     545                          LSL.L       #1,D0               *
00001600  6400 2CB2                546                          BCC         PRINTLINE_SR        *
00001604  6500 FD26                547                          BCS         b010010111          *
00001608                           548  
00001608  5301                     549  b0000011                SUB.B       #1,D1               *
0000160A  6700 2CA8                550                          BEQ         PRINTLINE_SR        *
0000160E  E388                     551                          LSL.L       #1,D0               *
00001610  6400 08D8                552                          BCC         ADDIDECODE_SR       *
00001614  6500 2C9E                553                          BCS         PRINTLINE_SR        *
00001618                           554  
00001618  5301                     555  b000001                 SUB.B       #1,D1               *
0000161A  6700 2C98                556                          BEQ         PRINTLINE_SR        *
0000161E  E388                     557                          LSL.L       #1,D0               *
00001620  6400 2C92                558                          BCC         PRINTLINE_SR        *
00001624  65E2                     559                          BCS         b0000011            *
00001626                           560  
00001626  5301                     561  b01001110               SUB.B       #1,D1               *
00001628  6700 2C8A                562                          BEQ         PRINTLINE_SR        *
0000162C  E388                     563                          LSL.L       #1,D0               *
0000162E  6400 00A4                564                          BCC         b010011100          *
00001632  6500 0070                565                          BCS         b010011101          *
00001636                           566  
00001636  5301                     567  b01001111               SUB.B       #1,D1               *
00001638  6700 2C7A                568                          BEQ         PRINTLINE_SR        *
0000163C  E388                     569                          LSL.L       #1,D0               *
0000163E  6400 2C74                570                          BCC         PRINTLINE_SR        *
00001642  6500 FEF8                571                          BCS         b010011111          *
00001646                           572  
00001646  5301                     573  b0100111001             SUB.B       #1,D1               *
00001648  6700 2C6A                574                          BEQ         PRINTLINE_SR        *
0000164C  E388                     575                          LSL.L       #1,D0               *
0000164E  6400 2C64                576                          BCC         PRINTLINE_SR        *
00001652  6500 FED8                577                          BCS         b01001110011        *
00001656                           578  
00001656  5301                     579  b010000011              SUB.B       #1,D1               *
00001658  6700 2C5A                580                          BEQ         PRINTLINE_SR        *
0000165C  E388                     581                          LSL.L       #1,D0               *
0000165E  6400 2C54                582                          BCC         PRINTLINE_SR        *
00001662  6500 1512                583                          BCS         LEA_SR              *
00001666                           584  
00001666  5301                     585  b01001100               SUB.B       #1,D1               *
00001668  6700 2C4A                586                          BEQ         PRINTLINE_SR        *
0000166C  E388                     587                          LSL.L       #1,D0               *
0000166E  6400 2C44                588                          BCC         PRINTLINE_SR        *
00001672  6500 FC58                589                          BCS         b010011001          *
00001676                           590  
00001676  5301                     591  b00000                  SUB.B       #1,D1               *
00001678  6700 2C3A                592                          BEQ         PRINTLINE_SR        *
0000167C  E388                     593                          LSL.L       #1,D0               *
0000167E  6400 2C34                594                          BCC         PRINTLINE_SR        *
00001682  6594                     595                          BCS         b000001             *
00001684                           596  
00001684  5301                     597  b010001                 SUB.B       #1,D1               *
00001686  6700 2C2C                598                          BEQ         PRINTLINE_SR        *
0000168A  E388                     599                          LSL.L       #1,D0               *
0000168C  6400 FF5A                600                          BCC         b0100010            *
00001690  6500 FF46                601                          BCS         b0100011            *
00001694                           602  
00001694  5301                     603  b010000                 SUB.B       #1,D1               *
00001696  6700 2C1C                604                          BEQ         PRINTLINE_SR        *
0000169A  E388                     605                          LSL.L       #1,D0               *
0000169C  6400 FCFE                606                          BCC         b0100000            *
000016A0  6500 FD0A                607                          BCS         b0100001            *
000016A4                           608  
000016A4  5301                     609  b010011101              SUB.B       #1,D1               *
000016A6  6700 2C0C                610                          BEQ         PRINTLINE_SR        *
000016AA  E388                     611                          LSL.L       #1,D0               *
000016AC  6400 13CE                612                          BCC         JSR_SR              *
000016B0  6500 2C02                613                          BCS         PRINTLINE_SR        *
000016B4                           614  
000016B4  5301                     615  b0100111001110          SUB.B       #1,D1               *
000016B6  6700 2BFC                616                          BEQ         PRINTLINE_SR        *
000016BA  E388                     617                          LSL.L       #1,D0               *
000016BC  6400 FD2E                618                          BCC         b01001110011100     *
000016C0  6500 FD1A                619                          BCS         b01001110011101     *
000016C4                           620  
000016C4  5301                     621  b010000111              SUB.B       #1,D1               *
000016C6  6700 2BEC                622                          BEQ         PRINTLINE_SR        *
000016CA  E388                     623                          LSL.L       #1,D0               *
000016CC  6400 2BE6                624                          BCC         PRINTLINE_SR        *
000016D0  6500 14A4                625                          BCS         LEA_SR              *
000016D4                           626  
000016D4  5301                     627  b010011100              SUB.B       #1,D1               *
000016D6  6700 2BDC                628                          BEQ         PRINTLINE_SR        *
000016DA  E388                     629                          LSL.L       #1,D0               *
000016DC  6400 2BD6                630                          BCC         PRINTLINE_SR        *
000016E0  6500 FF64                631                          BCS         b0100111001         *
000016E4                           632  
000016E4                           633  -------------------- end include --------------------
000016E4                           634                                                              * when we add decoders, just give them the correct label, and delete them from this list.
000016E4                           635  
000016E4  4E75                     636  TREEDONE                RTS                                 * return from tree to get next line
000016E6                           637  
000016E6                           638                                                              * Decoder files go here
000016E6                           639  ADDADECODE_SR           INCLUDE     "ADDAdecode.X68"
000016E6  4280                     640                      CLR.L   D0
000016E8  4281                     641                      CLR.L   D1
000016EA  4282                     642                      CLR.L   D2
000016EC  4283                     643                      CLR.L   D3
000016EE  4284                     644                      CLR.L   D4
000016F0  4285                     645                      CLR.L   D5
000016F2  4286                     646                      CLR.L   D6
000016F4  4287                     647                      CLR.L   D7
000016F6  43F9 00010000            648                      LEA     LINESTARTLOC,A1
000016FC                           649  
000016FC                           650  
000016FC  1011                     651                      MOVE.B  (A1),D0
000016FE  0200 0001                652                      ANDI.B  #%00000001,D0           *we only need the last last bit
00001702                           653  
00001702                           654  
00001702  1411                     655                      MOVE.B  (A1),D2                 *address register
00001704  0202 000E                656                      ANDI.B  #%00001110,D2           *We only need the address register
00001708  E20A                     657                      LSR.B   #1,D2
0000170A                           658  
0000170A                           659  
0000170A                           660  
0000170A  3611                     661                      MOVE.W  (A1),D3                 *mode
0000170C  0243 0038                662                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
00001710  E60B                     663                      LSR.B   #3,D3
00001712                           664  
00001712  1E19                     665                      MOVE.B  (A1)+,D7
00001714  1819                     666                      MOVE.B  (A1)+,D4                *register
00001716  0204 0007                667                      ANDI.B  #%00000111,D4           *We only care about the last bit
0000171A                           668  
0000171A  4247                     669                      CLR     D7
0000171C                           670  
0000171C                           671  
0000171C                           672  
0000171C                           673  ADDA_VALIDITY
0000171C  B83C 0000                674                      CMP.B   #%000,D4                *Lets check the source register
00001720  6700 0026                675                      BEQ     ADDA_SR_VALID
00001724  B83C 0001                676                      CMP.B   #%001,D4
00001728  6700 001E                677                      BEQ     ADDA_SR_VALID
0000172C  B83C 0002                678                      CMP.B   #%010,D4
00001730  6700 0016                679                      BEQ     ADDA_SR_VALID
00001734  B83C 0003                680                      CMP.B   #%011,D4
00001738  6700 000E                681                      BEQ     ADDA_SR_VALID
0000173C  B83C 0004                682                      CMP.B   #%100,D4
00001740  6700 0006                683                      BEQ     ADDA_SR_VALID
00001744  6000 0334                684                      BRA     ADDA_DECODE_ERR
00001748                           685  
00001748                           686  
00001748                           687  
00001748                           688  
00001748                           689  
00001748                           690  ADDA_SR_VALID                                       * VALIDATES THE OPCODES
00001748                           691                                                      * Lets check the Address register
00001748  B43C 0000                692                      CMP.B   #%000,D2
0000174C  6700 003E                693                      BEQ     ADDA_ADDREG_VALID
00001750  B43C 0001                694                      CMP.B   #%001,D2
00001754  6700 0036                695                      BEQ     ADDA_ADDREG_VALID
00001758  B43C 0002                696                      CMP.B   #%010,D2
0000175C  6700 002E                697                      BEQ     ADDA_ADDREG_VALID
00001760  B43C 0003                698                      CMP.B   #%011,D2
00001764  6700 0026                699                      BEQ     ADDA_ADDREG_VALID
00001768  B43C 0004                700                      CMP.B   #%100,D2
0000176C  6700 001E                701                      BEQ     ADDA_ADDREG_VALID
00001770  B43C 0005                702                      CMP.B   #%101,D2
00001774  6700 0016                703                      BEQ     ADDA_ADDREG_VALID
00001778  B43C 0006                704                      CMP.B   #%110,D2
0000177C  6700 000E                705                      BEQ     ADDA_ADDREG_VALID
00001780  B43C 0007                706                      CMP.B   #%111,D2
00001784  6700 0006                707                      BEQ     ADDA_ADDREG_VALID
00001788  6000 0002                708                      BRA     ADDA_ADDREG_VALID
0000178C                           709  
0000178C                           710  
0000178C                           711  ADDA_ADDREG_VALID                                   *WE ARE HERE IF THE ADDRESS REGISTER IS VALID
0000178C                           712                                                      *LET'S CHECK THE SIZE
0000178C  B03C 0000                713                      CMP.B   #%0,D0
00001790  6700 000E                714                      BEQ     ADDA_SIZE_VALID
00001794  B03C 0001                715                      CMP.B   #%1,D0
00001798  6700 0006                716                      BEQ     ADDA_SIZE_VALID
0000179C  6000 02DC                717                      BRA     ADDA_DECODE_ERR
000017A0                           718  
000017A0                           719  
000017A0                           720  ADDA_SIZE_VALID                                     *WE ARE HERE IF THE SIZE AND ADDRESS REGISTER ARE VALID
000017A0                           721                                                      *LETS CHECK THE MODE
000017A0                           722                                                      *THE MODE CAN BE ANYTHING
000017A0                           723  
000017A0  B63C 0000                724                      CMP.B   #%000,D3
000017A4  6700 0036                725                      BEQ     ADDA_MODE_VALID
000017A8  B63C 0001                726                      CMP.B   #%001,D3
000017AC  6700 002E                727                      BEQ     ADDA_MODE_VALID
000017B0  B63C 0002                728                      CMP.B   #%010,D3
000017B4  6700 0026                729                      BEQ     ADDA_MODE_VALID
000017B8  B63C 0000                730                      CMP.B   #%000,D3
000017BC  6700 001E                731                      BEQ     ADDA_MODE_VALID
000017C0  B63C 0003                732                      CMP.B   #%011,D3
000017C4  6700 0016                733                      BEQ     ADDA_MODE_VALID
000017C8  B63C 0004                734                      CMP.B   #%100,D3
000017CC  6700 000E                735                      BEQ     ADDA_MODE_VALID
000017D0  B63C 0007                736                      CMP.B   #%111,D3
000017D4  6700 0006                737                      BEQ     ADDA_MODE_VALID
000017D8  6000 02A0                738                      BRA     ADDA_DECODE_ERR
000017DC                           739  
000017DC                           740  
000017DC                           741  
000017DC                           742  ADDA_MODE_VALID                                     *THE MODE IS CHECKED AND VALID AT THIS POINT
000017DC                           743                                                      *LETS CHECK FOR REGISTRATIO MODE
000017DC  B63C 0001                744                      CMP.B   #%001,D3
000017E0  6700 001A                745                      BEQ     VALIDATE_ADDA_AR
000017E4  B63C 0002                746                      CMP.B   #%010,D3
000017E8  6700 0012                747                      BEQ     VALIDATE_ADDA_AR
000017EC  B63C 0003                748                      CMP.B   #%011,D3
000017F0  6700 000A                749                      BEQ     VALIDATE_ADDA_AR
000017F4  B63C 0004                750                      CMP.B   #%100,D3
000017F8  6700 0002                751                      BEQ     VALIDATE_ADDA_AR
000017FC                           752  
000017FC                           753  VALIDATE_ADDA_AR                                    *An,it can be be 7
000017FC  B83C 006F                754                      CMP.B   #111,D4
00001800  6700 0278                755                      BEQ     ADDA_DECODE_ERR
00001804  4EB9 0000180E            756                      JSR     ADDA_IMM_SOURCE
0000180A  6000 006A                757                      BRA     ADDA_VERIFIED
0000180E                           758  
0000180E                           759  
0000180E  B63C 0007                760  ADDA_IMM_SOURCE     CMP.B   #%111,D3
00001812  6600 0050                761                      BNE     ADDA_SOURCE
00001816  B83C 0000                762                      CMP.B   #%000,D4
0000181A  6700 0016                763                      BEQ     ADDA_GET_VALUE
0000181E  B83C 0001                764                      CMP.B   #%001,D4
00001822  6700 000E                765                      BEQ     ADDA_GET_VALUE
00001826  B83C 0004                766                      CMP.B   #%100,D4
0000182A  6700 0006                767                      BEQ     ADDA_GET_VALUE
0000182E  6000 024A                768                      BRA     ADDA_DECODE_ERR
00001832                           769  
00001832                           770  ADDA_GET_VALUE                                      *Now we need to figure out how much data to snag after, should we get a word or a long?
00001832  B83C 0004                771                      CMP.B   #%100,D4
00001836  6700 0012                772                      BEQ     ADDA_POUND
0000183A  B83C 0000                773                      CMP.B   #%000,D4
0000183E  6700 0016                774                      BEQ     ADDA_GETWORD
00001842  B83C 0001                775                      CMP.B   #%001,D4
00001846  6700 0014                776                      BEQ     ADDA_GETLONG
0000184A                           777  
0000184A                           778  ADDA_POUND
0000184A  B03C 0002                779                      CMP.B   #%10,D0                 *The number need to be added is a literal
0000184E  6700 000C                780                      BEQ     ADDA_GETLONG
00001852  6000 0002                781                      BRA     ADDA_GETWORD
00001856                           782  
00001856                           783  
00001856                           784  ADDA_GETWORD
00001856  3A19                     785                      MOVE.W  (A1)+,D5                *D5 store the word data
00001858  6000 000A                786                      BRA     ADDA_SOURCE
0000185C                           787  
0000185C                           788  
0000185C                           789  ADDA_GETLONG
0000185C  2A19                     790                      MOVE.L  (A1)+,D5                *D5 store the long data
0000185E  6000 0004                791                      BRA     ADDA_SOURCE
00001862                           792  
00001862                           793  
00001862  4E75                     794  VERIFIED_ADDA       RTS
00001864                           795  
00001864                           796  ADDA_SOURCE
00001864  B43C 0007                797                      CMP.B   #%111,D2
00001868  66F8                     798                      BNE     VERIFIED_ADDA
0000186A  B23C 0002                799                      CMP.B   #%10,D1
0000186E  6700 0386                800                      BEQ     ADDED_GETLONG
00001872  6000 0388                801                      BRA     ADDED_GETWORD
00001876                           802  
00001876  6000 0002                803  ADDA_VERIFIED       BRA     ADDA_PRINT
0000187A                           804  
0000187A  41F9 0000518C            805  ADDA_PRINT          LEA     ADDASTRING,A0
00001880  4EB9 00004428            806                      JSR     PRINT_SR
00001886  6000 0002                807                      BRA     PRINT_ADDA_SIZE
0000188A                           808  
0000188A  B03C 0000                809  PRINT_ADDA_SIZE     CMP.B   #%0,D0                  *Print size
0000188E  6700 000E                810                      BEQ     SIZEA_W
00001892  B03C 0001                811                      CMP.B   #%1,D0
00001896  6700 0016                812                      BEQ     SIZEA_L
0000189A  6000 01DE                813                      BRA     ADDA_DECODE_ERR
0000189E                           814  
0000189E                           815  
0000189E  41F9 000051F9            816  SIZEA_W             LEA     WORDSTRING,A0           *size is word
000018A4  4EB9 00004428            817                      JSR     PRINT_SR
000018AA  6000 0012                818                      BRA     ADDA_P
000018AE  41F9 000051FC            819  SIZEA_L             LEA     LONGSTRING,A0           *size is long
000018B4  4EB9 00004428            820                      JSR     PRINT_SR
000018BA  6000 0002                821                      BRA     ADDA_P
000018BE                           822  
000018BE                           823  
000018BE  4EB9 0000434E            824  ADDA_P              JSR     SHIFTCURSOR             *Done displaying size, now display source
000018C4  B63C 0000                825                      CMP.B   #%000,D3
000018C8  6700 002E                826                      BEQ     ADDA_000
000018CC  B63C 0001                827                      CMP.B   #%001,D3
000018D0  6700 003E                828                      BEQ     ADDA_001
000018D4  B63C 0002                829                      CMP.B   #%010,D3
000018D8  6700 004E                830                      BEQ     ADDA_010
000018DC  B63C 0003                831                      CMP.B   #%011,D3
000018E0  6700 0076                832                      BEQ     ADDA_011
000018E4  B63C 0007                833                      CMP.B   #%111,D3
000018E8  6700 00AA                834                      BEQ     ADDA_111
000018EC  B63C 0004                835                      CMP.B   #%100,D3
000018F0  6700 0128                836                      BEQ     ADDA_100
000018F4                           837  
000018F4  6000 0160                838                      BRA     ADDA_DEST_PRT
000018F8                           839  
000018F8                           840  ADDA_000                                            *Source is data register
000018F8  41F9 0000520F            841                      LEA     DSTRING,A0
000018FE  4EB9 00004428            842                      JSR     PRINT_SR
00001904  2E04                     843                      MOVE.L  D4,D7
00001906  4EB9 0000443A            844                      JSR     PRINT_HEX
0000190C  6000 0148                845                      BRA     ADDA_DEST_PRT
00001910                           846  ADDA_001                                            *Source is address register
00001910  41F9 0000520D            847                      LEA     ASTRING,A0
00001916  4EB9 00004428            848                      JSR     PRINT_SR
0000191C  2E04                     849                      MOVE.L  D4,D7
0000191E  4EB9 0000443A            850                      JSR     PRINT_HEX
00001924  6000 0130                851                      BRA     ADDA_DEST_PRT
00001928                           852  ADDA_010                                            *Address register indirect
00001928  41F9 00005211            853                      LEA     LPARENSTRING,A0
0000192E  4EB9 00004428            854                      JSR     PRINT_SR
00001934  41F9 0000520D            855                      LEA     ASTRING,A0
0000193A  4EB9 00004428            856                      JSR     PRINT_SR
00001940  2E04                     857                      MOVE.L  D4,D7
00001942  4EB9 0000443A            858                      JSR     PRINT_HEX
00001948  41F9 00005213            859                      LEA     RPARENSTRING,A0
0000194E  4EB9 00004428            860                      JSR     PRINT_SR
00001954  6000 0100                861                      BRA     ADDA_DEST_PRT
00001958                           862  ADDA_011                                            *Address register indirect postincrement
00001958  41F9 00005211            863                      LEA     LPARENSTRING,A0
0000195E  4EB9 00004428            864                      JSR     PRINT_SR
00001964  41F9 0000520D            865                      LEA     ASTRING,A0
0000196A  4EB9 00004428            866                      JSR     PRINT_SR
00001970  2E04                     867                      MOVE.L  D4,D7
00001972  4EB9 0000443A            868                      JSR     PRINT_HEX
00001978  41F9 00005213            869                      LEA     RPARENSTRING,A0
0000197E  4EB9 00004428            870                      JSR     PRINT_SR
00001984  41F9 00005215            871                      LEA     PLUSSTRING,A0
0000198A  4EB9 00004428            872                      JSR     PRINT_SR
00001990  6000 00C4                873                      BRA     ADDA_DEST_PRT
00001994                           874  ADDA_111                                            *Immediate source, could be immediate data or word/long address
00001994  B83C 0000                875                      CMP.B   #%000,D4
00001998  6700 0012                876                      BEQ     ADDA_111000
0000199C  B83C 0001                877                      CMP.B   #%001,D4
000019A0  6700 001E                878                      BEQ     ADDA_111001
000019A4  B83C 0004                879                      CMP.B   #%100,D4
000019A8  6700 0030                880                      BEQ     ADDA_111100
000019AC                           881  ADDA_111000                                         *Is word address
000019AC  41F9 00005209            882                      LEA     DOLLARSTRING,A0
000019B2  4287                     883                      CLR.L   D7
000019B4  3E05                     884                      MOVE.W  D5,D7
000019B6  4EB9 0000443A            885                      JSR     PRINT_HEX
000019BC  6000 0098                886                      BRA     ADDA_DEST_PRT
000019C0                           887  ADDA_111001                                         *Is long address
000019C0  41F9 00005209            888                      LEA     DOLLARSTRING,A0
000019C6  4EB9 00004428            889                      JSR     PRINT_SR
000019CC  4287                     890                      CLR.L   D7
000019CE  2E05                     891                      MOVE.L  D5,D7
000019D0  4EB9 0000443A            892                      JSR     PRINT_HEX
000019D6  6000 007E                893                      BRA     ADDA_DEST_PRT
000019DA                           894  ADDA_111100                                         *Is immediate data
000019DA  41F9 00005207            895                      LEA     POUNDSTRING,A0
000019E0  4EB9 00004428            896                      JSR     PRINT_SR
000019E6  41F9 00005209            897                      LEA     DOLLARSTRING,A0
000019EC  4EB9 00004428            898                      JSR     PRINT_SR
000019F2  4287                     899                      CLR.L   D7
000019F4  B03C 0000                900                      CMP.B   #%0,D0
000019F8  6700 000A                901                      BEQ     ADDA_111100W
000019FC  B03C 0001                902                      CMP.B   #%1,D0
00001A00  6700 0008                903                      BEQ     ADDA_111100L
00001A04  3E05                     904  ADDA_111100W        MOVE.W  D5,D7
00001A06  6000 0008                905                      BRA     ADDA_111100CONT
00001A0A  2E05                     906  ADDA_111100L        MOVE.L  D5,D7
00001A0C  6000 0002                907                      BRA     ADDA_111100CONT
00001A10                           908  ADDA_111100CONT
00001A10  4EB9 0000443A            909                      JSR     PRINT_HEX
00001A16  6000 003E                910                      BRA     ADDA_DEST_PRT
00001A1A                           911  ADDA_100                                            *Source is address with predecrement
00001A1A  41F9 00005217            912                      LEA     MINUSSTRING,A0
00001A20  4EB9 00004428            913                      JSR     PRINT_SR
00001A26  41F9 00005211            914                      LEA     LPARENSTRING,A0
00001A2C  4EB9 00004428            915                      JSR     PRINT_SR
00001A32  41F9 0000520D            916                      LEA     ASTRING,A0
00001A38  4EB9 00004428            917                      JSR     PRINT_SR
00001A3E  2E04                     918                      MOVE.L  D4,D7
00001A40  4EB9 0000443A            919                      JSR     PRINT_HEX
00001A46  41F9 00005213            920                      LEA     RPARENSTRING,A0
00001A4C  4EB9 00004428            921                      JSR     PRINT_SR
00001A52  6000 0002                922                      BRA     ADDA_DEST_PRT
00001A56                           923  
00001A56                           924  ADDA_DEST_PRT                                       *Now print the destination
00001A56                           925  
00001A56  41F9 000051FF            926                      LEA     COMMASTRING,A0
00001A5C  4EB9 00004428            927                      JSR     PRINT_SR                *Destination is just address register
00001A62  41F9 0000520D            928                      LEA     ASTRING,A0
00001A68  4EB9 00004428            929                      JSR     PRINT_SR
00001A6E  2E02                     930                      MOVE.L  D2,D7
00001A70  4EB9 0000443A            931                      JSR     PRINT_HEX
00001A76  6000 000A                932                      BRA     ADDA_DECODE_DONE
00001A7A                           933  
00001A7A                           934  
00001A7A  4EB9 000042B4            935  ADDA_DECODE_ERR     JSR     PRINTLINE_SR
00001A80  4E75                     936                      RTS
00001A82                           937  
00001A82                           938  
00001A82  41F9 0000513A            939  ADDA_DECODE_DONE    LEA     LINEEND,A0
00001A88  4EB9 00004428            940                      JSR     PRINT_SR
00001A8E  4E75                     941                      RTS
00001A90                           942                                                      *~Font name~Courier New~
00001A90                           943                                                      *~Font size~10~
00001A90                           944                                                      *~Tab type~1~
00001A90                           945                                                      *~Tab size~4~
00001A90                           946  
00001A90                           947  -------------------- end include --------------------
00001A90                           948  ADDDECODE_SR            INCLUDE     "ADDdecode.X68"
00001A90  4280                     949                      CLR.L   D0
00001A92  4281                     950                      CLR.L   D1
00001A94  4282                     951                      CLR.L   D2
00001A96  4283                     952                      CLR.L   D3
00001A98  4284                     953                      CLR.L   D4
00001A9A  4285                     954                      CLR.L   D5
00001A9C  4286                     955                      CLR.L   D6
00001A9E  4287                     956                      CLR.L   D7
00001AA0  43F9 00010000            957                      LEA     LINESTARTLOC,A1
00001AA6                           958  
00001AA6                           959                                                      *check if it is ADDA instead
00001AA6  3011                     960                      MOVE.W  (A1),D0
00001AA8  EC48                     961                      LSR.W   #6,D0
00001AAA  0200 0003                962                      ANDI.B  #%00000011,D0
00001AAE  B03C 0003                963                      CMP.B   #%11,D0                 *check if 11,holds the size
00001AB2  6700 FC32                964                      BEQ     ADDADECODE_SR           *Its actually ADDA
00001AB6                           965  
00001AB6                           966  
00001AB6  1211                     967                      MOVE.B  (A1),D1                 *Data register
00001AB8  0201 000E                968                      ANDI.B  #%00001110,D1           *We only need the data register
00001ABC  E209                     969                      LSR.B   #1,D1
00001ABE                           970  
00001ABE                           971  
00001ABE  1411                     972                      MOVE.B  (A1),D2                 *Direction,    *determine if dn + <ea>-><ea> or <ea> + dn->dn
00001AC0  0202 0001                973                      ANDI.B  #%00000001,D2           *we only need the lat bit
00001AC4                           974  
00001AC4                           975  
00001AC4  3611                     976                      MOVE.W  (A1),D3
00001AC6  0243 0038                977                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
00001ACA  E60B                     978                      LSR.B   #3,D3
00001ACC                           979  
00001ACC  1E19                     980                      MOVE.B  (A1)+,D7
00001ACE  1819                     981                      MOVE.B  (A1)+,D4                *register
00001AD0  0204 0007                982                      ANDI.B  #%00000111,D4           *We only care about the last beat
00001AD4                           983  
00001AD4  4247                     984                      CLR     D7
00001AD6                           985  
00001AD6                           986  ADDVALIDITY                                         * Lets check the data register first
00001AD6  B23C 0000                987                      CMP.B   #%000,D1
00001ADA  6700 003E                988                      BEQ     ADD_DATAREG_VALID
00001ADE  B23C 0001                989                      CMP.B   #%001,D1
00001AE2  6700 0036                990                      BEQ     ADD_DATAREG_VALID
00001AE6  B23C 0002                991                      CMP.B   #%010,D1
00001AEA  6700 002E                992                      BEQ     ADD_DATAREG_VALID
00001AEE  B23C 0003                993                      CMP.B   #%011,D1
00001AF2  6700 0026                994                      BEQ     ADD_DATAREG_VALID
00001AF6  B23C 0004                995                      CMP.B   #%100,D1
00001AFA  6700 001E                996                      BEQ     ADD_DATAREG_VALID
00001AFE  B23C 0005                997                      CMP.B   #%101,D1
00001B02  6700 0016                998                      BEQ     ADD_DATAREG_VALID
00001B06  B23C 0006                999                      CMP.B   #%110,D1
00001B0A  6700 000E               1000                      BEQ     ADD_DATAREG_VALID
00001B0E  B23C 0007               1001                      CMP.B   #%111,D1
00001B12  6700 0006               1002                      BEQ     ADD_DATAREG_VALID
00001B16  6000 03BC               1003                      BRA     ADD_DECODE_ERR
00001B1A                          1004  
00001B1A                          1005  
00001B1A                          1006  ADD_DATAREG_VALID                                   * LET'S THE DIRECTION NOW
00001B1A  B43C 0000               1007                      CMP.B   #0,D2
00001B1E  6700 000E               1008                      BEQ     ADD_DN_DESTINATION      *Dn is destination, Dn + <ea>->Dn all effective address are valid
00001B22  B43C 0001               1009                      CMP.B   #1,D2
00001B26  6700 0364               1010                      BEQ     ADD_DN_SOURCE           *Dn is source, <ea> + Dn-><ea>some effectve addresses are not valid
00001B2A  6000 03A8               1011                      BRA     ADD_DECODE_ERR
00001B2E                          1012  
00001B2E                          1013  ADD_DN_DESTINATION                                  *check mode for Dn is destination (Dn + <ea>->Dn)
00001B2E  B63C 0000               1014                      CMP.B   #%000,D3
00001B32  6700 002E               1015                      BEQ     ADD_MODE_VALIDATE
00001B36  B63C 0001               1016                      CMP.B   #%001,D3
00001B3A  6700 0344               1017                      BEQ     CHECK_SIZE_4_AR         *If An is the effective address, check the size, if byte invalid
00001B3E  B63C 0002               1018                      CMP.B   #%010,D3
00001B42  6700 001E               1019                      BEQ     ADD_MODE_VALIDATE
00001B46  B63C 0003               1020                      CMP.B   #%011,D3
00001B4A  6700 0016               1021                      BEQ     ADD_MODE_VALIDATE
00001B4E  B63C 0004               1022                      CMP.B   #%100,D3
00001B52  6700 000E               1023                      BEQ     ADD_MODE_VALIDATE
00001B56  B63C 0007               1024                      CMP.B   #%111,D3
00001B5A  6700 0006               1025                      BEQ     ADD_MODE_VALIDATE
00001B5E  6000 0374               1026                      BRA     ADD_DECODE_ERR
00001B62                          1027  
00001B62                          1028                                                      *Check if source register is valid (Dn + <ea>->Dn)
00001B62                          1029  
00001B62                          1030  ADD_MODE_VALIDATE
00001B62  B63C 0001               1031                      CMP.B   #%001,D3
00001B66  6700 001A               1032                      BEQ     VALIDATE_AR
00001B6A  B63C 0002               1033                      CMP.B   #%010,D3
00001B6E  6700 0012               1034                      BEQ     VALIDATE_AR
00001B72  B63C 0003               1035                      CMP.B   #%011,D3
00001B76  6700 000A               1036                      BEQ     VALIDATE_AR
00001B7A  B63C 0004               1037                      CMP.B   #%100,D3
00001B7E  6700 0002               1038                      BEQ     VALIDATE_AR
00001B82                          1039  
00001B82                          1040  VALIDATE_AR                                         *An,it can be be 7
00001B82  B83C 006F               1041                      CMP.B   #111,D4
00001B86  6700 034C               1042                      BEQ     ADD_DECODE_ERR
00001B8A  6000 0002               1043                      BRA     ADD_IMM_SOURCE
00001B8E                          1044  
00001B8E                          1045  
00001B8E  B63C 0007               1046  ADD_IMM_SOURCE      CMP.B   #%111,D3
00001B92  6600 004E               1047                      BNE     ADD_SOURCE
00001B96  B83C 0000               1048                      CMP.B   #%000,D4
00001B9A  6700 0016               1049                      BEQ     ADD_GET_VALUE
00001B9E  B83C 0001               1050                      CMP.B   #%001,D4
00001BA2  6700 000E               1051                      BEQ     ADD_GET_VALUE
00001BA6  B83C 0004               1052                      CMP.B   #%100,D4
00001BAA  6700 0006               1053                      BEQ     ADD_GET_VALUE
00001BAE  6000 0324               1054                      BRA     ADD_DECODE_ERR
00001BB2                          1055  
00001BB2                          1056  ADD_GET_VALUE                                       *Now we need to figure out how much data to snag after, should we get a word or a long?
00001BB2  B83C 0004               1057                      CMP.B   #%100,D4
00001BB6  6700 0012               1058                      BEQ     ADDS_POUND
00001BBA  B83C 0000               1059                      CMP.B   #%000,D4
00001BBE  6700 0016               1060                      BEQ     ADDS_GETWORD
00001BC2  B83C 0001               1061                      CMP.B   #%001,D4
00001BC6  6700 0014               1062                      BEQ     ADDS_GETLONG
00001BCA                          1063  
00001BCA                          1064  ADDS_POUND
00001BCA  B03C 0002               1065                      CMP.B   #%10,D0                 *The number need to be added is a literal
00001BCE  6700 000C               1066                      BEQ     ADDS_GETLONG
00001BD2  6000 0002               1067                      BRA     ADDS_GETWORD
00001BD6                          1068  
00001BD6                          1069  
00001BD6                          1070  ADDS_GETWORD
00001BD6  3A19                    1071                      MOVE.W  (A1)+,D5                *D5 store the word data
00001BD8  6000 0008               1072                      BRA     ADD_SOURCE
00001BDC                          1073  
00001BDC                          1074  
00001BDC                          1075  ADDS_GETLONG
00001BDC  2A19                    1076                      MOVE.L  (A1)+,D5                *D5 store the long data
00001BDE  6000 0002               1077                      BRA     ADD_SOURCE
00001BE2                          1078  
00001BE2                          1079  ADD_SOURCE
00001BE2  B43C 0007               1080                      CMP.B   #%111,D2
00001BE6  6600 0046               1081                      BNE     ADD_VERIFIED
00001BEA  B23C 0002               1082                      CMP.B   #%10,D1
00001BEE  6700 0006               1083                      BEQ     ADDED_GETLONG
00001BF2  6000 0008               1084                      BRA     ADDED_GETWORD
00001BF6                          1085  
00001BF6                          1086  ADDED_GETLONG
00001BF6  2C19                    1087                      MOVE.L  (A1)+,D6
00001BF8  6000 0008               1088                      BRA     ADD_CHECKLENGTH
00001BFC                          1089  ADDED_GETWORD
00001BFC  3C19                    1090                      MOVE.W  (A1)+,D6
00001BFE  6000 0002               1091                      BRA     ADD_CHECKLENGTH
00001C02                          1092  
00001C02  48E7 FF00               1093  ADD_CHECKLENGTH     MOVEM.L D0-D7,-(SP)
00001C06  2009                    1094                      MOVE.L  A1,D0
00001C08  2239 00010000           1095                      MOVE.L  LINESTARTLOC,D1
00001C0E  9081                    1096                      SUB.L   D1,D0                   *D0 now has the length of the instruction in bytes
00001C10  C0FC 0008               1097                      MULU    #8,D0                   *Now D0 has the number of bits
00001C14  0280 000000FF           1098                      ANDI.L  #$000000FF,D0
00001C1A  1439 00005230           1099                      MOVE.B  (LINELENGTH),D2         *D2 has line length in bits
00001C20  B400                    1100                      CMP.B   D0,D2
00001C22  6600 02B0               1101                      BNE     ADD_DECODE_ERR
00001C26  4CDF 00FF               1102                      MOVEM.L (SP)+,D0-D7
00001C2A  6000 0002               1103                      BRA     ADD_VERIFIED
00001C2E                          1104  
00001C2E                          1105  
00001C2E                          1106                                                      *we need two different ways to handle the printing
00001C2E                          1107                                                      *for each scenarios Dn + <ea> -> Dn
00001C2E                          1108                                                      *and for <ea> + Dn -> <ea>
00001C2E                          1109  
00001C2E                          1110  ADD_VERIFIED
00001C2E  B43C 0000               1111                      CMP.B   #%0,D2
00001C32  6700 0006               1112                      BEQ     ADD_DECODE_PRINT        *deployed when Dn + <ea> -> Dn, Uses the print method from MOVE
00001C36  6600 006C               1113                      BNE     ADD_DECODE_PRINT_2      *deployed when <ea> + Dn -> <ea>
00001C3A                          1114  
00001C3A                          1115                                                      *prints add when Dn + <ea>->dn
00001C3A                          1116  
00001C3A  41F9 00005188           1117  ADD_DECODE_PRINT    LEA     ADDSTRING,A0
00001C40  4EB9 00004428           1118                      JSR     PRINT_SR
00001C46  6000 0002               1119                      BRA     PRINT_SIZE
00001C4A                          1120  
00001C4A  B03C 0000               1121  PRINT_SIZE          CMP.B   #%00,D0                 *Print size
00001C4E  6700 0012               1122                      BEQ     SIZE_B
00001C52  B03C 0001               1123                      CMP.B   #%01,D0
00001C56  6700 0020               1124                      BEQ     SIZE_W
00001C5A  B03C 0002               1125                      CMP.B   #%10,D0
00001C5E  6700 002E               1126                      BEQ     SIZE_L
00001C62                          1127  
00001C62  41F9 000051F6           1128  SIZE_B              LEA     BYTESTRING,A0           *size is byte
00001C68  4EB9 00004428           1129                      JSR     PRINT_SR
00001C6E  4EB9 0000434E           1130                      JSR     SHIFTCURSOR
00001C74  6000 12A8               1131                      BRA     MOVEAS
00001C78  41F9 000051F9           1132  SIZE_W              LEA     WORDSTRING,A0           *size is word
00001C7E  4EB9 00004428           1133                      JSR     PRINT_SR
00001C84  4EB9 0000434E           1134                      JSR     SHIFTCURSOR
00001C8A  6000 1292               1135                      BRA     MOVEAS
00001C8E  41F9 000051FC           1136  SIZE_L              LEA     LONGSTRING,A0           *size is long
00001C94  4EB9 00004428           1137                      JSR     PRINT_SR
00001C9A  4EB9 0000434E           1138                      JSR     SHIFTCURSOR
00001CA0  6000 127C               1139                      BRA     MOVEAS
00001CA4                          1140  
00001CA4                          1141  
00001CA4                          1142  ADD_DECODE_PRINT_2                                  *prints add when <ea> + Dn -><ea>
00001CA4  41F9 00005188           1143                      LEA     ADDSTRING,A0
00001CAA  4EB9 00004428           1144                      JSR     PRINT_SR
00001CB0  6000 0002               1145                      BRA     PRINT_SIZE_2
00001CB4                          1146  
00001CB4  B03C 0000               1147  PRINT_SIZE_2        CMP.B   #%00,D0                 *Print size
00001CB8  6700 0012               1148                      BEQ     SIZE_B_2
00001CBC  B03C 0001               1149                      CMP.B   #%01,D0
00001CC0  6700 0020               1150                      BEQ     SIZE_W_2
00001CC4  B03C 0002               1151                      CMP.B   #%10,D0
00001CC8  6700 002E               1152                      BEQ     SIZE_L_2
00001CCC                          1153  
00001CCC  41F9 000051F6           1154  SIZE_B_2            LEA     BYTESTRING,A0           *size is byte
00001CD2  4EB9 00004428           1155                      JSR     PRINT_SR
00001CD8  4EB9 0000434E           1156                      JSR     SHIFTCURSOR
00001CDE  6000 002E               1157                      BRA     PRINT_ADD_2
00001CE2  41F9 000051F9           1158  SIZE_W_2            LEA     WORDSTRING,A0           *size is word
00001CE8  4EB9 00004428           1159                      JSR     PRINT_SR
00001CEE  4EB9 0000434E           1160                      JSR     SHIFTCURSOR
00001CF4  6000 0018               1161                      BRA     PRINT_ADD_2
00001CF8  41F9 000051FC           1162  SIZE_L_2            LEA     LONGSTRING,A0           *size is long
00001CFE  4EB9 00004428           1163                      JSR     PRINT_SR
00001D04  4EB9 0000434E           1164                      JSR     SHIFTCURSOR
00001D0A  6000 0002               1165                      BRA     PRINT_ADD_2
00001D0E                          1166  
00001D0E                          1167  
00001D0E                          1168  PRINT_ADD_2                                          *prints the remaining part
00001D0E  B63C 0002               1169                      CMP.B   #%010,D3
00001D12  6700 001A               1170                      BEQ     ADD_MODE_010
00001D16  B63C 0003               1171                      CMP.B   #%011,D3
00001D1A  6700 0062               1172                      BEQ     ADD_MODE_011
00001D1E  B63C 0007               1173                      CMP.B   #%111,D3
00001D22  6700 00B6               1174                      BEQ     ADD_MODE_111
00001D26  B63C 0004               1175                      CMP.B   #%100,D3
00001D2A  6700 00F8               1176                      BEQ     ADD_MODE_100
00001D2E                          1177  
00001D2E                          1178                                                      *<ea> + Dn -> <ea>, prints when <ea> is (An)
00001D2E                          1179  ADD_MODE_010
00001D2E  41F9 0000520F           1180                      LEA     DSTRING,A0
00001D34  4EB9 00004428           1181                      JSR     PRINT_SR
00001D3A  2E01                    1182                      MOVE.L  D1,D7
00001D3C  4EB9 0000443A           1183                      JSR     PRINT_HEX
00001D42  41F9 000051FF           1184                      LEA     COMMASTRING,A0
00001D48  4EB9 00004428           1185                      JSR     PRINT_SR
00001D4E  41F9 00005211           1186                      LEA     LPARENSTRING,A0
00001D54  4EB9 00004428           1187                      JSR     PRINT_SR
00001D5A  41F9 0000520D           1188                      LEA     ASTRING,A0
00001D60  4EB9 00004428           1189                      JSR     PRINT_SR
00001D66  2E04                    1190                      MOVE.L  D4,D7
00001D68  4EB9 0000443A           1191                      JSR     PRINT_HEX
00001D6E  41F9 00005213           1192                      LEA     RPARENSTRING,A0
00001D74  4EB9 00004428           1193                      JSR     PRINT_SR
00001D7A  6000 0160               1194                      BRA     ADD_DECODE_DONE
00001D7E                          1195  
00001D7E                          1196                                                      *<ea> + Dn -> <ea>, prints when <ea> is (An)+
00001D7E                          1197  ADD_MODE_011
00001D7E  41F9 0000520F           1198                      LEA     DSTRING,A0
00001D84  4EB9 00004428           1199                      JSR     PRINT_SR
00001D8A  2E01                    1200                      MOVE.L  D1,D7
00001D8C  4EB9 0000443A           1201                      JSR     PRINT_HEX
00001D92  41F9 000051FF           1202                      LEA     COMMASTRING,A0
00001D98  4EB9 00004428           1203                      JSR     PRINT_SR
00001D9E  41F9 00005211           1204                      LEA     LPARENSTRING,A0
00001DA4  4EB9 00004428           1205                      JSR     PRINT_SR
00001DAA  41F9 0000520D           1206                      LEA     ASTRING,A0
00001DB0  4EB9 00004428           1207                      JSR     PRINT_SR
00001DB6  2E04                    1208                      MOVE.L  D4,D7
00001DB8  4EB9 0000443A           1209                      JSR     PRINT_HEX
00001DBE  41F9 00005213           1210                      LEA     RPARENSTRING,A0
00001DC4  4EB9 00004428           1211                      JSR     PRINT_SR
00001DCA  41F9 00005215           1212                      LEA     PLUSSTRING,A0
00001DD0  4EB9 00004428           1213                      JSR     PRINT_SR
00001DD6  6000 0104               1214                      BRA     ADD_DECODE_DONE
00001DDA                          1215                                                      *<ea> + Dn -> <ea>, prints when <ea> is absolute value
00001DDA                          1216  ADD_MODE_111
00001DDA  41F9 0000520F           1217                      LEA     DSTRING,A0
00001DE0  4EB9 00004428           1218                      JSR     PRINT_SR
00001DE6  2E01                    1219                      MOVE.L  D1,D7
00001DE8  4EB9 0000443A           1220                      JSR     PRINT_HEX
00001DEE  41F9 000051FF           1221                      LEA     COMMASTRING,A0
00001DF4  4EB9 00004428           1222                      JSR     PRINT_SR
00001DFA  41F9 00005209           1223                      LEA     DOLLARSTRING,A0
00001E00  4EB9 00004428           1224                      JSR     PRINT_SR
00001E06  4287                    1225                      CLR.L   D7
00001E08  2E05                    1226                      MOVE.L  D5,D7
00001E0A  4EB9 0000443A           1227                      JSR     PRINT_HEX
00001E10  6000 00CA               1228                      BRA     ADD_DECODE_DONE
00001E14  B23C 0000               1229                      CMP.B   #%000,D1
00001E18  6700 13E2               1230                      BEQ     MOVED111W
00001E1C  B23C 0001               1231                      CMP.B   #%001,D1
00001E20  6700 13E0               1232                      BEQ     MOVED111L
00001E24                          1233  
00001E24                          1234                                                      *<ea> + Dn -> <ea>, prints when <ea> is -(An)
00001E24                          1235  ADD_MODE_100
00001E24  41F9 0000520F           1236                      LEA     DSTRING,A0
00001E2A  4EB9 00004428           1237                      JSR     PRINT_SR
00001E30  2E01                    1238                      MOVE.L  D1,D7
00001E32  4EB9 0000443A           1239                      JSR     PRINT_HEX
00001E38  41F9 000051FF           1240                      LEA     COMMASTRING,A0
00001E3E  4EB9 00004428           1241                      JSR     PRINT_SR
00001E44  41F9 00005217           1242                      LEA     MINUSSTRING,A0
00001E4A  4EB9 00004428           1243                      JSR     PRINT_SR
00001E50  41F9 00005211           1244                      LEA     LPARENSTRING,A0
00001E56  4EB9 00004428           1245                      JSR     PRINT_SR
00001E5C  41F9 0000520D           1246                      LEA     ASTRING,A0
00001E62  4EB9 00004428           1247                      JSR     PRINT_SR
00001E68  2E04                    1248                      MOVE.L  D4,D7
00001E6A  4EB9 0000443A           1249                      JSR     PRINT_HEX
00001E70  41F9 00005213           1250                      LEA     RPARENSTRING,A0
00001E76  4EB9 00004428           1251                      JSR     PRINT_SR
00001E7C  6000 005E               1252                      BRA     ADD_DECODE_DONE
00001E80                          1253  
00001E80                          1254  
00001E80                          1255  
00001E80  B03C 0000               1256  CHECK_SIZE_4_AR     CMP.B   #%00,D0                 *The size is byte, invalid size
00001E84  6600 FCDC               1257                      BNE     ADD_MODE_VALIDATE       *The size is not byte
00001E88  6700 004A               1258                      BEQ     ADD_DECODE_ERR          *ERROR
00001E8C                          1259  
00001E8C                          1260  
00001E8C                          1261  
00001E8C                          1262  ADD_DN_SOURCE                                       *check mode for Dn is source
00001E8C                          1263  
00001E8C  B63C 0000               1264                      CMP.B   #%000,D3
00001E90  6700 0042               1265                      BEQ     ADD_DECODE_ERR
00001E94  B63C 0001               1266                      CMP.B   #%001,D3
00001E98  6700 003A               1267                      BEQ     ADD_DECODE_ERR
00001E9C  B63C 0007               1268                      CMP.B   #%111,D3
00001EA0  6700 0026               1269                      BEQ     CHECK_REG               *Check register to tell if this is valid or not
00001EA4  B63C 0002               1270                      CMP.B   #%010,D3
00001EA8  6700 FCB8               1271                      BEQ     ADD_MODE_VALIDATE       *Check if the absolute value is short or long
00001EAC  B63C 0003               1272                      CMP.B   #%011,D3
00001EB0  6700 FCB0               1273                      BEQ     ADD_MODE_VALIDATE
00001EB4  B63C 0004               1274                      CMP.B   #%100,D3
00001EB8  6700 FCA8               1275                      BEQ     ADD_MODE_VALIDATE
00001EBC  B63C 0003               1276                      CMP.B   #%011,D3
00001EC0  6700 FCA0               1277                      BEQ     ADD_MODE_VALIDATE
00001EC4  6000 000E               1278                      BRA     ADD_DECODE_ERR
00001EC8                          1279                                                      *check register for Dn is desination
00001EC8                          1280  
00001EC8  B83C 0004               1281  CHECK_REG           CMP.B   #%100,D4
00001ECC  6700 0006               1282                      BEQ     ADD_DECODE_ERR
00001ED0  6600 FC90               1283                      BNE     ADD_MODE_VALIDATE
00001ED4                          1284  
00001ED4                          1285  
00001ED4                          1286  
00001ED4  4EB9 000042B4           1287  ADD_DECODE_ERR      JSR     PRINTLINE_SR
00001EDA  4E75                    1288                      RTS
00001EDC                          1289  
00001EDC                          1290  
00001EDC  41F9 0000513A           1291  ADD_DECODE_DONE     LEA     LINEEND,A0
00001EE2  4EB9 00004428           1292                      JSR     PRINT_SR
00001EE8  4E75                    1293                      RTS
00001EEA                          1294                                                      *~Font name~Courier New~
00001EEA                          1295                                                      *~Font size~10~
00001EEA                          1296                                                      *~Tab type~1~
00001EEA                          1297                                                      *~Tab size~4~
00001EEA                          1298  
00001EEA                          1299  
00001EEA                          1300  
00001EEA                          1301  
00001EEA                          1302  
00001EEA                          1303  -------------------- end include --------------------
00001EEA                          1304  ADDIDECODE_SR           INCLUDE     "ADDI_DECODE.X68"
00001EEA                          1305                                                              *Decode ADD instruction
00001EEA                          1306                                                              *D0 will be size
00001EEA                          1307                                                              *D3 will be mode
00001EEA                          1308                                                              *D4 will be register
00001EEA                          1309                                                              *D5 is immediate/source address
00001EEA                          1310                                                             
00001EEA  4280                    1311                          CLR.L       D0
00001EEC  4281                    1312                          CLR.L       D1
00001EEE  4282                    1313                          CLR.L       D2
00001EF0  4283                    1314                          CLR.L       D3
00001EF2  4284                    1315                          CLR.L       D4
00001EF4  4285                    1316                          CLR.L       D5
00001EF6  4286                    1317                          CLR.L       D6
00001EF8  4287                    1318                          CLR.L       D7
00001EFA  43F9 00010000           1319                          LEA         LINESTARTLOC,A1
00001F00                          1320  
00001F00                          1321                                                              *store the size on D0
00001F00  1E19                    1322                          MOVE.B      (A1)+,D7
00001F02  1011                    1323                          MOVE.B      (A1),D0
00001F04  EC08                    1324                          LSR.B       #6,D0
00001F06  0200 0003               1325                          ANDI.B      #%00000011,D0           *we have the size on D0
00001F0A  1E21                    1326                          MOVE.B      -(A1),D7                *bring th pointer back
00001F0C                          1327                          
00001F0C                          1328  
00001F0C                          1329  
00001F0C  3611                    1330                          MOVE.W      (A1),D3
00001F0E  0243 0038               1331                          ANDI.W      #%0000000000111000,D3   *we only care about the three bits
00001F12  E60B                    1332                          LSR.B       #3,D3
00001F14                          1333  
00001F14  1E19                    1334                          MOVE.B      (A1)+,D7
00001F16  1819                    1335                          MOVE.B      (A1)+,D4                *register
00001F18  0204 0007               1336                          ANDI.B      #%00000111,D4           *We only care about the last beat
00001F1C                          1337                          
00001F1C                          1338                          
00001F1C                          1339  
00001F1C  4247                    1340                          CLR         D7
00001F1E                          1341  
00001F1E                          1342  ADDI_VALIDITY                                                 * Lets check the mode
00001F1E  B63C 0000               1343                          CMP.B       #%000,D3
00001F22  6700 003A               1344                          BEQ         ADDI_MODE_VALID
00001F26  B63C 0002               1345                          CMP.B       #%010,D3
00001F2A  6700 0032               1346                          BEQ         ADDI_MODE_VALID
00001F2E  B63C 0003               1347                          CMP.B       #%011,D3
00001F32  6700 002A               1348                          BEQ         ADDI_MODE_VALID
00001F36  B63C 0004               1349                          CMP.B       #%100,D3
00001F3A  6700 0022               1350                          BEQ         ADDI_MODE_VALID
00001F3E  B63C 0007               1351                          CMP.B       #%111,D3
00001F42  6700 0006               1352                          BEQ         CHECK_REGISTER            *Check for register
00001F46  6600 0016               1353                          BNE         ADDI_MODE_VALID
00001F4A                          1354                          
00001F4A                          1355  CHECK_REGISTER                                                *At this point the mode is 111, 
00001F4A                          1356                                                                *need to check if it is immediate
00001F4A  B83C 0000               1357                          CMP.B       #%000,D4
00001F4E  6700 000E               1358                          BEQ         ADDI_MODE_VALID
00001F52  B83C 0001               1359                          CMP.B       #%001,D4
00001F56  6700 0006               1360                          BEQ         ADDI_MODE_VALID
00001F5A  6000 02B0               1361                          BRA         ADDI_DECODE_ERR           *If reach here, there is a problem
00001F5E                          1362                          
00001F5E                          1363                          
00001F5E                          1364  ADDI_MODE_VALID                                               *lets check the size
00001F5E  B03C 0000               1365                          CMP.B       #%00,D0                 
00001F62  6700 0016               1366                          BEQ         CHECK_B_VALUE 
00001F66  B03C 0001               1367                          CMP.B       #%01,D0                 
00001F6A  6700 0024               1368                          BEQ         CHECK_W_VALUE 
00001F6E  B03C 0002               1369                          CMP.B       #%10,D0                 
00001F72  6700 0034               1370                          BEQ         CHECK_L_VALUE 
00001F76  6000 0294               1371                          BRA         ADDI_DECODE_ERR
00001F7A                          1372                          
00001F7A                          1373  CHECK_B_VALUE                                                   *Lets check he byte value
00001F7A                          1374                                                                  *If the value is greater than 255,
00001F7A                          1375                                                                  *it will send error value
00001F7A  3E11                    1376                          MOVE.W      (A1),D7
00001F7C  0C47 00FF               1377                          CMPI.W      #255,D7
00001F80  6200 028A               1378                          BHI         ADDI_DECODE_ERR
00001F84  0C47 0000               1379                          CMPI.W      #0,D7
00001F88  6500 0282               1380                          BLO         ADDI_DECODE_ERR
00001F8C  6000 0036               1381                          BRA         ADDI_SIZE_VALID
00001F90                          1382                          
00001F90                          1383  
00001F90                          1384  CHECK_W_VALUE 
00001F90                          1385                                                                  *Lets check he byte value
00001F90                          1386                                                                  *If the value is greater than 65535,
00001F90                          1387                                                                  *it will send error value
00001F90  3E11                    1388                          MOVE.W      (A1),D7
00001F92  0C47 FFFF               1389                          CMPI.W      #65535,D7
00001F96  6200 0274               1390                          BHI         ADDI_DECODE_ERR
00001F9A  0C47 0000               1391                          CMPI.W      #0,D7
00001F9E  6500 026C               1392                          BLO         ADDI_DECODE_ERR
00001FA2  6000 0020               1393                          BRA         ADDI_SIZE_VALID
00001FA6  4247                    1394                          CLR         D7
00001FA8                          1395                          
00001FA8                          1396  
00001FA8                          1397  CHECK_L_VALUE                                                   *Lets check he byte value
00001FA8                          1398                                                                  *If the value is greater than 65535,
00001FA8                          1399                                                                  *it will send error value
00001FA8  2E11                    1400                          MOVE.L      (A1),D7
00001FAA  0C87 FFFFFFFF           1401                          CMPI.L      #4294967295,D7
00001FB0  6200 025A               1402                          BHI         ADDI_DECODE_ERR
00001FB4  0C87 00000000           1403                          CMPI.L      #0,D7
00001FBA  6500 0250               1404                          BLO         ADDI_DECODE_ERR
00001FBE  6000 0004               1405                          BRA         ADDI_SIZE_VALID
00001FC2  4247                    1406                          CLR         D7
00001FC4                          1407                          
00001FC4                          1408                          
00001FC4                          1409                          
00001FC4                          1410  ADDI_SIZE_VALID                                                 *IF WE GET HERE, WE EVERYTHING IS FINE
00001FC4                          1411                                                                  *this is where we figure out how much we add
00001FC4  B03C 0000               1412                          CMP.B       #%00,D0
00001FC8  6700 0014               1413                          BEQ         ADDI_BYTE
00001FCC  B03C 0001               1414                          CMP.B       #%01,D0
00001FD0  6700 0014               1415                          BEQ         ADDI_WORD
00001FD4  B03C 0002               1416                          CMP.B       #%10,D0
00001FD8  6700 0012               1417                          BEQ         ADDI_LONG
00001FDC  4247                    1418                          CLR         D7
00001FDE                          1419                          
00001FDE                          1420                          
00001FDE                          1421  ADDI_BYTE                       
00001FDE  1E19                    1422                          MOVE.B      (A1)+,D7                    *Skip to the needed byte
00001FE0  1A19                    1423                          MOVE.B      (A1)+,D5                    *D5 store the byte data
00001FE2  6000 000E               1424                          BRA         ADDI_PRINT
00001FE6                          1425                                      
00001FE6                          1426  
00001FE6                          1427  ADDI_WORD               
00001FE6  3A19                    1428                          MOVE.W      (A1)+,D5                    *D5 Store the word data
00001FE8  6000 0008               1429                          BRA         ADDI_PRINT
00001FEC                          1430  
00001FEC                          1431  ADDI_LONG
00001FEC  2A19                    1432                          MOVE.L      (A1)+,D5                    *D5 Store the long data
00001FEE  6000 0002               1433                          BRA         ADDI_PRINT
00001FF2                          1434                          
00001FF2                          1435                          
00001FF2  41F9 00005191           1436  ADDI_PRINT              LEA         ADDISTRING,A0
00001FF8  4EB9 00004428           1437                          JSR         PRINT_SR
00001FFE  6000 0002               1438                          BRA         PRINT_ADDI_SIZE
00002002                          1439  
00002002                          1440  PRINT_ADDI_SIZE                                                 *PRINT SIZE
00002002  B03C 0000               1441                          CMP.B       #%00,D0
00002006  6700 0012               1442                          BEQ         SIZE_ADDI_B     
0000200A  B03C 0001               1443                          CMP.B       #%01,D0
0000200E  6700 0020               1444                          BEQ         SIZE_ADDI_W
00002012  B03C 0002               1445                          CMP.B       #%10,D0
00002016  6700 002E               1446                          BEQ         SIZE_ADDI_L         
0000201A                          1447                         
0000201A                          1448  SIZE_ADDI_B   
0000201A  41F9 000051F6           1449                          LEA         BYTESTRING,A0               *size is byte
00002020  4EB9 00004428           1450                          JSR         PRINT_SR
00002026  4EB9 0000434E           1451                          JSR         SHIFTCURSOR
0000202C  6000 002E               1452                          BRA         PRINT_I_VALUE               *BRANCH TO IMMEDIATE PRINT
00002030                          1453                          
00002030                          1454    
00002030                          1455  SIZE_ADDI_W  
00002030  41F9 000051F9           1456                          LEA         WORDSTRING,A0               *size is WORD
00002036  4EB9 00004428           1457                          JSR         PRINT_SR
0000203C  4EB9 0000434E           1458                          JSR         SHIFTCURSOR
00002042  6000 0018               1459                          BRA         PRINT_I_VALUE               *BRANCH TO IMMEDIATE PRINT
00002046                          1460                          
00002046                          1461  SIZE_ADDI_L  
00002046                          1462  
00002046  41F9 000051FC           1463                          LEA         LONGSTRING,A0               *size is LONG
0000204C  4EB9 00004428           1464                          JSR         PRINT_SR
00002052  4EB9 0000434E           1465                          JSR         SHIFTCURSOR
00002058  6000 0002               1466                          BRA         PRINT_I_VALUE               *BRANCH TO IMMEDIATE PRINT
0000205C                          1467                          
0000205C                          1468  
0000205C                          1469  PRINT_I_VALUE                                                   *THIS PRINTS THE IMMEDIATE VALUE
0000205C                          1470                          
0000205C  41F9 00005207           1471                          LEA         POUNDSTRING,A0
00002062  4EB9 00004428           1472                          JSR         PRINT_SR
00002068  41F9 00005209           1473                          LEA         DOLLARSTRING,A0
0000206E  4EB9 00004428           1474                          JSR         PRINT_SR
00002074  4287                    1475                          CLR.L       D7
00002076  B03C 0000               1476                          CMP.B       #%00,D0
0000207A  6700 0012               1477                          BEQ         BYTE_IMM
0000207E  B03C 0001               1478                          CMP.B       #%01,D0
00002082  6700 000A               1479                          BEQ         WORD_IMM
00002086  B03C 0002               1480                          CMP.B       #%10,D0
0000208A  6700 0008               1481                          BEQ         LONG_IMM
0000208E                          1482                          
0000208E                          1483  BYTE_IMM                                                        *Prints the byte
0000208E                          1484                          
0000208E                          1485  
0000208E                          1486  WORD_IMM                                                        *HANDLES WORD
0000208E  3E05                    1487                          MOVE.W      D5,D7                        
00002090  6000 0008               1488                          BRA         PRINT_IMM_CONT
00002094                          1489  
00002094  2E05                    1490  LONG_IMM                MOVE.L      D5,D7                       *HANDLES LONG
00002096  6000 0002               1491                          BRA         PRINT_IMM_CONT
0000209A                          1492                          
0000209A  4EB9 0000443A           1493  PRINT_IMM_CONT          JSR         PRINT_HEX
000020A0  6000 0002               1494                          BRA         ADDI_DEST_PRT       
000020A4                          1495  
000020A4                          1496  ADDI_DEST_PRT                                                   *now prints the destination
000020A4  B63C 0000               1497                          CMP.B       #%000,D3
000020A8  6700 0022               1498                          BEQ         ADDI_000
000020AC  B63C 0002               1499                          CMP.B       #%010,D3
000020B0  6700 003E               1500                          BEQ         ADDI_010
000020B4  B63C 0003               1501                          CMP.B       #%011,D3
000020B8  6700 0072               1502                          BEQ         ADDI_011
000020BC  B63C 0004               1503                          CMP.B       #%100,D3
000020C0  6700 00B2               1504                          BEQ         ADDI_100
000020C4  B63C 0007               1505                          CMP.B       #%111,D3
000020C8  6700 00F2               1506                          BEQ         ADDI_111
000020CC                          1507                          
000020CC                          1508                          
000020CC                          1509                          
000020CC                          1510  ADDI_000                                                        *Destination is data register
000020CC  41F9 000051FF           1511                          LEA         COMMASTRING,A0
000020D2  4EB9 00004428           1512                          JSR         PRINT_SR
000020D8  41F9 0000520F           1513                          LEA         DSTRING,A0
000020DE  4EB9 00004428           1514                          JSR         PRINT_SR
000020E4  2E04                    1515                          MOVE.L      D4,D7
000020E6  4EB9 0000443A           1516                          JSR         PRINT_HEX
000020EC  6000 0126               1517                          BRA         ADDI_DECODE_DONE
000020F0                          1518                 
000020F0                          1519  ADDI_010                                                        *Destination is address register indirect
000020F0  41F9 000051FF           1520                          LEA         COMMASTRING,A0
000020F6  4EB9 00004428           1521                          JSR         PRINT_SR
000020FC  41F9 00005211           1522                          LEA         LPARENSTRING,A0
00002102  4EB9 00004428           1523                          JSR         PRINT_SR
00002108  41F9 0000520D           1524                          LEA         ASTRING,A0
0000210E  4EB9 00004428           1525                          JSR         PRINT_SR
00002114  2E04                    1526                          MOVE.L      D4,D7
00002116  4EB9 0000443A           1527                          JSR         PRINT_HEX
0000211C  41F9 00005213           1528                          LEA         RPARENSTRING,A0
00002122  4EB9 00004428           1529                          JSR         PRINT_SR
00002128  6000 00EA               1530                          BRA         ADDI_DECODE_DONE
0000212C                          1531                          
0000212C                          1532                          
0000212C                          1533  ADDI_011                                                         *Address register indirect postincrement
0000212C  41F9 000051FF           1534                          LEA         COMMASTRING,A0
00002132  4EB9 00004428           1535                          JSR         PRINT_SR
00002138  41F9 00005211           1536                          LEA         LPARENSTRING,A0
0000213E  4EB9 00004428           1537                          JSR         PRINT_SR
00002144  41F9 0000520D           1538                          LEA         ASTRING,A0
0000214A  4EB9 00004428           1539                          JSR         PRINT_SR
00002150  2E04                    1540                          MOVE.L      D4,D7
00002152  4EB9 0000443A           1541                          JSR         PRINT_HEX
00002158  41F9 00005213           1542                          LEA         RPARENSTRING,A0
0000215E  4EB9 00004428           1543                          JSR         PRINT_SR
00002164  41F9 00005215           1544                          LEA         PLUSSTRING,A0
0000216A  4EB9 00004428           1545                          JSR         PRINT_SR
00002170  6000 00A2               1546                          BRA         ADDI_DECODE_DONE
00002174                          1547                          
00002174                          1548  ADDI_100                                                        *Destination pre_decrement
00002174  41F9 000051FF           1549                          LEA         COMMASTRING,A0
0000217A  4EB9 00004428           1550                          JSR         PRINT_SR
00002180  41F9 00005217           1551                          LEA         MINUSSTRING,A0
00002186  4EB9 00004428           1552                          JSR         PRINT_SR
0000218C  41F9 00005211           1553                          LEA         LPARENSTRING,A0
00002192  4EB9 00004428           1554                          JSR         PRINT_SR
00002198  41F9 0000520D           1555                          LEA         ASTRING,A0
0000219E  4EB9 00004428           1556                          JSR         PRINT_SR
000021A4  2E04                    1557                          MOVE.L      D4,D7
000021A6  4EB9 0000443A           1558                          JSR         PRINT_HEX
000021AC  41F9 00005213           1559                          LEA         RPARENSTRING,A0
000021B2  4EB9 00004428           1560                          JSR         PRINT_SR
000021B8  6000 005A               1561                          BRA         ADDI_DECODE_DONE
000021BC                          1562  
000021BC                          1563  ADDI_111                                                        *Destination absolute value
000021BC  41F9 000051FF           1564                          LEA         COMMASTRING,A0
000021C2  4EB9 00004428           1565                          JSR         PRINT_SR
000021C8  B83C 0000               1566                          CMP.B       #%000,D4
000021CC  6700 000A               1567                          BEQ         ADDI_111000
000021D0  B83C 0001               1568                          CMP.B       #%001,D4
000021D4  6700 001C               1569                          BEQ         ADDI_111001
000021D8                          1570                          
000021D8                          1571  ADDI_111000            
000021D8                          1572                          
000021D8  41F9 00005209           1573                          LEA         DOLLARSTRING,A0             *IS WORD
000021DE  4EB9 00004428           1574                          JSR         PRINT_SR
000021E4  4247                    1575                          CLR         D7
000021E6  3E11                    1576                          MOVE.W      (A1),D7
000021E8  4EB9 0000443A           1577                          JSR         PRINT_HEX
000021EE  6000 0024               1578                          BRA         ADDI_DECODE_DONE
000021F2                          1579                          
000021F2                          1580  
000021F2                          1581  ADDI_111001            
000021F2                          1582                                                                  *Is long address
000021F2  41F9 00005209           1583                          LEA         DOLLARSTRING,A0
000021F8  4EB9 00004428           1584                          JSR         PRINT_SR
000021FE  4287                    1585                          CLR.L       D7
00002200  2E11                    1586                          MOVE.L      (A1),D7
00002202  4EB9 0000443A           1587                          JSR         PRINT_HEX
00002208  6000 F878               1588                          BRA         ADDA_DECODE_DONE
0000220C                          1589                   
0000220C                          1590                          
0000220C                          1591                                           
0000220C                          1592  
0000220C  4EB9 000042B4           1593  ADDI_DECODE_ERR         JSR         PRINTLINE_SR               *Something went wrong
00002212  4E75                    1594                          RTS
00002214                          1595                          
00002214                          1596                          
00002214  41F9 0000513A           1597  ADDI_DECODE_DONE        LEA         LINEEND,A0
0000221A  4EB9 00004428           1598                          JSR         PRINT_SR
00002220  4E75                    1599                          RTS     
00002222                          1600                          
00002222                          1601                          
00002222                          1602     
00002222                          1603  
00002222                          1604  
00002222                          1605  -------------------- end include --------------------
00002222                          1606  ADDQ_SR                 INCLUDE     "ADDQdecode.X68"
00002222                          1607                                                              *Decode ADD instruction
00002222                          1608                                                              *D0 will be size
00002222                          1609                                                              *D2 holds data
00002222                          1610                                                              *D3 will be mode
00002222                          1611                                                              *D4 will be register
00002222                          1612                                                              *D5 is immediate/source address
00002222                          1613                                                             
00002222  4280                    1614                          CLR.L       D0
00002224  4281                    1615                          CLR.L       D1
00002226  4282                    1616                          CLR.L       D2
00002228  4283                    1617                          CLR.L       D3
0000222A  4284                    1618                          CLR.L       D4
0000222C  4285                    1619                          CLR.L       D5
0000222E  4286                    1620                          CLR.L       D6
00002230  4287                    1621                          CLR.L       D7
00002232  43F9 00010000           1622                          LEA         LINESTARTLOC,A1
00002238                          1623  
00002238                          1624                                                              *store the size on D0
00002238  1E19                    1625                          MOVE.B      (A1)+,D7
0000223A  1011                    1626                          MOVE.B      (A1),D0
0000223C  EC08                    1627                          LSR.B       #6,D0
0000223E  0200 0003               1628                          ANDI.B      #%00000011,D0           *we have the size on D0
00002242  1E21                    1629                          MOVE.B      -(A1),D7                *bring th pointer back
00002244                          1630                          
00002244                          1631                          
00002244  1411                    1632                          MOVE.B      (A1),D2                 *D2 holds data
00002246  0202 000E               1633                          ANDI.B      #%00001110,D2
0000224A  E20A                    1634                          LSR.B       #1,D2
0000224C                          1635                          
0000224C  B43C 0000               1636                          CMP.B       #%000,D2                
00002250                          1637                          
00002250                          1638  
00002250                          1639  
00002250  3611                    1640                          MOVE.W      (A1),D3
00002252  0243 0038               1641                          ANDI.W      #%0000000000111000,D3   *we only care about the three bits
00002256  E60B                    1642                          LSR.B       #3,D3
00002258                          1643  
00002258  1E19                    1644                          MOVE.B      (A1)+,D7
0000225A  1819                    1645                          MOVE.B      (A1)+,D4                *register
0000225C  0204 0007               1646                          ANDI.B      #%00000111,D4           *We only care about the last beat
00002260                          1647                          
00002260                          1648                          
00002260                          1649  
00002260  4247                    1650                          CLR         D7
00002262                          1651  
00002262                          1652  ADDQ_VALIDITY                                               * Lets check the data first
00002262                          1653  
00002262  B43C 0000               1654                          CMP.B       #%000,D2                *THE DATA BITS IN ADDQ ARE ONLY 3 BITS
00002266  6700 0016               1655                          BEQ         IT_IS_EIGHT             *THE IMMEDIATE VALUE 000 REPRESENTS EITHT 
0000226A  B43C 0001               1656                          CMP.B       #1,D2                   *CHECK THE SIZE, THE SIZE SHOUDLD BE
0000226E  6D00 02A0               1657                          BLT         ADDQ_DECODE_ERR         *BETWEEN 1 AND 8, ITS ERROR OTHERWISE
00002272  B43C 0008               1658                          CMP.B       #8,D2
00002276  6E00 0298               1659                          BGT         ADDQ_DECODE_ERR
0000227A  6000 0008               1660                          BRA         ADDQ_DATA_VALID
0000227E                          1661  
0000227E                          1662  IT_IS_EIGHT                 
0000227E  5002                    1663                          ADDQ.B      #8,D2                  *ADD EIGHT IN THE DATA REGISTER
00002280  6000 0002               1664                          BRA         ADDQ_DATA_VALID
00002284                          1665                          
00002284                          1666  
00002284                          1667  ADDQ_DATA_VALID                                             *THE DATA IS GOOD LETS CHECK THE SIZE
00002284                          1668                          
00002284  B03C 0000               1669                          CMP.B       #%00,D0
00002288  6700 0016               1670                          BEQ         ADDQ_SIZE_VALID         
0000228C  B03C 0001               1671                          CMP.B       #%01,D0
00002290  6700 000E               1672                          BEQ         ADDQ_SIZE_VALID
00002294  B03C 0002               1673                          CMP.B       #%10,D0
00002298  6700 0006               1674                          BEQ         ADDQ_SIZE_VALID
0000229C  6000 0272               1675                          BRA         ADDQ_DECODE_ERR         * if the bits are 11, its invalid
000022A0                          1676                                    
000022A0                          1677  
000022A0                          1678  ADDQ_SIZE_VALID                                             *THE SIZE IS GOOD LETS CHECK THE MODE
000022A0                          1679               
000022A0  B63C 0000               1680                          CMP.B       #%000,D3
000022A4  6700 004E               1681                          BEQ         ADDQ_MODE_VALID
000022A8  B63C 0001               1682                          CMP.B       #%001,D3
000022AC  6700 0026               1683                          BEQ         CHECKQ_SIZE
000022B0  B63C 0002               1684                          CMP.B       #%010,D3
000022B4  6700 003E               1685                          BEQ         ADDQ_MODE_VALID
000022B8  B63C 0003               1686                          CMP.B       #%011,D3
000022BC  6700 0036               1687                          BEQ         ADDQ_MODE_VALID
000022C0  B63C 0004               1688                          CMP.B       #%100,D3
000022C4  6700 002E               1689                          BEQ         ADDQ_MODE_VALID
000022C8  B63C 0007               1690                          CMP.B       #%111,D3
000022CC  6700 0012               1691                          BEQ         CHECKQ_REGISTER         *Check for register
000022D0  6600 0022               1692                          BNE         ADDQ_MODE_VALID
000022D4                          1693                          
000022D4                          1694                          
000022D4                          1695  CHECKQ_SIZE             
000022D4  B03C 0000               1696                          CMP.B       #%00,D0                 *IF THE SIZE IS BYTE, THE DESTINATION CANT BE AR
000022D8  6700 0236               1697                          BEQ         ADDQ_DECODE_ERR
000022DC  6000 0016               1698                          BRA         ADDQ_MODE_VALID       
000022E0                          1699                          
000022E0                          1700  CHECKQ_REGISTER                                             *At this point the mode is 111, 
000022E0                          1701                                                              *need to check if it is immediate
000022E0  B83C 0000               1702                          CMP.B       #%000,D4
000022E4  6700 000E               1703                          BEQ         ADDQ_MODE_VALID
000022E8  B83C 0001               1704                          CMP.B       #%001,D4
000022EC  6700 0006               1705                          BEQ         ADDQ_MODE_VALID
000022F0  6000 021E               1706                          BRA         ADDQ_DECODE_ERR           *If reach here, there is a problem
000022F4                          1707                          
000022F4                          1708                          
000022F4                          1709  ADDQ_MODE_VALID                                              
000022F4  6000 0002               1710                          BRA         ADDQ_PRINT                         
000022F8                          1711                          
000022F8                          1712  
000022F8                          1713                          
000022F8                          1714                          
000022F8  41F9 00005196           1715  ADDQ_PRINT              LEA         ADDQSTRING,A0
000022FE  4EB9 00004428           1716                          JSR         PRINT_SR
00002304  6000 0002               1717                          BRA         PRINT_ADDQ_SIZE
00002308                          1718  
00002308                          1719  PRINT_ADDQ_SIZE                                                 *PRINT SIZE
00002308  B03C 0000               1720                          CMP.B       #%00,D0
0000230C  6700 0012               1721                          BEQ         SIZE_ADDQ_B     
00002310  B03C 0001               1722                          CMP.B       #%01,D0
00002314  6700 0020               1723                          BEQ         SIZE_ADDQ_W
00002318  B03C 0002               1724                          CMP.B       #%10,D0
0000231C  6700 002E               1725                          BEQ         SIZE_ADDQ_L         
00002320                          1726                         
00002320                          1727  SIZE_ADDQ_B   
00002320  41F9 000051F6           1728                          LEA         BYTESTRING,A0               *size is byte
00002326  4EB9 00004428           1729                          JSR         PRINT_SR
0000232C  4EB9 0000434E           1730                          JSR         SHIFTCURSOR
00002332  6000 002E               1731                          BRA         PRINT_Q_VALUE               *BRANCH TO IMMEDIATE PRINT
00002336                          1732                          
00002336                          1733    
00002336                          1734  SIZE_ADDQ_W  
00002336  41F9 000051F9           1735                          LEA         WORDSTRING,A0               *size is WORD
0000233C  4EB9 00004428           1736                          JSR         PRINT_SR
00002342  4EB9 0000434E           1737                          JSR         SHIFTCURSOR
00002348  6000 0018               1738                          BRA         PRINT_Q_VALUE               *BRANCH TO IMMEDIATE PRINT
0000234C                          1739                          
0000234C                          1740  SIZE_ADDQ_L  
0000234C                          1741  
0000234C  41F9 000051FC           1742                          LEA         LONGSTRING,A0               *size is LONG
00002352  4EB9 00004428           1743                          JSR         PRINT_SR
00002358  4EB9 0000434E           1744                          JSR         SHIFTCURSOR
0000235E  6000 0002               1745                          BRA         PRINT_Q_VALUE               *BRANCH TO IMMEDIATE PRINT
00002362                          1746                          
00002362                          1747  
00002362                          1748  PRINT_Q_VALUE                                                   *THIS PRINTS THE Quick VALUE between (1 and 8, inclusively)
00002362                          1749                          
00002362  41F9 00005207           1750                          LEA         POUNDSTRING,A0
00002368  4EB9 00004428           1751                          JSR         PRINT_SR
0000236E  4287                    1752                          CLR.L       D7
00002370  3E02                    1753                          MOVE        D2,D7
00002372  4EB9 0000443A           1754                          JSR         PRINT_HEX
00002378  6000 0002               1755                          BRA         ADDQ_DEST_PRT
0000237C                          1756                          
0000237C                          1757  
0000237C                          1758  ADDQ_DEST_PRT                                                   *now prints the destination
0000237C  B63C 0000               1759                          CMP.B       #%000,D3                    
00002380  6700 002A               1760                          BEQ         ADDQ_000                    *destination is data register
00002384  B63C 0001               1761                          CMP.B       #%001,D3
00002388  6700 0046               1762                          BEQ         ADDQ_001                    *destination is address register direct
0000238C  B63C 0002               1763                          CMP.B       #%010,D3
00002390  6700 0062               1764                          BEQ         ADDQ_010                    *destination is address register indirect
00002394  B63C 0003               1765                          CMP.B       #%011,D3
00002398  6700 0096               1766                          BEQ         ADDQ_011                    *destination is address register post increment
0000239C  B63C 0004               1767                          CMP.B       #%100,D3
000023A0  6700 00D6               1768                          BEQ         ADDQ_100                    *destination is adrress register pre -decrement
000023A4  B63C 0007               1769                          CMP.B       #%111,D3
000023A8  6700 0116               1770                          BEQ         ADDQ_111                    *destination is absolute value
000023AC                          1771                          
000023AC                          1772                          
000023AC                          1773                          
000023AC                          1774  ADDQ_000                                                        *Destination is data register
000023AC  41F9 000051FF           1775                          LEA         COMMASTRING,A0
000023B2  4EB9 00004428           1776                          JSR         PRINT_SR
000023B8  41F9 0000520F           1777                          LEA         DSTRING,A0
000023BE  4EB9 00004428           1778                          JSR         PRINT_SR
000023C4  2E04                    1779                          MOVE.L      D4,D7
000023C6  4EB9 0000443A           1780                          JSR         PRINT_HEX
000023CC  6000 014A               1781                          BRA         ADDQ_DECODE_DONE
000023D0                          1782                          
000023D0                          1783  ADDQ_001                                                        *Destination is address register indirect
000023D0  41F9 000051FF           1784                          LEA         COMMASTRING,A0
000023D6  4EB9 00004428           1785                          JSR         PRINT_SR
000023DC  41F9 0000520D           1786                          LEA         ASTRING,A0
000023E2  4EB9 00004428           1787                          JSR         PRINT_SR
000023E8  2E04                    1788                          MOVE.L      D4,D7
000023EA  4EB9 0000443A           1789                          JSR         PRINT_HEX
000023F0  6000 0126               1790                          BRA         ADDQ_DECODE_DONE
000023F4                          1791                          
000023F4                          1792                 
000023F4                          1793  ADDQ_010                                                        *Destination is address register indirect
000023F4  41F9 000051FF           1794                          LEA         COMMASTRING,A0
000023FA  4EB9 00004428           1795                          JSR         PRINT_SR
00002400  41F9 00005211           1796                          LEA         LPARENSTRING,A0
00002406  4EB9 00004428           1797                          JSR         PRINT_SR
0000240C  41F9 0000520D           1798                          LEA         ASTRING,A0
00002412  4EB9 00004428           1799                          JSR         PRINT_SR
00002418  2E04                    1800                          MOVE.L      D4,D7
0000241A  4EB9 0000443A           1801                          JSR         PRINT_HEX
00002420  41F9 00005213           1802                          LEA         RPARENSTRING,A0
00002426  4EB9 00004428           1803                          JSR         PRINT_SR
0000242C  6000 00EA               1804                          BRA         ADDQ_DECODE_DONE
00002430                          1805                          
00002430                          1806                          
00002430                          1807  ADDQ_011                                                         *Address register indirect postincrement
00002430  41F9 000051FF           1808                          LEA         COMMASTRING,A0
00002436  4EB9 00004428           1809                          JSR         PRINT_SR
0000243C  41F9 00005211           1810                          LEA         LPARENSTRING,A0
00002442  4EB9 00004428           1811                          JSR         PRINT_SR
00002448  41F9 0000520D           1812                          LEA         ASTRING,A0
0000244E  4EB9 00004428           1813                          JSR         PRINT_SR
00002454  2E04                    1814                          MOVE.L      D4,D7
00002456  4EB9 0000443A           1815                          JSR         PRINT_HEX
0000245C  41F9 00005213           1816                          LEA         RPARENSTRING,A0
00002462  4EB9 00004428           1817                          JSR         PRINT_SR
00002468  41F9 00005215           1818                          LEA         PLUSSTRING,A0
0000246E  4EB9 00004428           1819                          JSR         PRINT_SR
00002474  6000 00A2               1820                          BRA         ADDQ_DECODE_DONE
00002478                          1821                          
00002478                          1822  ADDQ_100                                                        *Destination pre_decrement
00002478  41F9 000051FF           1823                          LEA         COMMASTRING,A0
0000247E  4EB9 00004428           1824                          JSR         PRINT_SR
00002484  41F9 00005217           1825                          LEA         MINUSSTRING,A0
0000248A  4EB9 00004428           1826                          JSR         PRINT_SR
00002490  41F9 00005211           1827                          LEA         LPARENSTRING,A0
00002496  4EB9 00004428           1828                          JSR         PRINT_SR
0000249C  41F9 0000520D           1829                          LEA         ASTRING,A0
000024A2  4EB9 00004428           1830                          JSR         PRINT_SR
000024A8  2E04                    1831                          MOVE.L      D4,D7
000024AA  4EB9 0000443A           1832                          JSR         PRINT_HEX
000024B0  41F9 00005213           1833                          LEA         RPARENSTRING,A0
000024B6  4EB9 00004428           1834                          JSR         PRINT_SR
000024BC  6000 005A               1835                          BRA         ADDQ_DECODE_DONE
000024C0                          1836  
000024C0                          1837  ADDQ_111                                                        *Destination absolute value
000024C0  41F9 000051FF           1838                          LEA         COMMASTRING,A0
000024C6  4EB9 00004428           1839                          JSR         PRINT_SR
000024CC  B83C 0000               1840                          CMP.B       #%000,D4
000024D0  6700 000A               1841                          BEQ         ADDQ_111000
000024D4  B83C 0001               1842                          CMP.B       #%001,D4
000024D8  6700 001C               1843                          BEQ         ADDQ_111001
000024DC                          1844                          
000024DC                          1845  ADDQ_111000            
000024DC                          1846                          
000024DC  41F9 00005209           1847                          LEA         DOLLARSTRING,A0             *IS WORD
000024E2  4EB9 00004428           1848                          JSR         PRINT_SR
000024E8  4247                    1849                          CLR         D7
000024EA  3E11                    1850                          MOVE.W      (A1),D7
000024EC  4EB9 0000443A           1851                          JSR         PRINT_HEX
000024F2  6000 0024               1852                          BRA         ADDQ_DECODE_DONE
000024F6                          1853                          
000024F6                          1854  
000024F6                          1855  ADDQ_111001            
000024F6                          1856                                                                  *Is long address
000024F6  41F9 00005209           1857                          LEA         DOLLARSTRING,A0
000024FC  4EB9 00004428           1858                          JSR         PRINT_SR
00002502  4287                    1859                          CLR.L       D7
00002504  2E11                    1860                          MOVE.L      (A1),D7
00002506  4EB9 0000443A           1861                          JSR         PRINT_HEX
0000250C  6000 000A               1862                          BRA         ADDQ_DECODE_DONE
00002510                          1863                   
00002510                          1864                          
00002510                          1865                                           
00002510                          1866  
00002510  4EB9 000042B4           1867  ADDQ_DECODE_ERR         JSR         PRINTLINE_SR               *Something went wrong
00002516  4E75                    1868                          RTS
00002518                          1869                          
00002518                          1870                          
00002518  41F9 0000513A           1871  ADDQ_DECODE_DONE        LEA         LINEEND,A0
0000251E  4EB9 00004428           1872                          JSR         PRINT_SR
00002524  4E75                    1873                          RTS     
00002526                          1874                          
00002526                          1875                          
00002526                          1876     
00002526                          1877  
00002526                          1878  
00002526                          1879  
00002526                          1880  
00002526                          1881  
00002526                          1882  -------------------- end include --------------------
00002526                          1883  AND_SR                  INCLUDE     "ANDdecode.X68"
00002526  4280                    1884                      CLR.L   D0
00002528  4281                    1885                      CLR.L   D1
0000252A  4282                    1886                      CLR.L   D2
0000252C  4283                    1887                      CLR.L   D3
0000252E  4284                    1888                      CLR.L   D4
00002530  4285                    1889                      CLR.L   D5
00002532  4286                    1890                      CLR.L   D6
00002534  4287                    1891                      CLR.L   D7
00002536  43F9 00010000           1892                      LEA     LINESTARTLOC,A1
0000253C                          1893  
0000253C                          1894  
0000253C  3011                    1895                      MOVE.W  (A1),D0                 *move the word in do
0000253E  EC48                    1896                      LSR.W   #6,D0                   *shift the word 6 place to the right
00002540  0200 0003               1897                      ANDI.B  #%00000011,D0           *we only need the two bits for the sized
00002544  B03C 0003               1898                      CMP.B   #%11,D0                 *check if 11,holds the size
00002548  6700 0F38               1899                      BEQ     MULSW_SR                *Its actually MULS.W
0000254C                          1900  
0000254C                          1901  
0000254C                          1902  
0000254C  1211                    1903                      MOVE.B  (A1),D1                 *Data register
0000254E  0201 000E               1904                      ANDI.B  #%00001110,D1           *We only need the three bits data register
00002552  E209                    1905                      LSR.B   #1,D1                   *shift 1 bit to the right
00002554                          1906  
00002554                          1907  
00002554  1411                    1908                      MOVE.B  (A1),D2                 *Direction,    *determine if AND Dn, <ea> or AND <ea>, Dn
00002556  0202 0001               1909                      ANDI.B  #%00000001,D2           *we only need the lat bit
0000255A                          1910  
0000255A                          1911  
0000255A  3611                    1912                      MOVE.W  (A1),D3
0000255C  0243 0038               1913                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
00002560  E60B                    1914                      LSR.B   #3,D3
00002562                          1915  
00002562  1E19                    1916                      MOVE.B  (A1)+,D7
00002564  1819                    1917                      MOVE.B  (A1)+,D4                *register
00002566  0204 0007               1918                      ANDI.B  #%00000111,D4           *We only care about the last beat
0000256A                          1919  
0000256A  4247                    1920                      CLR     D7
0000256C                          1921  
0000256C                          1922  ANDVALIDITY                                         * Lets check the data register first
0000256C  B23C 0000               1923                      CMP.B   #%000,D1
00002570  6700 003E               1924                      BEQ     AND_DATAREG_VALID       *the data register is D0
00002574  B23C 0001               1925                      CMP.B   #%001,D1
00002578  6700 0036               1926                      BEQ     AND_DATAREG_VALID       *the data register is D1 
0000257C  B23C 0002               1927                      CMP.B   #%010,D1
00002580  6700 002E               1928                      BEQ     AND_DATAREG_VALID       *the data register is D2
00002584  B23C 0003               1929                      CMP.B   #%011,D1
00002588  6700 0026               1930                      BEQ     AND_DATAREG_VALID       *the data register is D3
0000258C  B23C 0004               1931                      CMP.B   #%100,D1
00002590  6700 001E               1932                      BEQ     AND_DATAREG_VALID       *the data register is D4
00002594  B23C 0005               1933                      CMP.B   #%101,D1
00002598  6700 0016               1934                      BEQ     AND_DATAREG_VALID       *the data register is D5
0000259C  B23C 0006               1935                      CMP.B   #%110,D1
000025A0  6700 000E               1936                      BEQ     AND_DATAREG_VALID       *the data register is D6
000025A4  B23C 0007               1937                      CMP.B   #%111,D1
000025A8  6700 0006               1938                      BEQ     AND_DATAREG_VALID       *the data register is D7
000025AC  6000 015E               1939                      BRA     AND_DECODE_ERR          *we will never get here, if we do error
000025B0                          1940  
000025B0                          1941  
000025B0                          1942  AND_DATAREG_VALID                                   * LET'S THE DIRECTION NOW
000025B0  B43C 0000               1943                      CMP.B   #0,D2
000025B4  6700 000E               1944                      BEQ     AND_DN_DESTINATION      *Dn is destination, AND <ea>, Dn 
000025B8  B43C 0001               1945                      CMP.B   #1,D2
000025BC  6700 0106               1946                      BEQ     AND_DN_SOURCE           *Dn is source, AND Dn, <ea> some effectve addresses are not valid
000025C0  6000 014A               1947                      BRA     AND_DECODE_ERR
000025C4                          1948  
000025C4                          1949  AND_DN_DESTINATION                                  *check mode for Dn is destination (Dn + <ea>->Dn)
000025C4                          1950                                                      *<EA> cant be address register
000025C4  B63C 0000               1951                      CMP.B   #%000,D3
000025C8  6700 002E               1952                      BEQ     AND_MODE_VALIDATE       *<EA> is Dn
000025CC  B63C 0001               1953                      CMP.B   #%001,D3
000025D0  6700 013A               1954                      BEQ     AND_DECODE_ERR          *If An is the effective address, check the size, if byte invalid
000025D4  B63C 0002               1955                      CMP.B   #%010,D3
000025D8  6700 001E               1956                      BEQ     AND_MODE_VALIDATE       *<EA> is address register indirect
000025DC  B63C 0003               1957                      CMP.B   #%011,D3
000025E0  6700 0016               1958                      BEQ     AND_MODE_VALIDATE       *<EA> is address register post increment
000025E4  B63C 0004               1959                      CMP.B   #%100,D3
000025E8  6700 000E               1960                      BEQ     AND_MODE_VALIDATE       *<EA> is address register pre decrement
000025EC  B63C 0007               1961                      CMP.B   #%111,D3
000025F0  6700 0006               1962                      BEQ     AND_MODE_VALIDATE       *<EA> could be (xxx).w, (xxx).l or #<data>
000025F4  6000 0116               1963                      BRA     AND_DECODE_ERR
000025F8                          1964  
000025F8                          1965                                                      
000025F8                          1966                                                      
000025F8                          1967  
000025F8                          1968  AND_MODE_VALIDATE                                   *Lets check what we need to do next
000025F8                          1969                  
000025F8  B63C 0007               1970                      CMP.B   #%111,D3
000025FC  6600 004E               1971                      BNE     AND_SOURCE              *the <EA> is not absolute value            
00002600  B83C 0000               1972                      CMP.B   #%000,D4
00002604  6700 0016               1973                      BEQ     AND_GET_VALUE           *the <EA> is absolute word
00002608  B83C 0001               1974                      CMP.B   #%001,D4
0000260C  6700 000E               1975                      BEQ     AND_GET_VALUE           *the <EA> is absolute long
00002610  B83C 0004               1976                      CMP.B   #%100,D4
00002614  6700 0006               1977                      BEQ     AND_GET_VALUE           *the <EA> is immediate value
00002618  6000 00F2               1978                      BRA     AND_DECODE_ERR
0000261C                          1979  
0000261C                          1980  AND_GET_VALUE                                       *Now we need to figure out how much data to snag after?
0000261C  B83C 0004               1981                      CMP.B   #%100,D4
00002620  6700 0012               1982                      BEQ     AND_POUND               *immediate value
00002624  B83C 0000               1983                      CMP.B   #%000,D4
00002628  6700 0016               1984                      BEQ     AND_GETS_WORD             *absolute word
0000262C  B83C 0001               1985                      CMP.B   #%001,D4
00002630  6700 0014               1986                      BEQ     AND_GETS_LONG             *absolute long
00002634                          1987  
00002634                          1988  AND_POUND
00002634  B03C 0002               1989                      CMP.B   #%10,D0                 
00002638  6700 000C               1990                      BEQ     AND_GETS_LONG           *the abolute value is long
0000263C  6000 0002               1991                      BRA     AND_GETS_WORD           *the absolute value need to be added is word
00002640                          1992  
00002640                          1993  
00002640                          1994  AND_GETS_WORD
00002640  3A19                    1995                      MOVE.W  (A1)+,D5                *D5 store the word data
00002642  6000 0008               1996                      BRA     AND_SOURCE
00002646                          1997  
00002646                          1998  
00002646                          1999  AND_GETS_LONG
00002646  2A19                    2000                      MOVE.L  (A1)+,D5                *D5 store the long data
00002648  6000 0002               2001                      BRA     AND_SOURCE
0000264C                          2002  
0000264C                          2003  AND_SOURCE
0000264C  B43C 0007               2004                      CMP.B   #%111,D2
00002650  6600 0046               2005                      BNE     AND_VERIFIED
00002654  B23C 0002               2006                      CMP.B   #%10,D1
00002658  6700 0006               2007                      BEQ     ANDED_GETLONG
0000265C  6000 0008               2008                      BRA     ANDED_GETWORD
00002660                          2009  
00002660                          2010  ANDED_GETLONG
00002660  2C19                    2011                      MOVE.L  (A1)+,D6
00002662  6000 0008               2012                      BRA     AND_CHECKLENGTH
00002666                          2013  ANDED_GETWORD
00002666  3C19                    2014                      MOVE.W  (A1)+,D6
00002668  6000 0002               2015                      BRA     AND_CHECKLENGTH
0000266C                          2016  
0000266C  48E7 FF00               2017  AND_CHECKLENGTH   MOVEM.L D0-D7,-(SP)
00002670  2009                    2018                      MOVE.L  A1,D0
00002672  2239 00010000           2019                      MOVE.L  LINESTARTLOC,D1
00002678  9081                    2020                      SUB.L   D1,D0                   *D0 now has the length of the instruction in bytes
0000267A  C0FC 0008               2021                      MULU    #8,D0                   *Now D0 has the number of bits
0000267E  0280 000000FF           2022                      ANDI.L  #$000000FF,D0
00002684  1439 00005230           2023                      MOVE.B  (LINELENGTH),D2         *D2 has line length in bits
0000268A  B400                    2024                      CMP.B   D0,D2
0000268C  6600 007E               2025                      BNE     AND_DECODE_ERR
00002690  4CDF 00FF               2026                      MOVEM.L (SP)+,D0-D7
00002694  6000 0002               2027                      BRA     AND_VERIFIED
00002698                          2028  
00002698                          2029  
00002698                          2030                                                      *we need two different ways to handle the printing
00002698                          2031                                                      *for each scenarios Dn + <ea> -> Dn
00002698                          2032                                                      *and for <ea> + Dn -> <ea>
00002698                          2033  
00002698                          2034  AND_VERIFIED
00002698  B43C 0000               2035                      CMP.B   #%0,D2
0000269C  6700 0006               2036                      BEQ     AND_DECODE_PRINT        *deployed when AND.SIZE <EA>,DN, Uses the print method from MOVE
000026A0  6600 0012               2037                      BNE     AND_DECODE_PRINT_2      *deployed when AND.SIZE Dn,<EA>
000026A4                          2038  
000026A4                          2039                                                      *prints add when Dn + <ea>->dn
000026A4                          2040  
000026A4  41F9 0000519F           2041  AND_DECODE_PRINT    LEA     ANDSTRING,A0
000026AA  4EB9 00004428           2042                      JSR     PRINT_SR
000026B0  6000 F598               2043                      BRA     PRINT_SIZE              *uses printer from ADD decoder
000026B4                          2044  
000026B4                          2045  
000026B4                          2046  AND_DECODE_PRINT_2                                  *prints add when AND  Dn, <EA>
000026B4  41F9 0000519F           2047                      LEA     ANDSTRING,A0
000026BA  4EB9 00004428           2048                      JSR     PRINT_SR
000026C0  6000 F5F2               2049                      BRA     PRINT_SIZE_2
000026C4                          2050  
000026C4                          2051  
000026C4                          2052  AND_DN_SOURCE                                       *check mode when Dn is the source
000026C4                          2053  
000026C4  B63C 0000               2054                      CMP.B   #%000,D3
000026C8  6700 0042               2055                      BEQ     AND_DECODE_ERR          *<ea> cant be Dn
000026CC  B63C 0001               2056                      CMP.B   #%001,D3
000026D0  6700 003A               2057                      BEQ     AND_DECODE_ERR          *<ea> can't be  An
000026D4  B63C 0007               2058                      CMP.B   #%111,D3
000026D8  6700 0026               2059                      BEQ     CHECK_REG_AND           *Check register to tell if its valid, cant be immediate
000026DC  B63C 0002               2060                      CMP.B   #%010,D3
000026E0  6700 FF16               2061                      BEQ     AND_MODE_VALIDATE       *Check if the absolute value is short or long
000026E4  B63C 0003               2062                      CMP.B   #%011,D3
000026E8  6700 FF0E               2063                      BEQ     AND_MODE_VALIDATE
000026EC  B63C 0004               2064                      CMP.B   #%100,D3
000026F0  6700 FF06               2065                      BEQ     AND_MODE_VALIDATE
000026F4  B63C 0003               2066                      CMP.B   #%011,D3
000026F8  6700 FEFE               2067                      BEQ     AND_MODE_VALIDATE
000026FC  6000 000E               2068                      BRA     AND_DECODE_ERR
00002700                          2069                                                      
00002700                          2070  
00002700  B83C 0004               2071  CHECK_REG_AND       CMP.B   #%100,D4
00002704  6700 0006               2072                      BEQ     AND_DECODE_ERR          *cant be immediate
00002708  6600 FEEE               2073                      BNE     AND_MODE_VALIDATE       *the mode is validate
0000270C                          2074  
0000270C                          2075  
0000270C                          2076  
0000270C  4EB9 000042B4           2077  AND_DECODE_ERR      JSR     PRINTLINE_SR
00002712  4E75                    2078                      RTS                             *and decoder is done
00002714                          2079  
00002714                          2080  
00002714  41F9 0000513A           2081  AND_DECODE_DONE     LEA     LINEEND,A0
0000271A  4EB9 00004428           2082                      JSR     PRINT_SR
00002720  4E75                    2083                      RTS
00002722                          2084                                                      *~Font name~Courier New~
00002722                          2085                                                      *~Font size~10~
00002722                          2086                                                      *~Tab type~1~
00002722                          2087                                                      *~Tab size~4~
00002722                          2088  
00002722                          2089  
00002722                          2090  
00002722                          2091  
00002722                          2092  -------------------- end include --------------------
00002722                          2093  CLR_SR                  INCLUDE     "CLRdecode.X68"
00002722                          2094  
00002722                          2095  
00002722                          2096  
00002722                          2097  
00002722  7400                    2098  CLRB_SR         MOVE.L  #$0,D2                  * set size code: Byte
00002724  6000 000E               2099                  BRA     VALIDATECLR
00002728                          2100  
00002728  7401                    2101  CLRW_SR         MOVE.L  #$1,D2                  * set size code: Word
0000272A  6000 0008               2102                  BRA     VALIDATECLR
0000272E                          2103  
0000272E  7402                    2104  CLRL_SR         MOVE.L  #$2,D2                  * set size code: Long
00002730  6000 0002               2105                  BRA     VALIDATECLR
00002734                          2106  
00002734  5301                    2107  VALIDATECLR     SUB.B   #1,D1                   * if there are no bits left, there is no way to be valid.
00002736  6700 004C               2108                  BEQ     CLR_INVALID
0000273A                          2109  
0000273A  43F9 00010000           2110                  LEA     LINESTARTLOC,A1         * load up the first 4 bytes
00002740  3011                    2111                  MOVE.W  (A1),D0
00002742                          2112  
00002742  4283                    2113                  CLR.L   D3                      * put copies of the remaining bits into D3 and D4 for mode and register respectively
00002744  4284                    2114                  CLR.L   D4
00002746  3600                    2115                  MOVE.W  D0,D3                   * mode copy
00002748  E68B                    2116                  LSR.L   #3,D3                   * shift into the right nibble and toss out reg bits
0000274A  0203 0007               2117                  ANDI.B  #%00000111,D3           * toss out earlier bits
0000274E  3800                    2118                  MOVE.W  D0,D4                   * reg copy
00002750  0204 0007               2119                  ANDI.B  #%00000111,D4           * toss out earlier bits
00002754                          2120  
00002754                          2121                  * check if mode is either 001 or 111
00002754  B63C 0001               2122                  CMP.B   #%0001,D3                * 001 is an invalid mode
00002758  6700 002A               2123                  BEQ     CLR_INVALID
0000275C  B63C 0007               2124                  CMP.B   #%111,D3               * 111 is special indirect addressing mode
00002760  6700 0022               2125                  BEQ     CLR_ADDR_Ind
00002764                          2126                                                  * it's not 001 or 111, so we can assume it's one of the valid types.
00002764  B03C 0000               2127                  CMP.B   #%000,D0
00002768  6700 001A               2128                  BEQ     CLR_Dn
0000276C  B03C 0002               2129                  CMP.B   #%010,D0
00002770  6700 0012               2130                  BEQ     CLR_An
00002774  B03C 0003               2131                  CMP.B   #%011,D0
00002778  6700 000A               2132                  BEQ     CLR_An_PostInc
0000277C  B03C 0004               2133                  CMP.B   #%100,D0
00002780  6700 0002               2134                  BEQ     CLR_An_PreDec
00002784                          2135  
00002784                          2136  
00002784                          2137  
00002784                          2138  
00002784                          2139  
00002784                          2140  CLR_Dn
00002784                          2141  
00002784                          2142  CLR_An
00002784                          2143  
00002784                          2144  CLR_An_PostInc
00002784                          2145  
00002784                          2146  CLR_An_PreDec
00002784                          2147  
00002784                          2148  
00002784                          2149  
00002784                          2150  CLR_ADDR_Ind    * cannot have size code 0 for byte
00002784                          2151  
00002784                          2152  
00002784  6000 1B2E               2153  CLR_INVALID     BRA     PRINTLINE_SR
00002788                          2154  
00002788  4E75                    2155  CLR_SR_DONE   RTS
00002788  4E75                    2156  -------------------- end include --------------------
0000278A                          2157  CMP_SR                  INCLUDE     "CMPdecode.X68"
0000278A  4280                    2158                      CLR.L   D0
0000278C  4281                    2159                      CLR.L   D1
0000278E  4282                    2160                      CLR.L   D2
00002790  4283                    2161                      CLR.L   D3
00002792  4284                    2162                      CLR.L   D4
00002794  4285                    2163                      CLR.L   D5
00002796  4286                    2164                      CLR.L   D6
00002798  4287                    2165                      CLR.L   D7
0000279A  43F9 00010000           2166                      LEA     LINESTARTLOC,A1
000027A0                          2167  
000027A0                          2168                                                      *check if it is ADDA instead
000027A0  3011                    2169                      MOVE.W  (A1),D0
000027A2  EC48                    2170                      LSR.W   #6,D0
000027A4  0200 0003               2171                      ANDI.B  #%00000011,D0
000027A8  B03C 0003               2172                      CMP.B   #%11,D0                 *check if 11,holds the size
000027AC  6700 EF38               2173                      BEQ     ADDADECODE_SR           *Its actually ADDA
000027B0                          2174  
000027B0                          2175  
000027B0  1211                    2176                      MOVE.B  (A1),D1                 *Data register
000027B2  0201 000E               2177                      ANDI.B  #%00001110,D1           *We only need the data register
000027B6  E209                    2178                      LSR.B   #1,D1
000027B8                          2179  
000027B8                          2180  
000027B8  1411                    2181                      MOVE.B  (A1),D2                 *Direction,    *determine if dn + <ea>-><ea> or <ea> + dn->dn
000027BA  0202 0001               2182                      ANDI.B  #%00000001,D2           *we only need the lat bit
000027BE                          2183  
000027BE                          2184  
000027BE  3611                    2185                      MOVE.W  (A1),D3
000027C0  0243 0038               2186                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
000027C4  E60B                    2187                      LSR.B   #3,D3
000027C6                          2188  
000027C6  1E19                    2189                      MOVE.B  (A1)+,D7
000027C8  1819                    2190                      MOVE.B  (A1)+,D4                *register
000027CA  0204 0007               2191                      ANDI.B  #%00000111,D4           *We only care about the last beat
000027CE                          2192  
000027CE  4247                    2193                      CLR     D7
000027D0                          2194  
000027D0                          2195  CMPVALIDITY                                         * Lets check the data register first, 
000027D0                          2196                                                      * it has to be between (d0 - d7), error otherwise
000027D0  B23C 0000               2197                      CMP.B   #%000,D1
000027D4  6700 003E               2198                      BEQ     CMP_DATAREG_VALID       * data register D0
000027D8  B23C 0001               2199                      CMP.B   #%001,D1
000027DC  6700 0036               2200                      BEQ     CMP_DATAREG_VALID       * data register D1
000027E0  B23C 0002               2201                      CMP.B   #%010,D1
000027E4  6700 002E               2202                      BEQ     CMP_DATAREG_VALID       * data register D2
000027E8  B23C 0003               2203                      CMP.B   #%011,D1
000027EC  6700 0026               2204                      BEQ     CMP_DATAREG_VALID       * data register D3
000027F0  B23C 0004               2205                      CMP.B   #%100,D1
000027F4  6700 001E               2206                      BEQ     CMP_DATAREG_VALID       * data register D4
000027F8  B23C 0005               2207                      CMP.B   #%101,D1
000027FC  6700 0016               2208                      BEQ     CMP_DATAREG_VALID       * data register D5
00002800  B23C 0006               2209                      CMP.B   #%110,D1
00002804  6700 000E               2210                      BEQ     CMP_DATAREG_VALID       * data register D6
00002808  B23C 0007               2211                      CMP.B   #%111,D1
0000280C  6700 0006               2212                      BEQ     CMP_DATAREG_VALID       * data register D7
00002810  6000 012A               2213                      BRA     CMP_DECODE_ERR
00002814                          2214  
00002814                          2215  
00002814                          2216  CMP_DATAREG_VALID                                   * lets check the direction, if d2 is is not 0, its invalid
00002814  B43C 0000               2217                      CMP.B   #0,D2
00002818  6700 0006               2218                      BEQ     CMP_DIRECTION_VALID     *Dn is destination, Dn - souce->cc all effective address are valid
0000281C  6000 011E               2219                      BRA     CMP_DECODE_ERR
00002820                          2220                          
00002820                          2221  CMP_DIRECTION_VALID                                 *At this point we know the data register and the direction are valid
00002820                          2222                                                      *The size bits could only be %01, %10 and %00, otherwise its error
00002820  B03C 0000               2223                      CMP.B   #%00,d0
00002824  6700 0016               2224                      BEQ     CMP_SIZE_VALID
00002828  B03C 0001               2225                      CMP.B   #%01,d0
0000282C  6700 000E               2226                      BEQ     CMP_SIZE_VALID
00002830  B03C 0002               2227                      CMP.B   #%10,d0
00002834  6700 0006               2228                      BEQ     CMP_SIZE_VALID
00002838  6000 0102               2229                      BRA     CMP_DECODE_ERR
0000283C                          2230                      
0000283C                          2231  
0000283C                          2232  
0000283C                          2233  CMP_SIZE_VALID                                      *At this point the size,direction and data register are valid 
0000283C                          2234                                                      *check mode (Dn - <ea>->CC), All effective address are valid
0000283C  B63C 0000               2235                      CMP.B   #%000,D3
00002840  6700 0032               2236                      BEQ     CMP_IMM_SOURCE
00002844  B63C 0001               2237                      CMP.B   #%001,D3
00002848  6700 00E6               2238                      BEQ     CHECK_SIZE_4CMP_AR      *If An is the effective address, check the size, if byte invalid
0000284C  B63C 0002               2239                      CMP.B   #%010,D3
00002850  6700 0022               2240                      BEQ     CMP_IMM_SOURCE
00002854  B63C 0003               2241                      CMP.B   #%011,D3
00002858  6700 001A               2242                      BEQ     CMP_IMM_SOURCE
0000285C  B63C 0004               2243                      CMP.B   #%100,D3
00002860  6700 0012               2244                      BEQ     CMP_IMM_SOURCE
00002864  B63C 0007               2245                      CMP.B   #%111,D3
00002868  6700 000A               2246                      BEQ     CMP_IMM_SOURCE
0000286C  6000 00CE               2247                      BRA     CMP_DECODE_ERR
00002870                          2248  
00002870                          2249                                                      
00002870                          2250                                                      
00002870                          2251  
00002870                          2252  CMP_MODE_VALIDATE                                   *Check if source register is valid (Dn - <ea>->CC)
00002870                          2253                                                      *in this case An can be 7, *this section could be removed
00002870                          2254                                                      *i just left it to be here
00002870  6000 0002               2255                      BRA     CMP_IMM_SOURCE
00002874                          2256  
00002874  B63C 0007               2257  CMP_IMM_SOURCE      CMP.B   #%111,D3                * if the mode is not Literal value, we are done, let jump
00002878  6600 0052               2258                      BNE     CMP_VERIFIED            * its has been verified by previous stages
0000287C  B83C 0000               2259                      CMP.B   #%000,D4
00002880  6700 0016               2260                      BEQ     CMP_GET_VALUE           * the literal is (xxx).w
00002884  B83C 0001               2261                      CMP.B   #%001,D4
00002888  6700 000E               2262                      BEQ     CMP_GET_VALUE           * the literal is (xxx).l
0000288C  B83C 0004               2263                      CMP.B   #%100,D4
00002890  6700 0006               2264                      BEQ     CMP_GET_VALUE           * the literal is #<data>
00002894  6000 00A6               2265                      BRA     CMP_DECODE_ERR          * error
00002898                          2266  
00002898                          2267  CMP_GET_VALUE                                       *Now we need to figure out how much data to snag after, should we get a word or a long?
00002898  B83C 0004               2268                      CMP.B   #%100,D4
0000289C  6700 0012               2269                      BEQ     CMP_POUND               * branch to add the value of the literal #<data>
000028A0  B83C 0000               2270                      CMP.B   #%000,D4
000028A4  6700 0016               2271                      BEQ     CMP_GETWORD             * branch to add the value of the absolute (xxx).w
000028A8  B83C 0001               2272                      CMP.B   #%001,D4
000028AC  6700 0014               2273                      BEQ     CMP_GETLONG             * branch to add the value of the absolute (xxx).l
000028B0                          2274  
000028B0                          2275  CMP_POUND
000028B0  B03C 0002               2276                      CMP.B   #%10,D0                 *The number need to be added is a literal
000028B4  6700 000C               2277                      BEQ     CMP_GETLONG
000028B8  6000 0002               2278                      BRA     CMP_GETWORD
000028BC                          2279  
000028BC                          2280  
000028BC                          2281  CMP_GETWORD
000028BC  3A19                    2282                      MOVE.W  (A1)+,D5                *D5 store the word data
000028BE  6000 0008               2283                      BRA     CMP_SOURCE
000028C2                          2284  
000028C2                          2285  
000028C2                          2286  CMP_GETLONG
000028C2  2A19                    2287                      MOVE.L  (A1)+,D5                *D5 store the long data
000028C4  6000 0002               2288                      BRA     CMP_SOURCE
000028C8                          2289  
000028C8                          2290  CMP_SOURCE                                          *everything is good if we get here
000028C8  6000 0002               2291                      BRA    CMP_VERIFIED
000028CC                          2292  
000028CC                          2293  
000028CC                          2294                                                  
000028CC                          2295  
000028CC                          2296  CMP_VERIFIED                                        *At this point cmp is verfied, lets print
000028CC  B43C 0000               2297                      CMP.B   #%0,D2
000028D0  6700 0006               2298                      BEQ     CMP_DECODE_PRINT        *deployed when Dn - <ea> -> CC, Uses the print method from MOVE
000028D4  6600 0066               2299                      BNE     CMP_DECODE_ERR          
000028D8                          2300  
000028D8                          2301                                                      *prints CMP when Dn - <ea>->cc
000028D8                          2302  
000028D8  41F9 000051B8           2303  CMP_DECODE_PRINT    LEA     CMPSTRING,A0
000028DE  4EB9 00004428           2304                      JSR     PRINT_SR
000028E4  6000 F364               2305                      BRA     PRINT_SIZE
000028E8                          2306  
000028E8  B03C 0000               2307  PRINT_CMPSIZE       CMP.B   #%00,D0                 *Branch to print size .B
000028EC  6700 0012               2308                      BEQ     SIZE_CMPB
000028F0  B03C 0001               2309                      CMP.B   #%01,D0
000028F4  6700 001A               2310                      BEQ     SIZE_CMPW               *Branch to print size .W
000028F8  B03C 0002               2311                      CMP.B   #%10,D0
000028FC  6700 0022               2312                      BEQ     SIZE_CMPL               *Branch to print size .L
00002900                          2313  
00002900  41F9 000051F6           2314  SIZE_CMPB           LEA     BYTESTRING,A0           *size is byte, prints .B
00002906  4EB9 00004428           2315                      JSR     PRINT_SR
0000290C  6000 0610               2316                      BRA     MOVEAS
00002910  41F9 000051F9           2317  SIZE_CMPW           LEA     WORDSTRING,A0           *size is word, prints .w
00002916  4EB9 00004428           2318                      JSR     PRINT_SR
0000291C  6000 0600               2319                      BRA     MOVEAS
00002920  41F9 000051FC           2320  SIZE_CMPL           LEA     LONGSTRING,A0           *size is long, prints .l
00002926  4EB9 00004428           2321                      JSR     PRINT_SR
0000292C  6000 05F0               2322                      BRA     MOVEAS
00002930                          2323  
00002930                          2324  
00002930                          2325  
00002930                          2326  
00002930  B03C 0000               2327  CHECK_SIZE_4CMP_AR  CMP.B   #%00,D0                 *The size is byte, invalid size
00002934  6600 FF3A               2328                      BNE     CMP_MODE_VALIDATE       *The size is not byte
00002938  6700 0002               2329                      BEQ     CMP_DECODE_ERR          *ERROR
0000293C                          2330  
0000293C  4EB9 000042B4           2331  CMP_DECODE_ERR      JSR     PRINTLINE_SR
00002942  4E75                    2332                      RTS
00002944                          2333  
00002944                          2334  
00002944  41F9 0000513A           2335  CMP_DECODE_DONE     LEA     LINEEND,A0
0000294A  4EB9 00004428           2336                      JSR     PRINT_SR
00002950  4E75                    2337                      RTS
00002952                          2338                                                      *~Font name~Courier New~
00002952                          2339                                                      *~Font size~10~
00002952                          2340                                                      *~Tab type~1~
00002952                          2341                                                      *~Tab size~4~
00002952                          2342  
00002952                          2343  
00002952                          2344  
00002952                          2345  
00002952                          2346  
00002952                          2347  
00002952                          2348  -------------------- end include --------------------
00002952                          2349  DIVUW_SR                INCLUDE     "DIVUWdecode.x68"
00002952  4280                    2350                      CLR.L   D0
00002954  4281                    2351                      CLR.L   D1
00002956  4282                    2352                      CLR.L   D2
00002958  4283                    2353                      CLR.L   D3
0000295A  4284                    2354                      CLR.L   D4
0000295C  4285                    2355                      CLR.L   D5
0000295E  4286                    2356                      CLR.L   D6
00002960  4287                    2357                      CLR.L   D7
00002962  43F9 00010000           2358                      LEA     LINESTARTLOC,A1
00002968                          2359  
00002968                          2360  
00002968  1211                    2361                      MOVE.B  (A1),D1                 *Data register
0000296A  0201 000E               2362                      ANDI.B  #%00001110,D1           *We only need the data register
0000296E  E209                    2363                      LSR.B   #1,D1
00002970                          2364                      
00002970  1411                    2365                      MOVE.B  (A1),D2                 *Direction,  it has to be 0
00002972  0202 0001               2366                      ANDI.B  #%00000001,D2           *we only need the last bit
00002976                          2367  
00002976                          2368  
00002976                          2369  
00002976  3611                    2370                      MOVE.W  (A1),D3
00002978  0243 0038               2371                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
0000297C  E60B                    2372                      LSR.B   #3,D3
0000297E                          2373  
0000297E  1E19                    2374                      MOVE.B  (A1)+,D7
00002980  1819                    2375                      MOVE.B  (A1)+,D4                *register
00002982  0204 0007               2376                      ANDI.B  #%00000111,D4           *We only care about the last beat
00002986                          2377  
00002986  4247                    2378                      CLR     D7
00002988                          2379                      
00002988                          2380                      
00002988                          2381  DIVUWVALIDITY        
00002988  B43C 0000               2382                      CMP.B   #%0,D2                   *Checks the value at D2, if it is not 1, its error
0000298C  6700 0006               2383                      BEQ     DIVUW_DIR_VALID
00002990  6000 00D4               2384                      BRA     DIVUW_DECODE_ERR
00002994                          2385  
00002994                          2386  DIVUW_DIR_VALID                                       * Lets check the data register first
00002994                          2387                                                      * the data register is going to be one of the
00002994                          2388                                                      * eight registers (D0 - D7)
00002994  B23C 0000               2389                      CMP.B   #%000,D1
00002998  6700 003E               2390                      BEQ     DIVUW_DATAREG_VALID
0000299C  B23C 0001               2391                      CMP.B   #%001,D1
000029A0  6700 0036               2392                      BEQ     DIVUW_DATAREG_VALID
000029A4  B23C 0002               2393                      CMP.B   #%010,D1
000029A8  6700 002E               2394                      BEQ     DIVUW_DATAREG_VALID
000029AC  B23C 0003               2395                      CMP.B   #%011,D1
000029B0  6700 0026               2396                      BEQ     DIVUW_DATAREG_VALID
000029B4  B23C 0004               2397                      CMP.B   #%100,D1
000029B8  6700 001E               2398                      BEQ     DIVUW_DATAREG_VALID
000029BC  B23C 0005               2399                      CMP.B   #%101,D1
000029C0  6700 0016               2400                      BEQ     DIVUW_DATAREG_VALID
000029C4  B23C 0006               2401                      CMP.B   #%110,D1
000029C8  6700 000E               2402                      BEQ     DIVUW_DATAREG_VALID
000029CC  B23C 0007               2403                      CMP.B   #%111,D1
000029D0  6700 0006               2404                      BEQ     DIVUW_DATAREG_VALID
000029D4  6000 0090               2405                      BRA     DIVUW_DECODE_ERR
000029D8                          2406  
000029D8                          2407  
000029D8                          2408  DIVUW_DATAREG_VALID                                 *check mode
000029D8                          2409                                                      *Valid addressing modeS include
000029D8                          2410                                                      *Dn,(An),(An)+, -(An), (xxx).w, (xxx).L and #<data>
000029D8                          2411                                                      *otherwise, it is invalid addressing code or
000029D8                          2412                                                      *out of this assignment scope 
000029D8  B63C 0000               2413                      CMP.B   #%000,D3
000029DC  6700 005A               2414                      BEQ     DIVUW_SOURCE
000029E0  B63C 0002               2415                      CMP.B   #%010,D3
000029E4  6700 0052               2416                      BEQ     DIVUW_SOURCE
000029E8  B63C 0003               2417                      CMP.B   #%011,D3
000029EC  6700 004A               2418                      BEQ     DIVUW_SOURCE
000029F0  B63C 0004               2419                      CMP.B   #%100,D3
000029F4  6700 0042               2420                      BEQ     DIVUW_SOURCE
000029F8  B63C 0007               2421                      CMP.B   #%111,D3                *If the mode is 111,branch to immediate data
000029FC  6700 0006               2422                      BEQ     DIVUW_IMM_SOURCE
00002A00  6000 0064               2423                      BRA     DIVUW_DECODE_ERR
00002A04                          2424  
00002A04                          2425                                
00002A04                          2426  DIVUW_IMM_SOURCE                                    *if we get here, the source operand is an immediate value
00002A04                          2427                                                      *it is either, (xxx).w, (xxx).L or #<data>, otherwise error
00002A04                          2428                                                      *let's check what it is and figure out how much it is
00002A04  B83C 0000               2429                      CMP.B   #%000,D4
00002A08  6700 001A               2430                      BEQ     DIVUW_GETWORD           *the absolute value is (xxx).w
00002A0C  B83C 0001               2431                      CMP.B   #%001,D4
00002A10  6700 0020               2432                      BEQ     DIVUW_GETLONG           *the absolute value is (xxx).L
00002A14  B83C 0004               2433                      CMP.B   #%100,D4
00002A18  6700 0006               2434                      BEQ     DIVUW_POUND             *the absolute value is #<data>
00002A1C  6000 0048               2435                      BRA     DIVUW_DECODE_ERR
00002A20                          2436  
00002A20                          2437  
00002A20                          2438  
00002A20                          2439  DIVUW_POUND                                         *here, we know the immediate value is literal #<data>
00002A20  6000 0002               2440                      BRA     DIVUW_GETWORD
00002A24                          2441  
00002A24                          2442  DIVUW_GETWORD
00002A24  3A19                    2443                      MOVE.W  (A1)+,D5                *D5 store the word data
00002A26  0C45 FFFF               2444                      CMPI.W  #65535,D5
00002A2A  6200 003A               2445                      BHI     DIVUW_DECODE_ERR        *if the value is greater than 16 bits, its invalid
00002A2E  6000 0010               2446                      BRA     DIVUW_VERIFIED
00002A32                          2447  
00002A32                          2448  DIVUW_GETLONG
00002A32  2A19                    2449                      MOVE.L  (A1)+,D5                *D5 store the long data
00002A34  6000 000A               2450                      BRA     DIVUW_VERIFIED
00002A38                          2451  
00002A38                          2452  DIVUW_SOURCE
00002A38  B63C 0007               2453                      CMP.B   #%111,D3
00002A3C  6600 0002               2454                      BNE     DIVUW_VERIFIED
00002A40                          2455  
00002A40                          2456  
00002A40                          2457                                                      *we need two different ways to handle the printing
00002A40                          2458                                                      *for each scenarios Dn + <ea> -> Dn
00002A40                          2459                                                      *and for <ea> + Dn -> <ea>
00002A40                          2460  
00002A40                          2461  DIVUW_VERIFIED
00002A40  4240                    2462                      CLR     D0                      *clear d0
00002A42  103C 0003               2463                      MOVE.B  #%11,D0                 *MOVE %11 D0, so that the decoder use move printer, correctly
00002A46  6000 0002               2464                      BRA     DIVUW_PRINT
00002A4A                          2465  
00002A4A                          2466                                                      *prints add when Dn + <ea>->dn
00002A4A                          2467  
00002A4A  41F9 000051AE           2468  DIVUW_PRINT         LEA     DIVUWSTRING,A0          *prints DIVU
00002A50  4EB9 00004428           2469                      JSR     PRINT_SR
00002A56  41F9 000051F9           2470                      LEA     WORDSTRING,A0           *Prints .w
00002A5C  4EB9 00004428           2471                      JSR     PRINT_SR
00002A62  6000 04BA               2472                      BRA     MOVEAS                  *branch to MOVEAS to print the remaining instructions
00002A66                          2473  
00002A66                          2474  
00002A66                          2475  
00002A66                          2476  
00002A66                          2477  
00002A66                          2478  
00002A66  4EB9 000042B4           2479  DIVUW_DECODE_ERR    JSR     PRINTLINE_SR            *Prints the error memory address with related junk
00002A6C  4E75                    2480                      RTS                             *we are done
00002A6E                          2481  
00002A6E                          2482  
00002A6E  41F9 0000513A           2483  DIVUW_DECODE_DONE   LEA     LINEEND,A0              *prints line end
00002A74  4EB9 00004428           2484                      JSR     PRINT_SR    
00002A7A  4E75                    2485                      RTS
00002A7C                          2486                                                      *~Font name~Courier New~
00002A7C                          2487                                                      *~Font size~10~
00002A7C                          2488                                                      *~Tab type~1~
00002A7C                          2489                                                      *~Tab size~4~
00002A7C                          2490  
00002A7C                          2491  
00002A7C                          2492  
00002A7C                          2493  
00002A7C                          2494  
00002A7C                          2495  
00002A7C                          2496  
00002A7C                          2497  
00002A7C                          2498  -------------------- end include --------------------
00002A7C                          2499  JSR_SR                  INCLUDE     "JSRdecode.X68"
00002A7C  4280                    2500                      CLR.L   D0
00002A7E  4281                    2501                      CLR.L   D1
00002A80  4282                    2502                      CLR.L   D2
00002A82  4283                    2503                      CLR.L   D3
00002A84  4284                    2504                      CLR.L   D4
00002A86  4285                    2505                      CLR.L   D5
00002A88  4286                    2506                      CLR.L   D6
00002A8A  4287                    2507                      CLR.L   D7
00002A8C  43F9 00010000           2508                      LEA     LINESTARTLOC,A1                
00002A92                          2509  
00002A92                          2510  
00002A92                          2511  
00002A92  3611                    2512                      MOVE.W  (A1),D3
00002A94  0243 0038               2513                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
00002A98  E60B                    2514                      LSR.B   #3,D3                   *holds the mode
00002A9A                          2515  
00002A9A  1E19                    2516                      MOVE.B  (A1)+,D7
00002A9C  1819                    2517                      MOVE.B  (A1)+,D4                *register
00002A9E  0204 0007               2518                      ANDI.B  #%00000111,D4           *We only care about the last beat (D0 - D7)
00002AA2                          2519                      
00002AA2                          2520                    
00002AA2                          2521  
00002AA2  4247                    2522                      CLR     D7
00002AA4                          2523                      
00002AA4                          2524  DETERMINE_MODE                                      *here we will determine the mode
00002AA4                          2525                                                      *the only effective addresses are (An), (xxx).w and (xxx).l
00002AA4                          2526                                                      
00002AA4  B63C 0002               2527                     CMP.B    #%010,D3
00002AA8  6700 0022               2528                     BEQ      JSR_MODE_VALID          *the mode is valid
00002AAC  B63C 0007               2529                     CMP.B    #%111,D3        
00002AB0  6700 0006               2530                     BEQ      JSR_VALIDATE_REG        *validate the register, 
00002AB4  6000 00AA               2531                     BRA      JSR_DECODE_ERR          *its error other wise
00002AB8                          2532                     
00002AB8                          2533  JSR_VALIDATE_REG                                    *this will the absolute value type
00002AB8                          2534                                                      *if its not (xxx).w or (xxx).l,erro
00002AB8  B83C 0000               2535                     CMP.B    #%000,D4
00002ABC  6700 000E               2536                     BEQ      JSR_MODE_VALID          *(xxx).w valid
00002AC0  B83C 0001               2537                     CMP.B    #%001,D4
00002AC4  6700 0006               2538                     BEQ      JSR_MODE_VALID          *(xxx).l valid
00002AC8  6000 0096               2539                     BRA      JSR_DECODE_ERR          *ERROR
00002ACC                          2540                     
00002ACC                          2541  JSR_MODE_VALID                                      *at this point, everything is good, lets print
00002ACC  6000 0002               2542                     BRA      JSR_PRINT
00002AD0                          2543                     
00002AD0                          2544  JSR_PRINT                                           *takes care of the print
00002AD0  B63C 0002               2545                     CMP.B    #%010,D3
00002AD4  6700 001E               2546                     BEQ      JSR010_PRINT            *branch to print An
00002AD8  B63C 0007               2547                     CMP.B    #%111,D3
00002ADC  6700 0006               2548                     BEQ      JSR_GET_ABSOLUTE        *branch to print (xxx).w or (xxx).l
00002AE0  6000 007E               2549                     BRA      JSR_DECODE_ERR
00002AE4                          2550                     
00002AE4                          2551  JSR_GET_ABSOLUTE                                    *tells us how much we need to snag
00002AE4  B83C 0000               2552                     CMP.B     #%000,D4
00002AE8  3A11                    2553                     MOVE.W    (A1),D5                *snag word
00002AEA  B83C 0001               2554                     CMP.B     #%001,D4
00002AEE  2A11                    2555                     MOVE.L    (A1),D5                *snag long
00002AF0  6000 0044               2556                     BRA       JSR111_PRINT           *jump to print
00002AF4                          2557                     
00002AF4                          2558  JSR010_PRINT      
00002AF4                          2559                      
00002AF4  41F9 000051A6           2560                     LEA      JSRSTRING,A0
00002AFA  4EB9 00004428           2561                     JSR      PRINT_SR                *prints JSR
00002B00  4EB9 0000434E           2562                     JSR      SHIFTCURSOR
00002B06  41F9 00005211           2563                     LEA      LPARENSTRING,A0
00002B0C  4EB9 00004428           2564                     JSR      PRINT_SR                *print (
00002B12  41F9 0000520D           2565                     LEA      ASTRING,A0
00002B18  4EB9 00004428           2566                     JSR      PRINT_SR                *print A
00002B1E  2E04                    2567                     MOVE.L   D4,D7
00002B20  4EB9 0000443A           2568                     JSR      PRINT_HEX               *prints(0 - 7)
00002B26  41F9 00005213           2569                     LEA      RPARENSTRING,A0
00002B2C  4EB9 00004428           2570                     JSR      PRINT_SR                *prints )
00002B32  6000 0034               2571                     BRA      JSR_DECODE_DONE
00002B36                          2572                     
00002B36                          2573  JSR111_PRINT       
00002B36                          2574                                                            
00002B36  41F9 000051A6           2575                     LEA      JSRSTRING,A0
00002B3C  4EB9 00004428           2576                     JSR      PRINT_SR                *prints JSR 
00002B42  4EB9 0000434E           2577                     JSR      SHIFTCURSOR
00002B48  41F9 00005209           2578                     LEA      DOLLARSTRING,A0
00002B4E  4EB9 00004428           2579                     JSR      PRINT_SR
00002B54  2E05                    2580                     MOVE.L   D5,D7   
00002B56  4EB9 0000443A           2581                     JSR      PRINT_HEX               *print the absolute value
00002B5C  6000 000A               2582                     BRA      JSR_DECODE_DONE
00002B60                          2583  
00002B60  4EB9 000042B4           2584  JSR_DECODE_ERR      JSR     PRINTLINE_SR
00002B66  4E75                    2585                      RTS
00002B68                          2586  JSR_DECODE_DONE                                     * we done
00002B68  41F9 0000513A           2587                      LEA     LINEEND,A0
00002B6E  4EB9 00004428           2588                      JSR     PRINT_SR
00002B74  4E75                    2589                      RTS                                                      
00002B76                          2590  
00002B76                          2591  
00002B76                          2592  
00002B76                          2593  
00002B76                          2594  
00002B76                          2595  
00002B76                          2596  
00002B76                          2597  
00002B76                          2598  
00002B76                          2599  -------------------- end include --------------------
00002B76                          2600  LEA_SR                  INCLUDE     "LEAdecode.X68"
00002B76  4280                    2601                      CLR.L   D0
00002B78  4281                    2602                      CLR.L   D1
00002B7A  4282                    2603                      CLR.L   D2
00002B7C  4283                    2604                      CLR.L   D3
00002B7E  4284                    2605                      CLR.L   D4
00002B80  4285                    2606                      CLR.L   D5
00002B82  4286                    2607                      CLR.L   D6
00002B84  4287                    2608                      CLR.L   D7
00002B86  43F9 00010000           2609                      LEA     LINESTARTLOC,A1
00002B8C                          2610  
00002B8C                          2611  
00002B8C  3211                    2612                      MOVE.W  (A1),D1                 *check if it islea
00002B8E  0241 0180               2613                      ANDI.W  #%0000000110000000,D1   *we need only the two bits in the middle
00002B92  EE49                    2614                      LSR.W   #7,D1
00002B94                          2615                      
00002B94  1411                    2616                      MOVE.B  (A1),D2                 *address register
00002B96  0202 000E               2617                      ANDI.B  #%00001110,D2           *We only need the address register
00002B9A  E20A                    2618                      LSR.B   #1,D2
00002B9C                          2619  
00002B9C                          2620                  
00002B9C                          2621  
00002B9C  3611                    2622                      MOVE.W  (A1),D3                 *mode
00002B9E  0243 0038               2623                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
00002BA2  E60B                    2624                      LSR.B   #3,D3
00002BA4                          2625  
00002BA4  1E19                    2626                      MOVE.B  (A1)+,D7                *we use it to check for CLR
00002BA6  0207 0001               2627                      ANDI.B  #%00000001,D7           *we need only the last digit
00002BAA                          2628                      
00002BAA  1C11                    2629                      MOVE.B  (A1),D6                 *D6 holds the bit that determine whether its JSR or JMP
00002BAC  0206 0040               2630                      ANDI.B  #%01000000,D6
00002BB0  EC0E                    2631                      LSR.B   #6,D6                   *shift the byte
00002BB2                          2632                              
00002BB2  1819                    2633                      MOVE.B  (A1)+,D4                *register
00002BB4  0204 0007               2634                      ANDI.B  #%00000111,D4           *We only care about the last bit
00002BB8                          2635                      
00002BB8                          2636                
00002BB8  B23C 0001               2637                      CMP.B   #%01,D1                 *if the bits at D1 are 01 it could be JSR or JMP
00002BBC  6700 001E               2638                      BEQ     CHECK_FOR_JSR           *branch to see if it is a JSR
00002BC0  6000 0002               2639                      BRA     CHECK_FOR_CLR           *it could be CLR
00002BC4                          2640                      
00002BC4                          2641  CHECK_FOR_CLR                                       *it could be clear
00002BC4  BE3C 0001               2642                      CMP.B   #%1,D7
00002BC8  6700 002E               2643                      BEQ     LEA_MODE                *Its load
00002BCC  6000 0002               2644                      BRA     COULD_BECLR             *It could be CLR 
00002BD0                          2645  
00002BD0                          2646  COULD_BECLR                                         *Check if it is CLR
00002BD0  B43C 0001               2647                      CMP.B   #%001,D2                *check the address register
00002BD4  6700 FB4C               2648                      BEQ     CLR_SR                  *its CLR
00002BD8  6000 0100               2649                      BRA     LEA_DECODE_ERR          *otherwise its error          
00002BDC                          2650                      
00002BDC                          2651                      
00002BDC                          2652                      
00002BDC                          2653  CHECK_FOR_JSR                                       *check if its JSR
00002BDC  B43C 0007               2654                      CMP.B   #%111,D2
00002BE0  6700 0006               2655                      BEQ     CHECK_FOR_ERR           *check if it it is JMP
00002BE4  6000 00F4               2656                      BRA     LEA_DECODE_ERR
00002BE8                          2657                      
00002BE8                          2658  
00002BE8                          2659  CHECK_FOR_ERR   
00002BE8  BC3C 0001               2660                      CMP.B   #%1,D6                  *If this bit is 1, its jmp, not required for this assignment
00002BEC  6700 00EC               2661                      BEQ     LEA_DECODE_ERR          *its ERROR
00002BF0  6000 FE8A               2662                      BRA     JSR_SR                  *its jSR
00002BF4                          2663                      
00002BF4  4246                    2664                      CLR     D6
00002BF6  4247                    2665                      CLR     D7
00002BF8                          2666  
00002BF8                          2667  
00002BF8                          2668  
00002BF8                          2669  LEA_MODE                                            *here we will determine the mode
00002BF8                          2670                                                      *the only effective addresses are (An), (xxx).w and (xxx).l
00002BF8                          2671                                                      
00002BF8  B63C 0002               2672                     CMP.B    #%010,D3
00002BFC  6700 0022               2673                     BEQ      LEA_MODE_VALID          *the mode is valid
00002C00  B63C 0007               2674                     CMP.B    #%111,D3        
00002C04  6700 0006               2675                     BEQ      LEA_VALIDATE_REG        *validate the register, 
00002C08  6000 00D0               2676                     BRA      LEA_DECODE_ERR          *its error other wise
00002C0C                          2677                     
00002C0C                          2678  LEA_VALIDATE_REG                                    *this will the absolute value type
00002C0C                          2679                                                      *if its not (xxx).w or (xxx).l,erro
00002C0C  B83C 0000               2680                     CMP.B    #%000,D4
00002C10  6700 000E               2681                     BEQ      LEA_MODE_VALID          *(xxx).w valid
00002C14  B83C 0001               2682                     CMP.B    #%001,D4
00002C18  6700 0006               2683                     BEQ      LEA_MODE_VALID          *(xxx).l valid
00002C1C  6000 00BC               2684                     BRA      LEA_DECODE_ERR          *ERROR
00002C20                          2685  
00002C20                          2686  
00002C20                          2687  LEA_MODE_VALID                                      *at this point, everything is good, lets print
00002C20  6000 0002               2688                     BRA      LEA_PRINT
00002C24                          2689                     
00002C24                          2690  LEA_PRINT                                           *takes care of the print
00002C24  B63C 0002               2691                     CMP.B    #%010,D3
00002C28  6700 001E               2692                     BEQ      LEA010_PRINT            *branch to print An
00002C2C  B63C 0007               2693                     CMP.B    #%111,D3
00002C30  6700 0006               2694                     BEQ      LEA_GET_ABSOLUTE        *branch to print (xxx).w or (xxx).l
00002C34  6000 00A4               2695                     BRA      LEA_DECODE_ERR
00002C38                          2696                     
00002C38                          2697  LEA_GET_ABSOLUTE                                    *tells us how much we need to snag
00002C38  B83C 0000               2698                     CMP.B     #%000,D4
00002C3C  3A11                    2699                     MOVE.W    (A1),D5                *snag word
00002C3E  B83C 0001               2700                     CMP.B     #%001,D4
00002C42  2A11                    2701                     MOVE.L    (A1),D5                *snag long
00002C44  6000 0044               2702                     BRA       LEA111_PRINT           *jump to print
00002C48                          2703                     
00002C48                          2704  LEA010_PRINT       
00002C48  41F9 000051AA           2705                     LEA      LEASTRING,A0
00002C4E  4EB9 00004428           2706                     JSR      PRINT_SR                *prints LEA
00002C54  4EB9 0000434E           2707                     JSR      SHIFTCURSOR
00002C5A  41F9 00005211           2708                     LEA      LPARENSTRING,A0
00002C60  4EB9 00004428           2709                     JSR      PRINT_SR                *print (
00002C66  41F9 0000520D           2710                     LEA      ASTRING,A0
00002C6C  4EB9 00004428           2711                     JSR      PRINT_SR                *print A
00002C72  2E04                    2712                     MOVE.L   D4,D7
00002C74  4EB9 0000443A           2713                     JSR      PRINT_HEX               *prints(0 - 7)
00002C7A  41F9 00005213           2714                     LEA      RPARENSTRING,A0
00002C80  4EB9 00004428           2715                     JSR      PRINT_SR                *prints )
00002C86  6000 002C               2716                     BRA      PRINT_LEA_RMN
00002C8A                          2717                     
00002C8A                          2718  LEA111_PRINT       
00002C8A                          2719                                                            
00002C8A  41F9 000051AA           2720                     LEA      LEASTRING,A0
00002C90  4EB9 00004428           2721                     JSR      PRINT_SR                *prints LEA 
00002C96  4EB9 0000434E           2722                     JSR      SHIFTCURSOR
00002C9C  41F9 00005209           2723                     LEA      DOLLARSTRING,A0
00002CA2  4EB9 00004428           2724                     JSR      PRINT_SR
00002CA8  2E05                    2725                     MOVE.L   D5,D7   
00002CAA  4EB9 0000443A           2726                     JSR      PRINT_HEX               *print the absolute value
00002CB0  6000 0002               2727                     BRA      PRINT_LEA_RMN           *branch to print the rest
00002CB4                          2728      
00002CB4                          2729  PRINT_LEA_RMN      
00002CB4  4247                    2730                      CLR     D7                                *print the destination
00002CB6  41F9 000051FF           2731                      LEA     COMMASTRING,A0
00002CBC  4EB9 00004428           2732                      JSR     PRINT_SR                *prints comma
00002CC2  41F9 0000520D           2733                      LEA     ASTRING,A0
00002CC8  4EB9 00004428           2734                      JSR     PRINT_SR                *prinst A
00002CCE  2E02                    2735                      MOVE.L  D2,D7
00002CD0  4EB9 0000443A           2736                      JSR     PRINT_HEX               *prinst (0 - 7)
00002CD6  6000 000A               2737                      BRA     LEA_DECODE_DONE
00002CDA                          2738                      
00002CDA                          2739  
00002CDA  4EB9 000042B4           2740  LEA_DECODE_ERR      JSR     PRINTLINE_SR
00002CE0  4E75                    2741                      RTS
00002CE2                          2742  LEA_DECODE_DONE                                     * we done
00002CE2  41F9 0000513A           2743                      LEA     LINEEND,A0
00002CE8  4EB9 00004428           2744                      JSR     PRINT_SR
00002CEE  4E75                    2745                      RTS                                                      
00002CF0                          2746  
00002CF0                          2747  
00002CF0                          2748  
00002CF0                          2749  
00002CF0                          2750  
00002CF0                          2751  
00002CF0                          2752  
00002CF0                          2753  
00002CF0                          2754  
00002CF0                          2755  
00002CF0                          2756  
00002CF0                          2757  
00002CF0                          2758  
00002CF0                          2759  
00002CF0                          2760  
00002CF0                          2761  -------------------- end include --------------------
00002CF0                          2762  MOVEDECODE_SR           INCLUDE     "MOVEdecode.X68"
00002CF0  4280                    2763                  CLR.L   D0
00002CF2  4281                    2764                  CLR.L   D1
00002CF4  4282                    2765                  CLR.L   D2
00002CF6  4283                    2766                  CLR.L   D3
00002CF8  4284                    2767                  CLR.L   D4
00002CFA  4285                    2768                  CLR.L   D5
00002CFC  4286                    2769                  CLR.L   D6
00002CFE  4287                    2770                  CLR.L   D7
00002D00  43F9 00010000           2771                  LEA     LINESTARTLOC,A1
00002D06                          2772  
00002D06                          2773                                          *first get size
00002D06  1011                    2774                  MOVE.B  (A1),D0
00002D08  E808                    2775                  LSR.B   #4,D0
00002D0A  0200 0003               2776                  ANDI.B  #%00000011,D0
00002D0E                          2777  
00002D0E                          2778                                          *dest reg
00002D0E  1211                    2779                  MOVE.B  (A1),D1
00002D10  E209                    2780                  LSR.B   #1,D1
00002D12  0201 0007               2781                  ANDI.B  #%00000111,D1
00002D16                          2782  
00002D16                          2783                                          *dest mode, first bit is at end of first byte :c
00002D16  1E19                    2784                  MOVE.B  (A1)+,D7
00002D18  0207 0001               2785                  ANDI.B  #%00000001,D7
00002D1C  E50F                    2786                  LSL.B   #2,D7
00002D1E                          2787  
00002D1E  1411                    2788                  MOVE.B  (A1),D2
00002D20  EC0A                    2789                  LSR.B   #6,D2           *Just want first two bits
00002D22  8407                    2790                  OR.B    D7,D2           *Add in that first bit
00002D24  4287                    2791                  CLR.L   D7
00002D26                          2792  
00002D26                          2793                                          *source mode
00002D26  1611                    2794                  MOVE.B  (A1),D3
00002D28  E60B                    2795                  LSR.B   #3,D3
00002D2A  0203 0007               2796                  ANDI.B  #%00000111,D3
00002D2E                          2797  
00002D2E                          2798                                          *source reg
00002D2E  1819                    2799                  MOVE.B  (A1)+,D4
00002D30  0204 0007               2800                  ANDI.B  #%00000111,D4
00002D34                          2801  
00002D34                          2802  
00002D34                          2803  MOVEVALIDITY                            *First, is dest mode valid?
00002D34  B43C 0000               2804                  CMP.B   #%000,D2
00002D38  6700 002E               2805                  BEQ     MOVEDESTMVALID
00002D3C  B43C 0002               2806                  CMP.B   #%010,D2
00002D40  6700 0026               2807                  BEQ     MOVEDESTMVALID
00002D44  B43C 0003               2808                  CMP.B   #%011,D2
00002D48  6700 001E               2809                  BEQ     MOVEDESTMVALID
00002D4C  B43C 0004               2810                  CMP.B   #%100,D2
00002D50  6700 0016               2811                  BEQ     MOVEDESTMVALID
00002D54  B43C 0007               2812                  CMP.B   #%111,D2
00002D58  6700 000E               2813                  BEQ     MOVEDESTMVALID
00002D5C  B43C 0001               2814                  CMP.B   #%001,D2
00002D60  6700 0006               2815                  BEQ     MOVEDESTMVALID
00002D64  6000 0142               2816                  BRA     MOVEDECODE_ERR
00002D68                          2817  
00002D68                          2818  MOVEDESTMVALID                          *Is dest register valid? Should be 0-7, or 0-6 if move
00002D68  B43C 0001               2819                  CMP.B   #%001,D2
00002D6C  6700 001E               2820                  BEQ     MOVEDRCANBEADD
00002D70  B43C 0002               2821                  CMP.B   #%010,D2
00002D74  6700 0016               2822                  BEQ     MOVEDRCANBEADD
00002D78  B43C 0003               2823                  CMP.B   #%011,D2
00002D7C  6700 000E               2824                  BEQ     MOVEDRCANBEADD
00002D80  B43C 0004               2825                  CMP.B   #%100,D2
00002D84  6700 0006               2826                  BEQ     MOVEDRCANBEADD
00002D88  6000 000E               2827                  BRA     MOVEDESTRVALID
00002D8C                          2828  
00002D8C  B23C 0007               2829  MOVEDRCANBEADD  CMP.B   #%111,D1        *If dest register can be an address, it can't be 7
00002D90  6700 0116               2830                  BEQ     MOVEDECODE_ERR
00002D94  6000 0002               2831                  BRA     MOVEDESTRVALID
00002D98                          2832  
00002D98                          2833  MOVEDESTRVALID                          *Is source mode valid?
00002D98  B63C 0000               2834                  CMP.B   #%000,D3
00002D9C  6700 0036               2835                  BEQ     MOVESOURCEMV
00002DA0  B63C 0002               2836                  CMP.B   #%010,D3
00002DA4  6700 002E               2837                  BEQ     MOVESOURCEMV
00002DA8  B63C 0001               2838                  CMP.B   #%001,D3
00002DAC  6700 0026               2839                  BEQ     MOVESOURCEMV
00002DB0  B63C 0002               2840                  CMP.B   #%010,D3
00002DB4  6700 001E               2841                  BEQ     MOVESOURCEMV
00002DB8  B63C 0003               2842                  CMP.B   #%011,D3
00002DBC  6700 0016               2843                  BEQ     MOVESOURCEMV
00002DC0  B63C 0004               2844                  CMP.B   #%100,D3
00002DC4  6700 000E               2845                  BEQ     MOVESOURCEMV
00002DC8  B63C 0007               2846                  CMP.B   #%111,D3
00002DCC  6700 0006               2847                  BEQ     MOVESOURCEMV
00002DD0  6000 00D6               2848                  BRA     MOVEDECODE_ERR
00002DD4                          2849  
00002DD4                          2850  MOVESOURCEMV                            *Is source register valid?
00002DD4  B63C 0001               2851                  CMP.B   #%001,D3
00002DD8  6700 001E               2852                  BEQ     MOVESRCANBEADD
00002DDC  B63C 0002               2853                  CMP.B   #%010,D3
00002DE0  6700 0016               2854                  BEQ     MOVESRCANBEADD
00002DE4  B63C 0003               2855                  CMP.B   #%011,D3
00002DE8  6700 000E               2856                  BEQ     MOVESRCANBEADD
00002DEC  B63C 0004               2857                  CMP.B   #%100,D3
00002DF0  6700 0006               2858                  BEQ     MOVESRCANBEADD
00002DF4  6000 000E               2859                  BRA     MOVEIMMSOURCE
00002DF8                          2860  
00002DF8                          2861  
00002DF8  B83C 0007               2862  MOVESRCANBEADD  CMP.B   #%111,D4        *If source register can be an address, it can't be 7
00002DFC  6700 00AA               2863                  BEQ     MOVEDECODE_ERR
00002E00  6000 0002               2864                  BRA     MOVEIMMSOURCE
00002E04                          2865  
00002E04                          2866  MOVEIMMSOURCE                           *First check if our register is valid (could be (xxx).W, (xxx).L, or #<data>)
00002E04  B63C 0007               2867                  CMP.B   #%111,D3
00002E08  6600 004E               2868                  BNE     MOVEDEST
00002E0C  B83C 0000               2869                  CMP.B   #%000,D4
00002E10  6700 0016               2870                  BEQ     MOVEIMMVR
00002E14  B83C 0001               2871                  CMP.B   #%001,D4
00002E18  6700 000E               2872                  BEQ     MOVEIMMVR
00002E1C  B83C 0004               2873                  CMP.B   #%100,D4
00002E20  6700 0006               2874                  BEQ     MOVEIMMVR
00002E24  6000 0082               2875                  BRA     MOVEDECODE_ERR
00002E28                          2876  MOVEIMMVR                               *Now we need to figure out how much data to snag after, should we get a word or a long?
00002E28  B83C 0004               2877                  CMP.B   #%100,D4
00002E2C  6700 0012               2878                  BEQ     MOVESPOUND
00002E30  B83C 0000               2879                  CMP.B   #%000,D4
00002E34  6700 0016               2880                  BEQ     MOVESGETWORD
00002E38  B83C 0001               2881                  CMP.B   #%001,D4
00002E3C  6700 0014               2882                  BEQ     MOVESGETLONG
00002E40                          2883  MOVESPOUND                              *The source is a literal, how long is determined by size
00002E40  B03C 0002               2884                  CMP.B   #%10,D0
00002E44  6700 000C               2885                  BEQ     MOVESGETLONG
00002E48  6000 0002               2886                  BRA     MOVESGETWORD
00002E4C                          2887  MOVESGETWORD                            *Get a word!
00002E4C  3A19                    2888                  MOVE.W  (A1)+,D5
00002E4E  6000 0008               2889                  BRA     MOVEDEST
00002E52                          2890  MOVESGETLONG                            *Get a long!
00002E52  2A19                    2891                  MOVE.L  (A1)+,D5
00002E54  6000 0002               2892                  BRA     MOVEDEST
00002E58                          2893  
00002E58  B43C 0007               2894  MOVEDEST        CMP.B   #%111,D2
00002E5C  6600 0046               2895                  BNE     MOVEVERIFIED
00002E60  B23C 0002               2896                  CMP.B   #%10,D1
00002E64  6700 000C               2897                  BEQ     MOVEDGETLONG
00002E68  6000 0002               2898                  BRA     MOVEDGETWORD
00002E6C                          2899  
00002E6C  3C19                    2900  MOVEDGETWORD    MOVE.W  (A1)+,D6
00002E6E  6000 0008               2901                  BRA     MOVECHECKLENGTH
00002E72  2C19                    2902  MOVEDGETLONG    MOVE.L  (A1)+,D6
00002E74  6000 0002               2903                  BRA     MOVECHECKLENGTH
00002E78                          2904  
00002E78  48E7 FF00               2905  MOVECHECKLENGTH MOVEM.L D0-D7,-(SP)
00002E7C  2009                    2906                  MOVE.L  A1,D0
00002E7E  2239 00010000           2907                  MOVE.L  LINESTARTLOC,D1
00002E84  9081                    2908                  SUB.L   D1,D0           *D0 now has the length of the instruction in bytes
00002E86  C0FC 0008               2909                  MULU    #8,D0           *Now D0 has the number of bits
00002E8A  0280 000000FF           2910                  ANDI.L  #$000000FF,D0
00002E90  1439 00005230           2911                  MOVE.B  (LINELENGTH),D2 *D2 has line length in bits
00002E96  B400                    2912                  CMP.B   D0,D2
00002E98  6600 000E               2913                  BNE     MOVEDECODE_ERR
00002E9C  4CDF 00FF               2914                  MOVEM.L (SP)+,D0-D7
00002EA0  6000 0002               2915                  BRA     MOVEVERIFIED
00002EA4                          2916  
00002EA4                          2917  
00002EA4  6000 000C               2918  MOVEVERIFIED    BRA     MOVEDECODE_PRNT
00002EA8                          2919  
00002EA8                          2920                                          *If any data can't be verified or is invalid, throw error
00002EA8  4EB9 000042B4           2921  MOVEDECODE_ERR  JSR     PRINTLINE_SR
00002EAE  6000 0362               2922                  BRA     MOVEDECODE_DONE
00002EB2                          2923  
00002EB2                          2924  
00002EB2                          2925                                          *print add
00002EB2                          2926  
00002EB2                          2927                                          *After all of the data is separated and verified, we start printing
00002EB2  B43C 0001               2928  MOVEDECODE_PRNT CMP.B   #%001,D2
00002EB6  6700 0012               2929                  BEQ     ISMOVEA
00002EBA  41F9 0000517D           2930                  LEA     MOVESTRING,A0
00002EC0  4EB9 00004428           2931                  JSR     PRINT_SR
00002EC6  6000 000E               2932                  BRA     MOVEAFP
00002ECA  41F9 000051D4           2933  ISMOVEA         LEA     MOVEASTRING,A0
00002ED0  4EB9 00004428           2934                  JSR     PRINT_SR
00002ED6  B03C 0001               2935  MOVEAFP         CMP.B   #%01,D0
00002EDA  6700 0012               2936                  BEQ     MOVEB
00002EDE  B03C 0003               2937                  CMP.B   #%11,D0
00002EE2  6700 001A               2938                  BEQ     MOVEW
00002EE6  B03C 0002               2939                  CMP.B   #%10,D0
00002EEA  6700 0022               2940                  BEQ     MOVEL
00002EEE                          2941  
00002EEE  41F9 000051F6           2942  MOVEB           LEA     BYTESTRING,A0
00002EF4  4EB9 00004428           2943                  JSR     PRINT_SR
00002EFA  6000 0022               2944                  BRA     MOVEAS
00002EFE  41F9 000051F9           2945  MOVEW           LEA     WORDSTRING,A0
00002F04  4EB9 00004428           2946                  JSR     PRINT_SR
00002F0A  6000 0012               2947                  BRA     MOVEAS
00002F0E  41F9 000051FC           2948  MOVEL           LEA     LONGSTRING,A0
00002F14  4EB9 00004428           2949                  JSR     PRINT_SR
00002F1A  6000 0002               2950                  BRA     MOVEAS
00002F1E                          2951  MOVEAS                                  *Done displaying size, now display source
00002F1E  4EB9 0000434E           2952                  JSR     SHIFTCURSOR
00002F24  B63C 0000               2953                  CMP.B   #%000,D3
00002F28  6700 002E               2954                  BEQ     MOVES000
00002F2C  B63C 0001               2955                  CMP.B   #%001,D3
00002F30  6700 003E               2956                  BEQ     MOVES001
00002F34  B63C 0002               2957                  CMP.B   #%010,D3
00002F38  6700 004E               2958                  BEQ     MOVES010
00002F3C  B63C 0003               2959                  CMP.B   #%011,D3
00002F40  6700 0076               2960                  BEQ     MOVES011
00002F44  B63C 0007               2961                  CMP.B   #%111,D3
00002F48  6700 00AA               2962                  BEQ     MOVES111
00002F4C  B63C 0004               2963                  CMP.B   #%100,D3
00002F50  6700 013C               2964                  BEQ     MOVES100
00002F54                          2965  
00002F54  6000 0174               2966                  BRA     MOVEPRNTDEST
00002F58                          2967  
00002F58                          2968  MOVES000                                *Source is data register
00002F58  41F9 0000520F           2969                  LEA     DSTRING,A0
00002F5E  4EB9 00004428           2970                  JSR     PRINT_SR
00002F64  2E04                    2971                  MOVE.L  D4,D7
00002F66  4EB9 0000443A           2972                  JSR     PRINT_HEX
00002F6C  6000 015C               2973                  BRA     MOVEPRNTDEST
00002F70                          2974  MOVES001                                *Source is address register
00002F70  41F9 0000520D           2975                  LEA     ASTRING,A0
00002F76  4EB9 00004428           2976                  JSR     PRINT_SR
00002F7C  2E04                    2977                  MOVE.L  D4,D7
00002F7E  4EB9 0000443A           2978                  JSR     PRINT_HEX
00002F84  6000 0144               2979                  BRA     MOVEPRNTDEST
00002F88                          2980  MOVES010                                *Address register indirect
00002F88  41F9 00005211           2981                  LEA     LPARENSTRING,A0
00002F8E  4EB9 00004428           2982                  JSR     PRINT_SR
00002F94  41F9 0000520D           2983                  LEA     ASTRING,A0
00002F9A  4EB9 00004428           2984                  JSR     PRINT_SR
00002FA0  2E04                    2985                  MOVE.L  D4,D7
00002FA2  4EB9 0000443A           2986                  JSR     PRINT_HEX
00002FA8  41F9 00005213           2987                  LEA     RPARENSTRING,A0
00002FAE  4EB9 00004428           2988                  JSR     PRINT_SR
00002FB4  6000 0114               2989                  BRA     MOVEPRNTDEST
00002FB8                          2990  MOVES011                                *Address register indirect postincrement
00002FB8  41F9 00005211           2991                  LEA     LPARENSTRING,A0
00002FBE  4EB9 00004428           2992                  JSR     PRINT_SR
00002FC4  41F9 0000520D           2993                  LEA     ASTRING,A0
00002FCA  4EB9 00004428           2994                  JSR     PRINT_SR
00002FD0  2E04                    2995                  MOVE.L  D4,D7
00002FD2  4EB9 0000443A           2996                  JSR     PRINT_HEX
00002FD8  41F9 00005213           2997                  LEA     RPARENSTRING,A0
00002FDE  4EB9 00004428           2998                  JSR     PRINT_SR
00002FE4  41F9 00005215           2999                  LEA     PLUSSTRING,A0
00002FEA  4EB9 00004428           3000                  JSR     PRINT_SR
00002FF0  6000 00D8               3001                  BRA     MOVEPRNTDEST
00002FF4                          3002  MOVES111                                *Immediate source, could be immediate data or word/long address
00002FF4  B83C 0000               3003                  CMP.B   #%000,D4
00002FF8  6700 0012               3004                  BEQ     MOVES111000
00002FFC  B83C 0001               3005                  CMP.B   #%001,D4
00003000  6700 0024               3006                  BEQ     MOVES111001
00003004  B83C 0004               3007                  CMP.B   #%100,D4
00003008  6700 0036               3008                  BEQ     MOVES111100
0000300C                          3009  MOVES111000                             *Is word address
0000300C  41F9 00005209           3010                  LEA     DOLLARSTRING,A0
00003012  4EB9 00004428           3011                  JSR     PRINT_SR
00003018  4287                    3012                  CLR.L   D7
0000301A  3E05                    3013                  MOVE.W  D5,D7
0000301C  4EB9 0000443A           3014                  JSR     PRINT_HEX
00003022  6000 00A6               3015                  BRA     MOVEPRNTDEST
00003026                          3016  MOVES111001                             *Is long address
00003026  41F9 00005209           3017                  LEA     DOLLARSTRING,A0
0000302C  4EB9 00004428           3018                  JSR     PRINT_SR
00003032  4287                    3019                  CLR.L   D7
00003034  2E05                    3020                  MOVE.L  D5,D7
00003036  4EB9 0000443A           3021                  JSR     PRINT_HEX
0000303C  6000 008C               3022                  BRA     MOVEPRNTDEST
00003040                          3023  MOVES111100                             *Is immediate data
00003040  41F9 00005207           3024                  LEA     POUNDSTRING,A0
00003046  4EB9 00004428           3025                  JSR     PRINT_SR
0000304C  41F9 00005209           3026                  LEA     DOLLARSTRING,A0
00003052  4EB9 00004428           3027                  JSR     PRINT_SR
00003058  4287                    3028                  CLR.L   D7
0000305A  B03C 0001               3029                  CMP.B   #%01,D0
0000305E  6700 0012               3030                  BEQ     MOVES111100B
00003062  B03C 0003               3031                  CMP.B   #%11,D0
00003066  6700 0010               3032                  BEQ     MOVES111100W
0000306A  B03C 0002               3033                  CMP.B   #%10,D0
0000306E  6700 000E               3034                  BEQ     MOVES111100L
00003072  1E05                    3035  MOVES111100B    MOVE.B  D5,D7
00003074  6000 000E               3036                  BRA     MOVES111100CONT
00003078  3E05                    3037  MOVES111100W    MOVE.W  D5,D7
0000307A  6000 0008               3038                  BRA     MOVES111100CONT
0000307E  2E05                    3039  MOVES111100L    MOVE.L  D5,D7
00003080  6000 0002               3040                  BRA     MOVES111100CONT
00003084                          3041  MOVES111100CONT
00003084  4EB9 0000443A           3042                  JSR     PRINT_HEX
0000308A  6000 003E               3043                  BRA     MOVEPRNTDEST
0000308E                          3044  MOVES100                                *Source is address with predecrement
0000308E  41F9 00005217           3045                  LEA     MINUSSTRING,A0
00003094  4EB9 00004428           3046                  JSR     PRINT_SR
0000309A  41F9 00005211           3047                  LEA     LPARENSTRING,A0
000030A0  4EB9 00004428           3048                  JSR     PRINT_SR
000030A6  41F9 0000520D           3049                  LEA     ASTRING,A0
000030AC  4EB9 00004428           3050                  JSR     PRINT_SR
000030B2  2E04                    3051                  MOVE.L  D4,D7
000030B4  4EB9 0000443A           3052                  JSR     PRINT_HEX
000030BA  41F9 00005213           3053                  LEA     RPARENSTRING,A0
000030C0  4EB9 00004428           3054                  JSR     PRINT_SR
000030C6  6000 0002               3055                  BRA     MOVEPRNTDEST
000030CA                          3056  
000030CA                          3057  MOVEPRNTDEST                            *Now print the destination
000030CA  41F9 000051FF           3058                  LEA     COMMASTRING,A0
000030D0  4EB9 00004428           3059                  JSR     PRINT_SR
000030D6  B43C 0000               3060                  CMP.B   #%000,D2
000030DA  6700 002A               3061                  BEQ     MOVED000
000030DE  B43C 0001               3062                  CMP.B   #%001,D2
000030E2  6700 003A               3063                  BEQ     MOVED001
000030E6  B43C 0002               3064                  CMP.B   #%010,D2
000030EA  6700 004A               3065                  BEQ     MOVED010
000030EE  B43C 0003               3066                  CMP.B   #%011,D2
000030F2  6700 0072               3067                  BEQ     MOVED011
000030F6  B43C 0004               3068                  CMP.B   #%100,D2
000030FA  6700 00A6               3069                  BEQ     MOVED100
000030FE  B43C 0007               3070                  CMP.B   #%111,D2
00003102  6700 00DA               3071                  BEQ     MOVED111
00003106                          3072  
00003106                          3073  MOVED000                                *Destination mode is just data register
00003106  41F9 0000520F           3074                  LEA     DSTRING,A0
0000310C  4EB9 00004428           3075                  JSR     PRINT_SR
00003112  2E01                    3076                  MOVE.L  D1,D7
00003114  4EB9 0000443A           3077                  JSR     PRINT_HEX
0000311A  6000 00F6               3078                  BRA     MOVEDECODE_DONE
0000311E                          3079  
0000311E                          3080  MOVED001                                *Destination is just address register
0000311E  41F9 0000520D           3081                  LEA     ASTRING,A0
00003124  4EB9 00004428           3082                  JSR     PRINT_SR
0000312A  2E01                    3083                  MOVE.L  D1,D7
0000312C  4EB9 0000443A           3084                  JSR     PRINT_HEX
00003132  6000 00DE               3085                  BRA     MOVEDECODE_DONE
00003136                          3086  MOVED010                                *Destination is address indirect
00003136  41F9 00005211           3087                  LEA     LPARENSTRING,A0
0000313C  4EB9 00004428           3088                  JSR     PRINT_SR
00003142  41F9 0000520D           3089                  LEA     ASTRING,A0
00003148  4EB9 00004428           3090                  JSR     PRINT_SR
0000314E  2E01                    3091                  MOVE.L  D1,D7
00003150  4EB9 0000443A           3092                  JSR     PRINT_HEX
00003156  41F9 00005213           3093                  LEA     RPARENSTRING,A0
0000315C  4EB9 00004428           3094                  JSR     PRINT_SR
00003162  6000 00AE               3095                  BRA     MOVEDECODE_DONE
00003166                          3096  MOVED011                                *Destination is address indirect postincrement
00003166  41F9 00005211           3097                  LEA     LPARENSTRING,A0
0000316C  4EB9 00004428           3098                  JSR     PRINT_SR
00003172  41F9 0000520D           3099                  LEA     ASTRING,A0
00003178  4EB9 00004428           3100                  JSR     PRINT_SR
0000317E  4EB9 00004428           3101                  JSR     PRINT_SR
00003184  2E01                    3102                  MOVE.L  D1,D7
00003186  41F9 00005213           3103                  LEA     RPARENSTRING,A0
0000318C  4EB9 00004428           3104                  JSR     PRINT_SR
00003192  41F9 00005215           3105                  LEA     PLUSSTRING,A0
00003198  4EB9 00004428           3106                  JSR     PRINT_SR
0000319E  6000 0072               3107                  BRA     MOVEDECODE_DONE
000031A2                          3108  MOVED100                                *Destination is address indirect predecrement
000031A2  41F9 00005217           3109                  LEA     MINUSSTRING,A0
000031A8  4EB9 00004428           3110                  JSR     PRINT_SR
000031AE  41F9 00005211           3111                  LEA     LPARENSTRING,A0
000031B4  4EB9 00004428           3112                  JSR     PRINT_SR
000031BA  41F9 0000520D           3113                  LEA     ASTRING,A0
000031C0  4EB9 00004428           3114                  JSR     PRINT_SR
000031C6  2E01                    3115                  MOVE.L  D1,D7
000031C8  4EB9 0000443A           3116                  JSR     PRINT_HEX
000031CE  41F9 00005213           3117                  LEA     RPARENSTRING,A0
000031D4  4EB9 00004428           3118                  JSR     PRINT_SR
000031DA  6000 0036               3119                  BRA     MOVEDECODE_DONE
000031DE                          3120  
000031DE                          3121  MOVED111                                *Destination is word or long address
000031DE  41F9 00005209           3122                  LEA     DOLLARSTRING,A0
000031E4  4EB9 00004428           3123                  JSR     PRINT_SR
000031EA  4287                    3124                  CLR.L   D7
000031EC  B23C 0000               3125                  CMP.B   #%000,D1
000031F0  6700 000A               3126                  BEQ     MOVED111W
000031F4  B23C 0001               3127                  CMP.B   #%001,D1
000031F8  6700 0008               3128                  BEQ     MOVED111L
000031FC                          3129  
000031FC  3E06                    3130  MOVED111W       MOVE.W  D6,D7
000031FE  6000 0008               3131                  BRA     MOVEDCONT
00003202  2E06                    3132  MOVED111L       MOVE.L  D6,D7
00003204  6000 0002               3133                  BRA     MOVEDCONT
00003208  4EB9 0000443A           3134  MOVEDCONT       JSR     PRINT_HEX
0000320E  6000 0002               3135                  BRA     MOVEDECODE_DONE
00003212                          3136  
00003212  41F9 0000513A           3137  MOVEDECODE_DONE LEA     LINEEND,A0
00003218  4EB9 00004428           3138                  JSR     PRINT_SR
0000321E  4E75                    3139                  RTS
00003220                          3140  
00003220                          3141  
00003220                          3142  -------------------- end include --------------------
00003220                          3143                          INCLUDE     "MOVEMdecode.X68"
00003220                          3144  
00003220  7400                    3145  MOVEMWTM_SR             MOVE.L      #$0,D2              * set size code: word
00003222  7600                    3146                          MOVE.L      #$0,D3              * det direction: reg to mem
00003224  6000 001A               3147                          BRA         VALIDATEMOVEM
00003228                          3148  
00003228                          3149  MOVEMLTM_SR                                             * move long from register to memory
00003228  7401                    3150                          MOVE.L      #$1,D2              * set size code: long
0000322A  7600                    3151                          MOVE.L      #$0,D3              * det direction: reg to mem
0000322C  6000 0012               3152                          BRA         VALIDATEMOVEM
00003230                          3153  
00003230                          3154  MOVEMWTR_SR                                             * move word from memory to register
00003230  7400                    3155                          MOVE.L      #$0,D2              * set size code: word
00003232  7601                    3156                          MOVE.L      #$1,D3              * det direction: reg to mem
00003234  6000 000A               3157                          BRA         VALIDATEMOVEM
00003238                          3158  
00003238                          3159  MOVEMLTR_SR                                             * move long from memory to register
00003238  7401                    3160                          MOVE.L      #$1,D2              * set size code: long
0000323A  7601                    3161                          MOVE.L      #1,D3               * det direction: reg to mem
0000323C  6000 0002               3162                          BRA         VALIDATEMOVEM
00003240                          3163  
00003240  B27C 0017               3164  VALIDATEMOVEM           CMP.W       #23,D1              * there must be exactly 22 (+1 for the tree) bits remaining
00003244  6600 014C               3165                          BNE         MOVEM_INVALID       * if not, it's invalid
00003248                          3166  
00003248  4283                    3167  SPLITMOVEM              CLR.L       D3                  * for direction
0000324A  4284                    3168                          CLR.L       D4                  * for mode
0000324C  4285                    3169                          CLR.L       D5                  * for reg number
0000324E  4286                    3170                          CLR.L       D6                  * reg bitmask
00003250  4287                    3171                          CLR.L       D7                  * for printing using PRINT_HEX
00003252                          3172  
00003252  2800                    3173                          MOVE.L      D0,D4               * extract the mode to D4
00003254  E48C                    3174                          LSR.L       #2,D4               * right justify 26 bits (16 for reg bitmask, 10 for tree)
00003256  E08C                    3175                          LSR.L       #8,D4               * "
00003258  E08C                    3176                          LSR.L       #8,D4               * "
0000325A  E08C                    3177                          LSR.L       #8,D4               * "
0000325C  2A04                    3178                          MOVE.L      D4,D5               * extract the register number to D5
0000325E  0285 00000003           3179                          ANDI.L      #$00000003,D5       * AND D5 with 00000003 for reg num (remove mode)
00003264  E68C                    3180                          LSR.L       #3,D4               * right justify D4 an additional 3 bits (29 total)
00003266                          3181                                                          * extract the register bitmask to D6
00003266  2C00                    3182                          MOVE.L      D0,D6               * copy bits to D6
00003268  E08E                    3183                          LSR.L       #8,D6               * right justify 10 bits
0000326A  E48E                    3184                          LSR.L       #2,D6               * "
0000326C  0286 0000FFFF           3185                          ANDI.L      #$0000FFFF,D6       * AND with 0000FFFF for register bitmask
00003272                          3186  
00003272  B83C 0002               3187  V_MOVEM_MODE            CMP.B       #2,D4               * skip to V_MOVEM_MODE_V if mode is valid (2,3, or 4 in D4)
00003276  6700 0016               3188                          BEQ         V_MOVEM_MODE_V      * "
0000327A  B83C 0003               3189                          CMP.B       #3,D4               * "
0000327E  6700 000E               3190                          BEQ         V_MOVEM_MODE_V      * "
00003282  B83C 0004               3191                          CMP.B       #4,D4               * "
00003286  6700 0006               3192                          BEQ         V_MOVEM_MODE_V      * "
0000328A  6000 0106               3193                          BRA         MOVEM_INVALID       * otherwise treat this as an invalid instruction
0000328E  4E71                    3194  V_MOVEM_MODE_V          NOP                             * if we have reached here, the instruction looks valid
00003290                          3195                                                          * print the instruction
00003290  41F9 00005182           3196                          LEA         MOVEMSTRING,A0
00003296  4EB9 00004428           3197                          JSR         PRINT_SR
0000329C  4EB9 0000434E           3198                          JSR         SHIFTCURSOR         * standardized indentation level
000032A2  2E05                    3199                          MOVE.L      D5,D7
000032A4  B83C 0002               3200                          CMP.B       #2,D4               * detemine whether to print Addr Indirect or Addr with post-increment
000032A8  6700 000E               3201                          BEQ         MOVEM_ADDR
000032AC  B83C 0003               3202                          CMP.B       #3,D4
000032B0  6700 0010               3203                          BEQ         MOVEM_POSTINC
000032B4  6000 001E               3204                          BRA         MOVEM_REGS          * skip print-addr
000032B8  4EB9 000033DA           3205  MOVEM_ADDR              JSR         PRINT_ADDR
000032BE  6000 0014               3206                          BRA         MOVEM_REGS          * skip over post-inc
000032C2  4EB9 00003412           3207  MOVEM_POSTINC           JSR         PRINT_POSTINC       * does not need a followup because MOVEM_REGS follows anyway
000032C8  41F9 00005201           3208                          LEA         SPACESTRING,A0
000032CE  4EB9 00004428           3209                          JSR         PRINT_SR
000032D4                          3210  
000032D4  B83C 0004               3211  MOVEM_REGS              CMP.B       #4,D4               * pre-decrement mode has a reversed bitmask
000032D8  6700 0044               3212                          BEQ         MOVEM_REGS_REVERSE
000032DC                          3213  
000032DC                          3214  MOVEM_REGS_INORDER                                      * Post-inc and normal mode bitmask order:
000032DC                          3215                                                          *   15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0
000032DC                          3216                                                          * | A7 | A6 | A5 | A4 | A3 | A2 | A1 | A0 | D7 | D6 | D5 | D4 | D3 | D2 | D1 | D0 |
000032DC                          3217  
000032DC  4287                    3218                          CLR.L       D7                  * start reading bits from position 0
000032DE  0F06                    3219  D_up_test_loop          BTST        D7,D6               * check if particular bit is set
000032E0  6700 0008               3220                          BEQ         D_up_test_fail      * if not, skip printing this value
000032E4  4EB9 000033B0           3221                          JSR         Print_Dnum          * if yes, print D#
000032EA  5207                    3222  D_up_test_fail          ADDI.B      #1,D7               * increment bit position
000032EC  BE3C 0008               3223                          CMP.B       #8,D7               * have we hit position 8 (where A starts)
000032F0  6700 0004               3224                          BEQ         D_up_test_done      * if yes, we are done
000032F4  60E8                    3225                          BRA         D_up_test_loop      * if not, loop
000032F6                          3226  D_up_test_done          
000032F6                          3227  
000032F6  4EB9 00003396           3228                          JSR         MOVEM_DIVIDER       * print out " / " between D and A register segments
000032FC                          3229  
000032FC                          3230  
000032FC  E08E                    3231                          LSR.L       #8,D6               * shift to access the A registers in pos 0-8
000032FE                          3232  
000032FE  4207                    3233                          CLR.B       D7                  * reset bit position to 0
00003300  0F06                    3234  A_up_test_loop          BTST        D7,D6               * check if particular bit is set
00003302  6700 0008               3235                          BEQ         A_up_test_fail      * if not, skip printing this value
00003306  4EB9 000033BA           3236                          JSR         Print_Anum          * print A#
0000330C  5207                    3237  A_up_test_fail          ADDI.B      #1,D7               * increment bit position
0000330E  BE3C 0008               3238                          CMP.B       #8,D7               * have we hit bit 8? (outside A register bitmask)
00003312  6700 0004               3239                          BEQ         A_up_test_done      * if yes, we are done
00003316  60E8                    3240                          BRA         A_up_test_loop      * if not, loop
00003318  4207                    3241  A_up_test_done          CLR.B       D7                  * wipe D7
0000331A  6000 004C               3242                          BRA         MOVEM_REGS_DONE
0000331E                          3243  
0000331E                          3244  
0000331E                          3245  MOVEM_REGS_REVERSE                                      * Pre-decrement mode bitmask order (backwards):
0000331E                          3246                                                          *   15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0
0000331E                          3247                                                          * | D0 | D1 | D2 | D3 | D4 | D5 | D6 | D7 | A0 | A1 | A2 | A3 | A4 | A5 | A6 | A7 | 
0000331E  48E7 FC00               3248                          MOVEM.L     D0-D5,-(SP)         * push stack for safety
00003322  103C 000F               3249                          MOVE.B      #15,D0              * D0 temporarily holds the bit position, counting down from 15
00003326  4287                    3250                          CLR.L       D7                  * D7 holds the value of the bit, counting from 0 to 7
00003328                          3251                          
00003328  0106                    3252  D_dn_test_loop          BTST        D0,D6               * check if particular bit is set
0000332A  6700 0008               3253                          BEQ         D_dn_test_fail      * if not, skip printing this value
0000332E  4EB9 000033B0           3254                          JSR         Print_Dnum
00003334  5300                    3255  D_dn_test_fail          SUBI.B      #1,D0               * move position to next bit 
00003336  5207                    3256                          ADDI.B      #1,D7               * increase bit number
00003338  B03C 0007               3257                          CMP.B       #7,D0               * have we hit bit number 7?
0000333C  6700 0004               3258                          BEQ         D_dn_test_done
00003340  60E6                    3259                          BRA         D_dn_test_loop
00003342                          3260  D_dn_test_done          
00003342                          3261  
00003342  4EB9 00003396           3262                          JSR         MOVEM_DIVIDER       * print out " / " between D and A register segments
00003348                          3263  
00003348  7E00                    3264                          MOVE.L      #0,D7               * restore bit number count-up back to 0
0000334A                          3265                                                          * position in D0 is still 7, from the D register loop
0000334A  0106                    3266  A_dn_test_loop          BTST        D0,D6               * check if particular bit is set
0000334C  6700 0008               3267                          BEQ         A_dn_test_fail      * if not, skip printing this value
00003350  4EB9 000033BA           3268                          JSR         Print_Anum
00003356  5300                    3269  A_dn_test_fail          SUBI.B      #1,D0               * move position to next bit 
00003358  5207                    3270                          ADDI.B      #1,D7               * increase bit number
0000335A  BE3C 0008               3271                          CMP.B       #8,D7               * have we hit bit number 7?
0000335E  6700 0004               3272                          BEQ         A_dn_test_done      * if so, break the loop
00003362  60E6                    3273                          BRA         A_dn_test_loop
00003364                          3274  A_dn_test_done          
00003364                          3275  
00003364  4CDF 003F               3276                          MOVEM.L     (SP)+,D0-D5         * pop stack
00003368                          3277  
00003368                          3278  MOVEM_REGS_DONE                                         * either of the two register parsers returned
00003368  B83C 0004               3279                          CMP.B       #4,D4               * check if this is pre-decrement mode
0000336C  6600 0016               3280                          BNE         MOVEM_DONE          * if not, we're done
00003370  41F9 00005201           3281                          LEA         SPACESTRING,A0      * if yes, print "-(A#)"
00003376  4EB9 00004428           3282                          JSR         PRINT_SR            *
0000337C  2E05                    3283                          MOVE.L      D5,D7               * put register number into D7 for use in PRINT_PREDEC
0000337E  4EB9 0000344A           3284  MOVEM_PREDEC            JSR         PRINT_PREDEC        *
00003384                          3285  
00003384  41F9 0000513A           3286  MOVEM_DONE              LEA         LINEEND,A0          * print final newline
0000338A  4EB9 00004428           3287                          JSR         PRINT_SR            * "
00003390  4E75                    3288                          RTS                             * MOVEM decoder has successfully completed
00003392                          3289  
00003392  6000 0F20               3290  MOVEM_INVALID           BRA         PRINTLINE_SR        * the line was not a valid MOVEM instruction
00003396                          3291  
00003396                          3292  
00003396  41F9 0000520B           3293  MOVEM_DIVIDER           LEA         FWDSLASHSTRING,A0   * print out " / " between D and A register segments
0000339C  4EB9 00004428           3294                          JSR         PRINT_SR            * "
000033A2  41F9 00005201           3295                          LEA         SPACESTRING,A0      * "
000033A8  4EB9 00004428           3296                          JSR         PRINT_SR            * "
000033AE  4E75                    3297                          RTS
000033B0                          3298  
000033B0  41F9 0000520F           3299  Print_Dnum              LEA         DSTRING,A0          * prints "D<D7> "
000033B6  6000 0008               3300                          BRA         Print_num
000033BA  41F9 0000520D           3301  Print_Anum              LEA         ASTRING,A0          * prints "D<D7> "
000033C0  4EB9 00004428           3302  Print_num               JSR         PRINT_SR
000033C6  4EB9 0000443A           3303                          JSR         PRINT_HEX
000033CC  41F9 00005201           3304                          LEA         SPACESTRING,A0
000033D2  4EB9 00004428           3305                          JSR         PRINT_SR
000033D8  4E75                    3306                          RTS
000033DA                          3307  
000033DA  41F9 00005211           3308  PRINT_ADDR              LEA         LPARENSTRING,A0     * prints "(A<D7>)"
000033E0  4EB9 00004428           3309                          JSR         PRINT_SR
000033E6  41F9 0000520D           3310                          LEA         ASTRING,A0
000033EC  4EB9 00004428           3311                          JSR         PRINT_SR
000033F2  4EB9 0000443A           3312                          JSR         PRINT_HEX
000033F8  41F9 00005213           3313                          LEA         RPARENSTRING,A0
000033FE  4EB9 00004428           3314                          JSR         PRINT_SR
00003404  41F9 00005201           3315                          LEA         SPACESTRING,A0
0000340A  4EB9 00004428           3316                          JSR         PRINT_SR
00003410  4E75                    3317                          RTS
00003412                          3318  
00003412  41F9 00005211           3319  PRINT_POSTINC           LEA         LPARENSTRING,A0     * prints "(A<D7>)+"
00003418  4EB9 00004428           3320                          JSR         PRINT_SR
0000341E  41F9 0000520D           3321                          LEA         ASTRING,A0
00003424  4EB9 00004428           3322                          JSR         PRINT_SR
0000342A  4EB9 0000443A           3323                          JSR         PRINT_HEX
00003430  41F9 00005213           3324                          LEA         RPARENSTRING,A0
00003436  4EB9 00004428           3325                          JSR         PRINT_SR
0000343C  41F9 00005215           3326                          LEA         PLUSSTRING,A0
00003442  4EB9 00004428           3327                          JSR         PRINT_SR
00003448  4E75                    3328                          RTS
0000344A                          3329  
0000344A  41F9 00005217           3330  PRINT_PREDEC            LEA         MINUSSTRING,A0      * prints "-(A<D7>)"
00003450  4EB9 00004428           3331                          JSR         PRINT_SR
00003456  41F9 00005211           3332                          LEA         LPARENSTRING,A0
0000345C  4EB9 00004428           3333                          JSR         PRINT_SR
00003462  41F9 0000520D           3334                          LEA         ASTRING,A0
00003468  4EB9 00004428           3335                          JSR         PRINT_SR
0000346E  4EB9 0000443A           3336                          JSR         PRINT_HEX
00003474  41F9 00005213           3337                          LEA         RPARENSTRING,A0
0000347A  4EB9 00004428           3338                          JSR         PRINT_SR
00003480  4E75                    3339                          RTS
00003480  4E75                    3340  -------------------- end include --------------------
00003482                          3341  MULSW_SR                INCLUDE     "MULSWdecode.X68"
00003482  4280                    3342                      CLR.L   D0
00003484  4281                    3343                      CLR.L   D1
00003486  4282                    3344                      CLR.L   D2
00003488  4283                    3345                      CLR.L   D3
0000348A  4284                    3346                      CLR.L   D4
0000348C  4285                    3347                      CLR.L   D5
0000348E  4286                    3348                      CLR.L   D6
00003490  4287                    3349                      CLR.L   D7
00003492  43F9 00010000           3350                      LEA     LINESTARTLOC,A1
00003498                          3351  
00003498                          3352  
00003498  1211                    3353                      MOVE.B  (A1),D1                 *Data register
0000349A  0201 000E               3354                      ANDI.B  #%00001110,D1           *We only need the data register
0000349E  E209                    3355                      LSR.B   #1,D1
000034A0                          3356  
000034A0  1411                    3357                      MOVE.B  (A1),D2                 *Direction, it has to be 1 for MULS.W
000034A2  0202 0001               3358                      ANDI.B  #%00000001,D2           *we only need the last bit
000034A6                          3359  
000034A6                          3360  
000034A6  3611                    3361                      MOVE.W  (A1),D3
000034A8  0243 0038               3362                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
000034AC  E60B                    3363                      LSR.B   #3,D3
000034AE                          3364  
000034AE  1E19                    3365                      MOVE.B  (A1)+,D7
000034B0  1819                    3366                      MOVE.B  (A1)+,D4                *register
000034B2  0204 0007               3367                      ANDI.B  #%00000111,D4           *We only care about the last beat
000034B6                          3368  
000034B6  4247                    3369                      CLR     D7
000034B8                          3370  
000034B8                          3371  MULSWVALIDITY        
000034B8  B43C 0001               3372                      CMP.B   #%1,D2                   *Checks the value at D2, if it is not 1, its error
000034BC  6700 0006               3373                      BEQ     MULSW_DIR_VALID
000034C0  6000 00D6               3374                      BRA     MULSW_DECODE_ERR
000034C4                          3375  
000034C4                          3376  MULSW_DIR_VALID
000034C4                          3377                                                      * Lets check the data register first
000034C4                          3378                                                      * the data register is going to be one of the
000034C4                          3379                                                      * eight registers (D0 - D7)
000034C4  B23C 0000               3380                      CMP.B   #%000,D1
000034C8  6700 003E               3381                      BEQ     MULSW_DATAREG_VALID     * data register D0
000034CC  B23C 0001               3382                      CMP.B   #%001,D1
000034D0  6700 0036               3383                      BEQ     MULSW_DATAREG_VALID     * data register D1
000034D4  B23C 0002               3384                      CMP.B   #%010,D1
000034D8  6700 002E               3385                      BEQ     MULSW_DATAREG_VALID     * data register D2
000034DC  B23C 0003               3386                      CMP.B   #%011,D1
000034E0  6700 0026               3387                      BEQ     MULSW_DATAREG_VALID     * data register D3
000034E4  B23C 0004               3388                      CMP.B   #%100,D1
000034E8  6700 001E               3389                      BEQ     MULSW_DATAREG_VALID     * data register D4
000034EC  B23C 0005               3390                      CMP.B   #%101,D1
000034F0  6700 0016               3391                      BEQ     MULSW_DATAREG_VALID     * data register D5
000034F4  B23C 0006               3392                      CMP.B   #%110,D1
000034F8  6700 000E               3393                      BEQ     MULSW_DATAREG_VALID     * data register D6
000034FC  B23C 0007               3394                      CMP.B   #%111,D1
00003500  6700 0006               3395                      BEQ     MULSW_DATAREG_VALID     * data register d7
00003504  6000 0092               3396                      BRA     MULSW_DECODE_ERR        * error
00003508                          3397                       
00003508                          3398                      
00003508                          3399                      
00003508                          3400  
00003508                          3401  
00003508                          3402  MULSW_DATAREG_VALID                                 *check mode
00003508                          3403                                                      *Valid addressing modeS include
00003508                          3404                                                      *Dn,(An),(An)+, -(An), (xxx).w, (xxx).L and #<data>
00003508                          3405                                                      *otherwise, it is invalid addressing code or
00003508                          3406                                                      *out of this assignment scope 
00003508  B63C 0000               3407                      CMP.B   #%000,D3
0000350C  6700 005A               3408                      BEQ     MULSW_SOURCE
00003510  B63C 0002               3409                      CMP.B   #%010,D3
00003514  6700 0052               3410                      BEQ     MULSW_SOURCE
00003518  B63C 0003               3411                      CMP.B   #%011,D3
0000351C  6700 004A               3412                      BEQ     MULSW_SOURCE
00003520  B63C 0004               3413                      CMP.B   #%100,D3
00003524  6700 0042               3414                      BEQ     MULSW_SOURCE
00003528  B63C 0007               3415                      CMP.B   #%111,D3                *If the mode is 111,branch to immediate data
0000352C  6700 0006               3416                      BEQ     MULSW_IMM_SOURCE
00003530  6000 0066               3417                      BRA     MULSW_DECODE_ERR
00003534                          3418  
00003534                          3419                                
00003534                          3420  MULSW_IMM_SOURCE                                    *if we get here, the source operand is an immediate value
00003534                          3421                                                      *it is either, (xxx).w, (xxx).L or #<data>, otherwise error
00003534                          3422                                                      *let's check what it is and figure out how much it is
00003534  B83C 0000               3423                      CMP.B   #%000,D4
00003538  6700 001A               3424                      BEQ     MULSW_GETWORD           *the absolute value is (xxx).w
0000353C  B83C 0001               3425                      CMP.B   #%001,D4
00003540  6700 0020               3426                      BEQ     MULSW_GETLONG           *the absolute value is (xxx).L
00003544  B83C 0004               3427                      CMP.B   #%100,D4
00003548  6700 0006               3428                      BEQ     MULSW_POUND             *the absolute value is #<data>
0000354C  6000 004A               3429                      BRA     MULSW_DECODE_ERR
00003550                          3430  
00003550                          3431  
00003550                          3432  
00003550                          3433  MULSW_POUND                                         *here, we know the immediate value is literal #<data>
00003550  6000 0002               3434                      BRA     MULSW_GETWORD
00003554                          3435  
00003554                          3436  MULSW_GETWORD
00003554  3A19                    3437                      MOVE.W  (A1)+,D5                *D5 store the word data
00003556  0C45 FFFF               3438                      CMPI.W  #65535,D5
0000355A  6200 003C               3439                      BHI     MULSW_DECODE_ERR        *if the value is greater than 16 bits, its invalid
0000355E  6000 0010               3440                      BRA     MULSW_VERIFIED
00003562                          3441  
00003562                          3442  MULSW_GETLONG
00003562  2A19                    3443                      MOVE.L  (A1)+,D5                *D5 store the long data
00003564  6000 000A               3444                      BRA     MULSW_VERIFIED
00003568                          3445  
00003568                          3446  MULSW_SOURCE
00003568  B63C 0007               3447                      CMP.B   #%111,D3
0000356C  6600 0002               3448                      BNE     MULSW_VERIFIED
00003570                          3449  
00003570                          3450  
00003570                          3451                                                      *we need two different ways to handle the printing
00003570                          3452                                                      *for each scenarios Dn + <ea> -> Dn
00003570                          3453                                                      *and for <ea> + Dn -> <ea>
00003570                          3454  
00003570                          3455  MULSW_VERIFIED
00003570  4240                    3456                      CLR     D0                      *clear d0
00003572  103C 0003               3457                      MOVE.B  #%11,D0                 *MOVE %11 D0, so that the decoder use move printer, correctly
00003576  4242                    3458                      CLR     D2                      *clear D2, so that the decoder use move printer
00003578  6000 0002               3459                      BRA     MULSW_PRINT
0000357C                          3460  
0000357C                          3461                                                      *prints add when Dn + <ea>->dn
0000357C                          3462  
0000357C  41F9 000051B3           3463  MULSW_PRINT         LEA     MULSWSTRING,A0          *prints MULS
00003582  4EB9 00004428           3464                      JSR     PRINT_SR
00003588  41F9 000051F9           3465                      LEA     WORDSTRING,A0           *Prints .w
0000358E  4EB9 00004428           3466                      JSR     PRINT_SR
00003594  6000 F988               3467                      BRA     MOVEAS                  *branch to MOVEAS to print the remaining instructions
00003598                          3468  
00003598                          3469  
00003598                          3470  
00003598                          3471  
00003598                          3472  
00003598                          3473  
00003598  4EB9 000042B4           3474  MULSW_DECODE_ERR    JSR     PRINTLINE_SR            *Prints the error memory address with related junk
0000359E  4E75                    3475                      RTS                             *we are done
000035A0                          3476  
000035A0                          3477  
000035A0  41F9 0000513A           3478  MULSW_DECODE_DONE   LEA     LINEEND,A0              *prints line end
000035A6  4EB9 00004428           3479                      JSR     PRINT_SR    
000035AC  4E75                    3480                      RTS
000035AE                          3481                                                      *~Font name~Courier New~
000035AE                          3482                                                      *~Font size~10~
000035AE                          3483                                                      *~Tab type~1~
000035AE                          3484                                                      *~Tab size~4~
000035AE                          3485  
000035AE                          3486  
000035AE                          3487  
000035AE                          3488  
000035AE                          3489  
000035AE                          3490  
000035AE                          3491  
000035AE                          3492  
000035AE                          3493  
000035AE                          3494  
000035AE                          3495  
000035AE                          3496  -------------------- end include --------------------
000035AE                          3497  OR_SR                   INCLUDE     "ORdecode.X68"
000035AE  4280                    3498                      CLR.L   D0
000035B0  4281                    3499                      CLR.L   D1
000035B2  4282                    3500                      CLR.L   D2
000035B4  4283                    3501                      CLR.L   D3
000035B6  4284                    3502                      CLR.L   D4
000035B8  4285                    3503                      CLR.L   D5
000035BA  4286                    3504                      CLR.L   D6
000035BC  4287                    3505                      CLR.L   D7
000035BE  43F9 00010000           3506                      LEA     LINESTARTLOC,A1
000035C4                          3507  
000035C4                          3508  
000035C4  3011                    3509                      MOVE.W  (A1),D0                 *move the word in do
000035C6  EC48                    3510                      LSR.W   #6,D0                   *shift the word 6 place to the right
000035C8  0200 0003               3511                      ANDI.B  #%00000011,D0           *we only need the two bits for the sized
000035CC  B03C 0003               3512                      CMP.B   #%11,D0                 *check if 11,holds the size
000035D0  6700 F380               3513                      BEQ     DIVUW_SR                *Its actually DIVU.W
000035D4                          3514  
000035D4                          3515  
000035D4                          3516  
000035D4  1211                    3517                      MOVE.B  (A1),D1                 *Data register
000035D6  0201 000E               3518                      ANDI.B  #%00001110,D1           *We only need the three bits data register
000035DA  E209                    3519                      LSR.B   #1,D1                   *shift 1 bit to the right
000035DC                          3520  
000035DC                          3521  
000035DC  1411                    3522                      MOVE.B  (A1),D2                 *Direction,    *determine if AND Dn, <ea> or AND <ea>, Dn
000035DE  0202 0001               3523                      ANDI.B  #%00000001,D2           *we only need the lat bit
000035E2                          3524  
000035E2                          3525  
000035E2  3611                    3526                      MOVE.W  (A1),D3
000035E4  0243 0038               3527                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
000035E8  E60B                    3528                      LSR.B   #3,D3
000035EA                          3529  
000035EA  1E19                    3530                      MOVE.B  (A1)+,D7
000035EC  1819                    3531                      MOVE.B  (A1)+,D4                *register
000035EE  0204 0007               3532                      ANDI.B  #%00000111,D4           *We only care about the last beat
000035F2                          3533  
000035F2  4247                    3534                      CLR     D7
000035F4                          3535  
000035F4                          3536  ORVALIDITY                                         * Lets check the data register first
000035F4  B23C 0000               3537                      CMP.B   #%000,D1
000035F8  6700 003E               3538                      BEQ     OR_DATAREG_VALID        *the data register is D0
000035FC  B23C 0001               3539                      CMP.B   #%001,D1
00003600  6700 0036               3540                      BEQ     OR_DATAREG_VALID        *the data register is D1 
00003604  B23C 0002               3541                      CMP.B   #%010,D1
00003608  6700 002E               3542                      BEQ     OR_DATAREG_VALID        *the data register is D2
0000360C  B23C 0003               3543                      CMP.B   #%011,D1
00003610  6700 0026               3544                      BEQ     OR_DATAREG_VALID        *the data register is D3
00003614  B23C 0004               3545                      CMP.B   #%100,D1
00003618  6700 001E               3546                      BEQ     OR_DATAREG_VALID        *the data register is D4
0000361C  B23C 0005               3547                      CMP.B   #%101,D1
00003620  6700 0016               3548                      BEQ     OR_DATAREG_VALID        *the data register is D5
00003624  B23C 0006               3549                      CMP.B   #%110,D1
00003628  6700 000E               3550                      BEQ     OR_DATAREG_VALID        *the data register is D6
0000362C  B23C 0007               3551                      CMP.B   #%111,D1
00003630  6700 0006               3552                      BEQ     OR_DATAREG_VALID        *the data register is D7
00003634  6000 015E               3553                      BRA     OR_DECODE_ERR           *we will never get here, if we do error
00003638                          3554  
00003638                          3555  
00003638                          3556  OR_DATAREG_VALID                                    * LET'S THE DIRECTION NOW
00003638  B43C 0000               3557                      CMP.B   #0,D2
0000363C  6700 000E               3558                      BEQ     OR_DN_DESTINATION       *Dn is destination, OR <ea>, Dn 
00003640  B43C 0001               3559                      CMP.B   #1,D2
00003644  6700 0106               3560                      BEQ     OR_DN_SOURCE           *Dn is source, OR Dn, <ea> some effectve addresses are not valid
00003648  6000 014A               3561                      BRA     OR_DECODE_ERR
0000364C                          3562  
0000364C                          3563  OR_DN_DESTINATION                                  *check mode for Dn is destination (Dn + <ea>->Dn)
0000364C                          3564                                                      *<EA> cant be address register
0000364C  B63C 0000               3565                      CMP.B   #%000,D3
00003650  6700 002E               3566                      BEQ     OR_MODE_VALIDATE       *<EA> is Dn
00003654  B63C 0001               3567                      CMP.B   #%001,D3
00003658  6700 013A               3568                      BEQ     OR_DECODE_ERR          *If An is the effective address, check the size, if byte invalid
0000365C  B63C 0002               3569                      CMP.B   #%010,D3
00003660  6700 001E               3570                      BEQ     OR_MODE_VALIDATE       *<EA> is address register indirect
00003664  B63C 0003               3571                      CMP.B   #%011,D3
00003668  6700 0016               3572                      BEQ     OR_MODE_VALIDATE       *<EA> is address register post increment
0000366C  B63C 0004               3573                      CMP.B   #%100,D3
00003670  6700 000E               3574                      BEQ     OR_MODE_VALIDATE       *<EA> is address register pre decrement
00003674  B63C 0007               3575                      CMP.B   #%111,D3
00003678  6700 0006               3576                      BEQ     OR_MODE_VALIDATE       *<EA> could be (xxx).w, (xxx).l or #<data>
0000367C  6000 0116               3577                      BRA     OR_DECODE_ERR
00003680                          3578  
00003680                          3579                                                      
00003680                          3580                                                      
00003680                          3581  
00003680                          3582  OR_MODE_VALIDATE                                   *Lets check what we need to do next
00003680                          3583                  
00003680  B63C 0007               3584                      CMP.B   #%111,D3
00003684  6600 004E               3585                      BNE     OR_SOURCE              *the <EA> is not absolute value            
00003688  B83C 0000               3586                      CMP.B   #%000,D4
0000368C  6700 0016               3587                      BEQ     OR_GET_VALUE           *the <EA> is absolute word
00003690  B83C 0001               3588                      CMP.B   #%001,D4
00003694  6700 000E               3589                      BEQ     OR_GET_VALUE           *the <EA> is absolute long
00003698  B83C 0004               3590                      CMP.B   #%100,D4
0000369C  6700 0006               3591                      BEQ     OR_GET_VALUE           *the <EA> is immediate value
000036A0  6000 00F2               3592                      BRA     OR_DECODE_ERR
000036A4                          3593  
000036A4                          3594  OR_GET_VALUE                                       *Now we need to figure out how much data to snag after?
000036A4  B83C 0004               3595                      CMP.B   #%100,D4
000036A8  6700 0012               3596                      BEQ     OR_POUND               *immediate value
000036AC  B83C 0000               3597                      CMP.B   #%000,D4
000036B0  6700 0016               3598                      BEQ     OR_GETS_WORD             *absolute word
000036B4  B83C 0001               3599                      CMP.B   #%001,D4
000036B8  6700 0014               3600                      BEQ     OR_GETS_LONG             *absolute long
000036BC                          3601  
000036BC                          3602  OR_POUND
000036BC  B03C 0002               3603                      CMP.B   #%10,D0                 
000036C0  6700 000C               3604                      BEQ     OR_GETS_LONG           *the abolute value is long
000036C4  6000 0002               3605                      BRA     OR_GETS_WORD           *the absolute value need to be added is word
000036C8                          3606  
000036C8                          3607  
000036C8                          3608  OR_GETS_WORD
000036C8  3A19                    3609                      MOVE.W  (A1)+,D5                *D5 store the word data
000036CA  6000 0008               3610                      BRA     OR_SOURCE
000036CE                          3611  
000036CE                          3612  
000036CE                          3613  OR_GETS_LONG
000036CE  2A19                    3614                      MOVE.L  (A1)+,D5                *D5 store the long data
000036D0  6000 0002               3615                      BRA     OR_SOURCE
000036D4                          3616  
000036D4                          3617  OR_SOURCE
000036D4  B43C 0007               3618                      CMP.B   #%111,D2
000036D8  6600 0046               3619                      BNE     OR_VERIFIED
000036DC  B23C 0002               3620                      CMP.B   #%10,D1
000036E0  6700 0006               3621                      BEQ     ORED_GETLONG
000036E4  6000 0008               3622                      BRA     ORED_GETWORD
000036E8                          3623  
000036E8                          3624  ORED_GETLONG
000036E8  2C19                    3625                      MOVE.L  (A1)+,D6
000036EA  6000 0008               3626                      BRA     OR_CHECKLENGTH
000036EE                          3627  ORED_GETWORD
000036EE  3C19                    3628                      MOVE.W  (A1)+,D6
000036F0  6000 0002               3629                      BRA     OR_CHECKLENGTH
000036F4                          3630  
000036F4  48E7 FF00               3631  OR_CHECKLENGTH      MOVEM.L D0-D7,-(SP)
000036F8  2009                    3632                      MOVE.L  A1,D0
000036FA  2239 00010000           3633                      MOVE.L  LINESTARTLOC,D1
00003700  9081                    3634                      SUB.L   D1,D0                   *D0 now has the length of the instruction in bytes
00003702  C0FC 0008               3635                      MULU    #8,D0                   *Now D0 has the number of bits
00003706  0280 000000FF           3636                      ANDI.L  #$000000FF,D0
0000370C  1439 00005230           3637                      MOVE.B  (LINELENGTH),D2         *D2 has line length in bits
00003712  B400                    3638                      CMP.B   D0,D2
00003714  6600 007E               3639                      BNE     OR_DECODE_ERR
00003718  4CDF 00FF               3640                      MOVEM.L (SP)+,D0-D7
0000371C  6000 0002               3641                      BRA     OR_VERIFIED
00003720                          3642  
00003720                          3643  
00003720                          3644                                                      *we need two different ways to handle the printing
00003720                          3645                                                      *for each scenarios Dn + <ea> -> Dn
00003720                          3646                                                      *and for <ea> + Dn -> <ea>
00003720                          3647  
00003720                          3648  OR_VERIFIED
00003720  B43C 0000               3649                      CMP.B   #%0,D2
00003724  6700 0006               3650                      BEQ     OR_DECODE_PRINT        *deployed when AND.SIZE <EA>,DN, Uses the print method from MOVE
00003728  6600 0012               3651                      BNE     OR_DECODE_PRINT_2      *deployed when AND.SIZE Dn,<EA>
0000372C                          3652  
0000372C                          3653                                                      *prints OR when Dn + <ea>->dn
0000372C                          3654  
0000372C  41F9 000051A3           3655  OR_DECODE_PRINT     LEA     ORSTRING,A0
00003732  4EB9 00004428           3656                      JSR     PRINT_SR
00003738  6000 E510               3657                      BRA     PRINT_SIZE              *uses printer from ADD decoder
0000373C                          3658  
0000373C                          3659  
0000373C                          3660  OR_DECODE_PRINT_2                                  *prints add when OR  Dn, <EA>
0000373C  41F9 000051A3           3661                      LEA     ORSTRING,A0
00003742  4EB9 00004428           3662                      JSR     PRINT_SR
00003748  6000 E56A               3663                      BRA     PRINT_SIZE_2
0000374C                          3664  
0000374C                          3665  
0000374C                          3666  OR_DN_SOURCE                                       *check mode when Dn is the source
0000374C                          3667  
0000374C  B63C 0000               3668                      CMP.B   #%000,D3
00003750  6700 0042               3669                      BEQ     OR_DECODE_ERR          *<ea> cant be Dn
00003754  B63C 0001               3670                      CMP.B   #%001,D3
00003758  6700 003A               3671                      BEQ     OR_DECODE_ERR          *<ea> can't be  An
0000375C  B63C 0007               3672                      CMP.B   #%111,D3
00003760  6700 0026               3673                      BEQ     CHECK_REG_OR           *Check register to tell if its valid, cant be immediate
00003764  B63C 0002               3674                      CMP.B   #%010,D3
00003768  6700 FF16               3675                      BEQ     OR_MODE_VALIDATE       *Check if the absolute value is short or long
0000376C  B63C 0003               3676                      CMP.B   #%011,D3
00003770  6700 FF0E               3677                      BEQ     OR_MODE_VALIDATE
00003774  B63C 0004               3678                      CMP.B   #%100,D3
00003778  6700 FF06               3679                      BEQ     OR_MODE_VALIDATE
0000377C  B63C 0003               3680                      CMP.B   #%011,D3
00003780  6700 FEFE               3681                      BEQ     OR_MODE_VALIDATE
00003784  6000 000E               3682                      BRA     OR_DECODE_ERR
00003788                          3683                                                      
00003788                          3684  
00003788  B83C 0004               3685  CHECK_REG_OR        CMP.B   #%100,D4
0000378C  6700 0006               3686                      BEQ     OR_DECODE_ERR          *cant be immediate
00003790  6600 FEEE               3687                      BNE     OR_MODE_VALIDATE       *the mode is validate
00003794                          3688  
00003794                          3689  
00003794                          3690  
00003794  4EB9 000042B4           3691  OR_DECODE_ERR       JSR     PRINTLINE_SR
0000379A  4E75                    3692                      RTS                            *and decoder is done
0000379C                          3693  
0000379C                          3694  
0000379C  41F9 0000513A           3695  OR_DECODE_DONE      LEA     LINEEND,A0
000037A2  4EB9 00004428           3696                      JSR     PRINT_SR
000037A8  4E75                    3697                      RTS
000037AA                          3698                                                      *~Font name~Courier New~
000037AA                          3699                                                      *~Font size~10~
000037AA                          3700                                                      *~Tab type~1~
000037AA                          3701                                                      *~Tab size~4~
000037AA                          3702  
000037AA                          3703  
000037AA                          3704  
000037AA                          3705  
000037AA                          3706  
000037AA                          3707  -------------------- end include --------------------
000037AA                          3708  SHIFTSTUFF_SR           INCLUDE     "SHIFTdecode.X68"
000037AA  4280                    3709                      CLR.L   D0
000037AC  4281                    3710                      CLR.L   D1
000037AE  4282                    3711                      CLR.L   D2
000037B0  4283                    3712                      CLR.L   D3
000037B2  4284                    3713                      CLR.L   D4
000037B4  4285                    3714                      CLR.L   D5
000037B6  4286                    3715                      CLR.L   D6
000037B8  4287                    3716                      CLR.L   D7
000037BA  43F9 00010000           3717                      LEA     LINESTARTLOC,A1
000037C0                          3718  
000037C0                          3719                                                      *check if it it is a regiter shift or memory shift
000037C0  3011                    3720                      MOVE.W  (A1),D0
000037C2  EC48                    3721                      LSR.W   #6,D0
000037C4  0200 0003               3722                      ANDI.B  #%00000011,D0
000037C8                          3723  
000037C8                          3724  
000037C8  1211                    3725                      MOVE.B  (A1),D1                 *Rotation Data register/ count
000037CA  0201 000E               3726                      ANDI.B  #%00001110,D1           *We only need the three bits
000037CE  E209                    3727                      LSR.B   #1,D1
000037D0                          3728                      
000037D0                          3729  
000037D0                          3730  
000037D0  1411                    3731                      MOVE.B  (A1),D2                 *Direction, determines if the logical shift is to right or left
000037D2  0202 0001               3732                      ANDI.B  #%00000001,D2           *0 is right shift and 1 is left shift
000037D6                          3733                                                      *we only need the last bit
000037D6                          3734  
000037D6                          3735  
000037D6  3611                    3736                      MOVE.W  (A1),D3
000037D8  0243 0020               3737                      ANDI.W  #%0000000000100000,D3   *we only care about the 1 bits
000037DC  EA0B                    3738                      LSR.B   #5,D3                   *determines if the bit rotation is register or immediate
000037DE                          3739                                                      *if 0, the rotation is immediate data,else register
000037DE  3C11                    3740                      MOVE.W  (A1),D6
000037E0  E64E                    3741                      LSR.W   #3,D6
000037E2  0206 0003               3742                      ANDI.B  #%00000011,D6           * this determines if it is ASd, LSd or ROd
000037E6                          3743  
000037E6  1E19                    3744                      MOVE.B  (A1)+,D7
000037E8  1819                    3745                      MOVE.B  (A1)+,D4                *register
000037EA  0204 0007               3746                      ANDI.B  #%00000111,D4           *We only care about the last beat (D0 - D7)
000037EE                          3747                      
000037EE                          3748                    
000037EE                          3749  
000037EE  4247                    3750                      CLR     D7
000037F0                          3751                      
000037F0                          3752  DETERMINE_SHIFT                                     *here we will determine what kind of shift it is
000037F0                          3753                                                      *it is either memory shift or register shift
000037F0  B03C 0003               3754                      CMP.B   #%11,D0
000037F4  6700 0024               3755                      BEQ     MEMORY_SHIFT            *Its memory shift
000037F8  6000 0002               3756                      BRA     REGISTER_SHIFT          *Its register shift
000037FC                          3757                      
000037FC                          3758  REGISTER_SHIFT                                      *At this point,we know the shift is register shift
000037FC                          3759                                                      *let's check the register shift, it is either LSd, ASd or ROd
000037FC  BC3C 0000               3760                      CMP.B   #%00,D6
00003800  6700 046E               3761                      BEQ     ASREG_DECODE            *It's arthimetic register shift
00003804  BC3C 0001               3762                      CMP.B   #%01,D6
00003808  6700 02C8               3763                      BEQ     LSREG_DECODE            *It is logical register shift
0000380C  BC3C 0003               3764                      CMP.B   #%11,D6
00003810  6700 0510               3765                      BEQ     ROREG_DECODE            *It is register rotate
00003814  4246                    3766                      CLR     D6
00003816  6000 05BC               3767                      BRA     SHIFT_DECODE_ERR
0000381A                          3768                      
0000381A                          3769  
0000381A                          3770  MEMORY_SHIFT                                        *At this point we know it is a memory shift
0000381A                          3771                                                      *let check whether it is ASd, LSd or ROd
0000381A  4243                    3772                      CLR     D3
0000381C  43D0                    3773                      LEA     (A0),A1
0000381E  3619                    3774                      MOVE.W  (A1)+,D3
00003820  0243 0038               3775                      ANDI.W  #%0000000000111000,D3   *we only care about the 3 bits
00003824  E60B                    3776                      LSR.B   #3,D3  
00003826  6000 0002               3777                      BRA     VALIDATE_MEMS_MODE       *branch to check the mode
0000382A                          3778  
0000382A                          3779  VALIDATE_MEMS_MODE                                   *Lets check the mode
0000382A  B63C 0002               3780                      CMP.B   #%010,D3
0000382E  6700 0032               3781                      BEQ     MEMS_MODE_VALID         * It is (An)
00003832  B63C 0003               3782                      CMP.B   #%011,D3
00003836  6700 002A               3783                      BEQ     MEMS_MODE_VALID         * It is (An)+
0000383A  B63C 0004               3784                      CMP.B   #%100,D3
0000383E  6700 0022               3785                      BEQ     MEMS_MODE_VALID         * It is -(An)
00003842  B63C 0007               3786                      CMP.B   #%111,D3
00003846  6700 0006               3787                      BEQ     CHECK_MEMS_REG          * check if it is (xxx).w or (xxx).L
0000384A  6000 0588               3788                      BRA     SHIFT_DECODE_ERR        *ERROR
0000384E                          3789                      
0000384E                          3790  CHECK_MEMS_REG                                      * Lets check the register, if it is not 000 or 001, it error
0000384E  B83C 0000               3791                      CMP.B   #%000,D4
00003852  6700 000E               3792                      BEQ     MEMS_MODE_VALID         * the absolute value is (xxx).w
00003856  B83C 0001               3793                      CMP.B   #%001,D4
0000385A  6700 0006               3794                      BEQ     MEMS_MODE_VALID         * the absolute value is (xxx).l
0000385E  6000 0574               3795                      BRA     SHIFT_DECODE_ERR        *ERROR 
00003862                          3796  
00003862                          3797  MEMS_MODE_VALID                                     * If we got here the everything is fine, lets check what
00003862                          3798                                                      * the instruction is                                 
00003862  B23C 0000               3799                      CMP.B   #%000,D1
00003866  6700 0016               3800                      BEQ     ASMEM_DECODE            *It's arthimetic memory shift
0000386A  B23C 0001               3801                      CMP.B   #%001,D1
0000386E  6700 0078               3802                      BEQ     LSMEM_DECODE            *It's logical memory shift
00003872  B23C 0003               3803                      CMP.B   #%011,D1    
00003876  6700 01EA               3804                      BEQ     ROMEM_DECODE            *It's memory rotation
0000387A  6000 0558               3805                      BRA     SHIFT_DECODE_ERR        *error
0000387E                          3806                      
0000387E                          3807  ASMEM_DECODE        INCLUDE "ASDMdecode.X68"        *reads the file ASDMdecode.x68
0000387E                          3808  
0000387E                          3809  
0000387E                          3810  
0000387E                          3811  
0000387E                          3812  ASDM_DATAREG_VALID                                  * LET'S THE DIRECTION NOW
0000387E  B43C 0000               3813                      CMP.B   #%0,D2
00003882  6700 000E               3814                      BEQ     ASDM_DIRECTION_VALID    * Shift to right
00003886  B43C 0001               3815                      CMP.B   #%1,D2
0000388A  6700 0006               3816                      BEQ     ASDM_DIRECTION_VALID    * Shift to left
0000388E  6000 0042               3817                      BRA     ASDM_DECODE_ERR         * we will never get here
00003892                          3818  
00003892                          3819  ASDM_DIRECTION_VALID                                * check the rotation mode
00003892                          3820                                                      * Branch to the printer      
00003892  6000 0002               3821                      BRA     ASDM_DECODE_PRINT       
00003896                          3822  
00003896                          3823  
00003896                          3824  
00003896                          3825  ASDM_DECODE_PRINT                                   * Check if it is left or right
00003896  B47C 0000               3826                      CMP     #%0,D2
0000389A  6700 0016               3827                      BEQ     ASRM_SR                 * right shift, M stands for memory
0000389E  6000 0002               3828                      BRA     ASLM_SR                 * left shift
000038A2                          3829                      
000038A2                          3830                      
000038A2                          3831  ASLM_SR                                             * take care of the printing of LSR
000038A2  41F9 000051C8           3832                      LEA     ASLSTRING,A0
000038A8  4EB9 00004428           3833                      JSR     PRINT_SR                * prints LSR
000038AE  6000 0012               3834                      BRA     PRINT_ASDM_SIZE         * branch to LSD SIZE
000038B2                          3835  
000038B2                          3836  ASRM_SR                                             * take care of the printing of LSR
000038B2  41F9 000051C4           3837                      LEA     ASRSTRING,A0
000038B8  4EB9 00004428           3838                      JSR     PRINT_SR                * prints LSR
000038BE  6000 0002               3839                      BRA     PRINT_ASDM_SIZE         * branch to LSD SIZE
000038C2                          3840  
000038C2                          3841  PRINT_ASDM_SIZE                                      * branches to the appropriate print area
000038C2                          3842                                                       * prints .W, In this case its only word
000038C2  41F9 000051F9           3843                      LEA     WORDSTRING,A0
000038C8  4EB9 00004428           3844                      JSR     PRINT_SR
000038CE  6000 0072               3845                      BRA     PRINT_REMAINM            * USES THE PRINTER IN LSDM_DECODER
000038D2                          3846  
000038D2                          3847                      
000038D2                          3848                      
000038D2  4EB9 000042B4           3849  ASDM_DECODE_ERR     JSR     PRINTLINE_SR
000038D8  4E75                    3850                      RTS
000038DA                          3851  ASDM_DECODE_DONE                                     * we done
000038DA  41F9 0000513A           3852                      LEA     LINEEND,A0
000038E0  4EB9 00004428           3853                      JSR     PRINT_SR
000038E6  4E75                    3854                      RTS                   
000038E8                          3855    
000038E8                          3856  
000038E8                          3857  
000038E8                          3858  
000038E8                          3859  
000038E8                          3860  
000038E8                          3861  
000038E8                          3862                    
000038E8                          3863  
000038E8                          3864  
000038E8                          3865  
000038E8                          3866  
000038E8                          3867  
000038E8                          3868  -------------------- end include --------------------
000038E8                          3869  
000038E8                          3870  LSMEM_DECODE        INCLUDE "LSDMdecode.X68"        *reads the file LSDMdec0de.x68
000038E8                          3871  
000038E8                          3872  
000038E8                          3873  
000038E8                          3874  
000038E8                          3875  LSDM_DATAREG_VALID                                  * LET'S THE DIRECTION NOW
000038E8  B43C 0000               3876                      CMP.B   #%0,D2
000038EC  6700 000E               3877                      BEQ     LSDM_DIRECTION_VALID    * Shift to right
000038F0  B43C 0001               3878                      CMP.B   #%1,D2
000038F4  6700 0006               3879                      BEQ     LSDM_DIRECTION_VALID    * Shift to left
000038F8  6000 0152               3880                      BRA     LSDM_DECODE_ERR         * we will never get here
000038FC                          3881  
000038FC                          3882  LSDM_DIRECTION_VALID                                * check the rotation mode
000038FC                          3883                                                      * Branch to the printer      
000038FC  6000 0002               3884                      BRA     LSDM_DECODE_PRINT       
00003900                          3885  
00003900                          3886  
00003900                          3887  
00003900                          3888  LSDM_DECODE_PRINT                                   * Check if it is left or right
00003900  B47C 0000               3889                      CMP     #%0,D2
00003904  6700 0016               3890                      BEQ     LSRM_SR                 * right shift, M stands for memory
00003908  6000 0002               3891                      BRA     LSLM_SR                  * left shift
0000390C                          3892                      
0000390C                          3893                      
0000390C                          3894  LSLM_SR                                              * take care of the printing of LSR
0000390C  41F9 000051BC           3895                      LEA     LSLSTRING,A0
00003912  4EB9 00004428           3896                      JSR     PRINT_SR                * prints LSR
00003918  6000 0012               3897                      BRA     PRINT_LSDM_SIZE          * branch to LSD SIZE
0000391C                          3898  
0000391C                          3899  LSRM_SR                                             * take care of the printing of LSR
0000391C  41F9 000051C0           3900                      LEA     LSRSTRING,A0
00003922  4EB9 00004428           3901                      JSR     PRINT_SR                * prints LSR
00003928  6000 0002               3902                      BRA     PRINT_LSDM_SIZE         * branch to LSD SIZE
0000392C                          3903  
0000392C                          3904  PRINT_LSDM_SIZE                                      * branches to the appropriate print area
0000392C                          3905                                                       * prints .W, In this case its only word
0000392C                          3906                     
0000392C  41F9 000051F9           3907                      LEA     WORDSTRING,A0
00003932  4EB9 00004428           3908                      JSR     PRINT_SR
00003938  4EB9 0000434E           3909                      JSR     SHIFTCURSOR
0000393E  6000 0002               3910                      BRA     PRINT_REMAINM   
00003942                          3911  
00003942                          3912                      
00003942                          3913                      
00003942                          3914  PRINT_REMAINM       
00003942  4EB9 0000434E           3915                      JSR     SHIFTCURSOR             * prints the remaining parts
00003948  B63C 0002               3916                      CMP.B   #%010,D3
0000394C  6700 003E               3917                      BEQ     PRINT_M010              * branch to pring (An)
00003950  B63C 0003               3918                      CMP.B   #%011,D3
00003954  6700 0066               3919                      BEQ     PRINT_M011              * Branch to print (An)+
00003958  B63C 0004               3920                      CMP.B   #%100,D3
0000395C  6700 009A               3921                      BEQ     PRINT_M100              * branch to pring -(An)
00003960  B63C 0007               3922                      CMP.B   #%111,D3                
00003964  6700 0006               3923                      BEQ     ADD_ABSOLUTE            * branch to ADD either (xxx).w or (xxx).l
00003968  6000 00E2               3924                      BRA     LSDM_DECODE_ERR         * ERROR  
0000396C                          3925  
0000396C                          3926  ADD_ABSOLUTE                                         * Check how much it needs
0000396C  B83C 0000               3927                      CMP.B   #%000,D4
00003970  6700 000E               3928                      BEQ     ADD_ABS_WORD            * (xxx).w
00003974  B83C 0001               3929                      CMP.B   #%001,D4
00003978  6700 000C               3930                      BEQ     ADD_ABS_LONG            * (xxx).l
0000397C  6000 00CE               3931                      BRA     LSDM_DECODE_ERR         *ERROR
00003980                          3932    
00003980                          3933  ADD_ABS_WORD
00003980  3A19                    3934                      MOVE.W  (A1)+,D5                * D5 Store the word value
00003982  6000 00B0               3935                      BRA     PRINT_M111
00003986                          3936  ADD_ABS_LONG
00003986  2A19                    3937                      MOVE.L  (A1)+,D5                * D5 Store the word value
00003988  6000 00AA               3938                      BRA     PRINT_M111          
0000398C                          3939                       
0000398C                          3940    
0000398C                          3941  PRINT_M010                                          * Prints (An), (n is from A0 - A7
0000398C  41F9 00005211           3942                      LEA     LPARENSTRING,A0
00003992  4EB9 00004428           3943                      JSR     PRINT_SR                * Prints "("
00003998  41F9 0000520D           3944                      LEA     ASTRING,A0
0000399E  4EB9 00004428           3945                      JSR     PRINT_SR                * Prints A
000039A4  2E04                    3946                      MOVE.L  D4,D7    
000039A6  4EB9 0000443A           3947                      JSR     PRINT_HEX               * Prints hex from 0 to 7 
000039AC  41F9 00005213           3948                      LEA     RPARENSTRING,A0
000039B2  4EB9 00004428           3949                      JSR     PRINT_SR                * Prints ")"
000039B8  6000 009A               3950                      BRA     LSDM_DECODE_DONE     
000039BC                          3951                      
000039BC                          3952  PRINT_M011                                          * Prints (An)+, (n is from A0 - A7
000039BC  41F9 00005211           3953                      LEA     LPARENSTRING,A0
000039C2  4EB9 00004428           3954                      JSR     PRINT_SR                * Prints "("
000039C8  41F9 0000520D           3955                      LEA     ASTRING,A0
000039CE  4EB9 00004428           3956                      JSR     PRINT_SR                * Prints A
000039D4  2E04                    3957                      MOVE.L  D4,D7    
000039D6  4EB9 0000443A           3958                      JSR     PRINT_HEX               * Prints hex from 0 to 7 
000039DC  41F9 00005213           3959                      LEA     RPARENSTRING,A0
000039E2  4EB9 00004428           3960                      JSR     PRINT_SR                * Prints ")"
000039E8  41F9 00005215           3961                      LEA     PLUSSTRING,A0              
000039EE  4EB9 00004428           3962                      JSR     PRINT_SR                * Prints "+"
000039F4  6000 005E               3963                      BRA     LSDM_DECODE_DONE  
000039F8                          3964  
000039F8                          3965  PRINT_M100                                          * Prints -(An), (n is from A0 - A7)
000039F8  41F9 00005217           3966                      LEA     MINUSSTRING,A0
000039FE  4EB9 00004428           3967                      JSR     PRINT_SR                * Prints "-"
00003A04  41F9 00005211           3968                      LEA     LPARENSTRING,A0
00003A0A  4EB9 00004428           3969                      JSR     PRINT_SR                * Prints "("
00003A10  41F9 0000520D           3970                      LEA     ASTRING,A0
00003A16  4EB9 00004428           3971                      JSR     PRINT_SR                * Prints A
00003A1C  2E04                    3972                      MOVE.L  D4,D7    
00003A1E  4EB9 0000443A           3973                      JSR     PRINT_HEX               * Prints hex from 0 to 7 
00003A24  41F9 00005213           3974                      LEA     RPARENSTRING,A0
00003A2A  4EB9 00004428           3975                      JSR     PRINT_SR                * Prints ")"
00003A30  6000 0022               3976                      BRA     LSDM_DECODE_DONE        
00003A34                          3977                      
00003A34                          3978  PRINT_M111                                          * lets print the absolute value
00003A34  41F9 00005209           3979                      LEA     DOLLARSTRING,A0
00003A3A  4EB9 00004428           3980                      JSR     PRINT_SR                * Print that Dollllar
00003A40  2E05                    3981                      MOVE.L  D5,D7
00003A42  4EB9 0000443A           3982                      JSR     PRINT_HEX
00003A48  6000 000A               3983                      BRA     LSDM_DECODE_DONE        
00003A4C                          3984                                                
00003A4C                          3985                       
00003A4C  4EB9 000042B4           3986  LSDM_DECODE_ERR     JSR     PRINTLINE_SR
00003A52  4E75                    3987                      RTS
00003A54                          3988  LSDM_DECODE_DONE                                     * we done
00003A54  41F9 0000513A           3989                      LEA     LINEEND,A0
00003A5A  4EB9 00004428           3990                      JSR     PRINT_SR
00003A60  4E75                    3991                      RTS                   
00003A62                          3992    
00003A62                          3993  
00003A62                          3994  
00003A62                          3995  
00003A62                          3996  
00003A62                          3997  
00003A62                          3998  
00003A62                          3999                    
00003A62                          4000  
00003A62                          4001  
00003A62                          4002  
00003A62                          4003  
00003A62                          4004  
00003A62                          4005  
00003A62                          4006  
00003A62                          4007  -------------------- end include --------------------
00003A62                          4008  
00003A62                          4009  ROMEM_DECODE        INCLUDE "RODMdecode.X68"        *reads the file RODMdecode.x68
00003A62                          4010  
00003A62                          4011  
00003A62                          4012  
00003A62                          4013  
00003A62                          4014  RSDM_DATAREG_VALID                                  * LET'S THE DIRECTION NOW
00003A62  B43C 0000               4015                      CMP.B   #%0,D2
00003A66  6700 000E               4016                      BEQ     RSDM_DIRECTION_VALID    * rotate to right
00003A6A  B43C 0001               4017                      CMP.B   #%1,D2
00003A6E  6700 0006               4018                      BEQ     RSDM_DIRECTION_VALID    * rotate to left
00003A72  6000 0048               4019                      BRA     RSDM_DECODE_ERR         * we will never get here
00003A76                          4020  
00003A76                          4021  RSDM_DIRECTION_VALID                                * check the rotation mode
00003A76                          4022                                                      * Branch to the printer      
00003A76  6000 0002               4023                      BRA     RSDM_DECODE_PRINT       
00003A7A                          4024  
00003A7A                          4025  
00003A7A                          4026  
00003A7A                          4027  RSDM_DECODE_PRINT                                   * Check if it is left or right
00003A7A  B47C 0000               4028                      CMP     #%0,D2
00003A7E  6700 0016               4029                      BEQ     RSRM_SR                 * right rotaion, M stands for memory
00003A82  6000 0002               4030                      BRA     RSLM_SR                 * left Rotation
00003A86                          4031                      
00003A86                          4032                      
00003A86                          4033  RSLM_SR                                             * take care of the printing of LSR
00003A86  41F9 000051D0           4034                      LEA     ROLSTRING,A0
00003A8C  4EB9 00004428           4035                      JSR     PRINT_SR                * prints RSL
00003A92  6000 0012               4036                      BRA     PRINT_RSDM_SIZE         * branch to LSD SIZE
00003A96                          4037  
00003A96                          4038  RSRM_SR                                             * take care of the printing of LSR
00003A96  41F9 000051CC           4039                      LEA     RORSTRING,A0
00003A9C  4EB9 00004428           4040                      JSR     PRINT_SR                * prints RSR
00003AA2  6000 0002               4041                      BRA     PRINT_RSDM_SIZE         * branch to RSD SIZE
00003AA6                          4042  
00003AA6                          4043  PRINT_RSDM_SIZE                                      * branches to the appropriate print area
00003AA6                          4044                                                       * prints .W, In this case its only word
00003AA6  41F9 000051F9           4045                      LEA     WORDSTRING,A0
00003AAC  4EB9 00004428           4046                      JSR     PRINT_SR
00003AB2  4EB9 0000434E           4047                      JSR      SHIFTCURSOR
00003AB8  6000 FE88               4048                      BRA     PRINT_REMAINM            * USES THE PRINTER IN LSDM_DECODER
00003ABC                          4049  
00003ABC                          4050                      
00003ABC                          4051                      
00003ABC  4EB9 000042B4           4052  RSDM_DECODE_ERR     JSR     PRINTLINE_SR
00003AC2  4E75                    4053                      RTS
00003AC4                          4054  RSDM_DECODE_DONE                                     * we done
00003AC4  41F9 0000513A           4055                      LEA     LINEEND,A0
00003ACA  4EB9 00004428           4056                      JSR     PRINT_SR
00003AD0  4E75                    4057                      RTS                   
00003AD2                          4058    
00003AD2                          4059  
00003AD2                          4060  
00003AD2                          4061  
00003AD2                          4062  
00003AD2                          4063  
00003AD2                          4064  
00003AD2                          4065                    
00003AD2                          4066  
00003AD2                          4067  
00003AD2                          4068  
00003AD2                          4069  
00003AD2                          4070  
00003AD2                          4071  
00003AD2                          4072  
00003AD2                          4073  
00003AD2                          4074  -------------------- end include --------------------
00003AD2                          4075  
00003AD2                          4076  LSREG_DECODE        INCLUDE "LSDRdecode.X68"        *reads the file LSRMdecode.x68
00003AD2                          4077  
00003AD2                          4078  LSDRVALIDITY                                        * Lets check the data register/count first
00003AD2  B23C 0000               4079                      CMP.B   #%000,D1
00003AD6  6700 003E               4080                      BEQ     LSDR_DATAREG_VALID      * can be D0 or immediate 000
00003ADA  B23C 0001               4081                      CMP.B   #%001,D1
00003ADE  6700 0036               4082                      BEQ     LSDR_DATAREG_VALID      * can be D1 or immediate 001  
00003AE2  B23C 0002               4083                      CMP.B   #%010,D1
00003AE6  6700 002E               4084                      BEQ     LSDR_DATAREG_VALID      * can be D2 or immediate 010
00003AEA  B23C 0003               4085                      CMP.B   #%011,D1
00003AEE  6700 0026               4086                      BEQ     LSDR_DATAREG_VALID      * can be D3 or immediate 011
00003AF2  B23C 0004               4087                      CMP.B   #%100,D1
00003AF6  6700 001E               4088                      BEQ     LSDR_DATAREG_VALID      * can be D4 or immediate 100
00003AFA  B23C 0005               4089                      CMP.B   #%101,D1
00003AFE  6700 0016               4090                      BEQ     LSDR_DATAREG_VALID      * can be D5 or immediate 101
00003B02  B23C 0006               4091                      CMP.B   #%110,D1
00003B06  6700 000E               4092                      BEQ     LSDR_DATAREG_VALID      * can be D6 or immediate 110
00003B0A  B23C 0007               4093                      CMP.B   #%111,D1
00003B0E  6700 0006               4094                      BEQ     LSDR_DATAREG_VALID      * can be D7 or immediate 111
00003B12  6000 0146               4095                      BRA     LSDR_DECODE_ERR
00003B16                          4096  
00003B16                          4097  
00003B16                          4098  LSDR_DATAREG_VALID                                  * LET'S THE DIRECTION NOW
00003B16  B43C 0000               4099                      CMP.B   #%0,D2
00003B1A  6700 000E               4100                      BEQ     LSDR_DIRECTION_VALID    * Shift to right
00003B1E  B43C 0001               4101                      CMP.B   #%1,D2
00003B22  6700 0006               4102                      BEQ     LSDR_DIRECTION_VALID    * Shift to left
00003B26  6000 0132               4103                      BRA     LSDR_DECODE_ERR         * we will never get here
00003B2A                          4104  
00003B2A                          4105  LSDR_DIRECTION_VALID                                * check the rotation mode
00003B2A  B63C 0000               4106                      CMP.B   #%0,D3
00003B2E  6700 000E               4107                      BEQ     LSDR_MODE_VALIDATE      * contains shift count, immediate
00003B32  B63C 0001               4108                      CMP.B   #%1,D3
00003B36  6700 0006               4109                      BEQ     LSDR_MODE_VALIDATE      * contains the data register specified, (D0 - D7)
00003B3A  6000 011E               4110                      BRA     LSDR_DECODE_ERR         * we will never get here->Dn)
00003B3E                          4111  
00003B3E                          4112  
00003B3E                          4113  
00003B3E                          4114  LSDR_MODE_VALIDATE                                  * Branch to the printer      
00003B3E  6000 0002               4115                      BRA     LSDR_DECODE_PRINT       
00003B42                          4116  
00003B42                          4117  
00003B42                          4118  
00003B42                          4119  LSDR_DECODE_PRINT                                   * Check if it is left or right
00003B42  B47C 0000               4120                      CMP     #%0,D2
00003B46  6700 0016               4121                      BEQ     LSR_SR                  * right shift
00003B4A  6000 0002               4122                      BRA     LSL_SR                  * left shift
00003B4E                          4123                      
00003B4E                          4124                      
00003B4E                          4125  LSL_SR                                              * take care of the printing of LSR
00003B4E  41F9 000051BC           4126                      LEA     LSLSTRING,A0
00003B54  4EB9 00004428           4127                      JSR     PRINT_SR                * prints LSR
00003B5A  6000 0012               4128                      BRA     PRINT_LSD_SIZE          * branch to LSD SIZE
00003B5E                          4129  
00003B5E                          4130  LSR_SR                                              * take care of the printing of LSR
00003B5E  41F9 000051C0           4131                      LEA     LSRSTRING,A0
00003B64  4EB9 00004428           4132                      JSR     PRINT_SR                * prints LSR
00003B6A  6000 0002               4133                      BRA     PRINT_LSD_SIZE          * branch to LSD SIZE
00003B6E                          4134  
00003B6E                          4135  PRINT_LSD_SIZE                                      * branches to the appropriate print area
00003B6E  B03C 0000               4136                      CMP.B   #%00,D0
00003B72  6700 0012               4137                      BEQ     LSDR_SIZE_BYTE           * branch to print byte
00003B76  B03C 0001               4138                      CMP.B   #%01,D0
00003B7A  6700 0020               4139                      BEQ     LSDR_SIZE_WORD           * branch to print word
00003B7E  B03C 0002               4140                      CMP.B   #%10,D0
00003B82  6700 002E               4141                      BEQ     LSDR_SIZE_LONG           * branch to print long 
00003B86                          4142                      
00003B86                          4143                      
00003B86                          4144  LSDR_SIZE_BYTE                                       * prints .B
00003B86  41F9 000051F6           4145                      LEA     BYTESTRING,A0
00003B8C  4EB9 00004428           4146                      JSR     PRINT_SR
00003B92  4EB9 0000434E           4147                      JSR     SHIFTCURSOR
00003B98  6000 002E               4148                      BRA     PRINT_REMAIN 
00003B9C                          4149                      
00003B9C                          4150  LSDR_SIZE_WORD                                       * prints .W
00003B9C  41F9 000051F9           4151                      LEA     WORDSTRING,A0
00003BA2  4EB9 00004428           4152                      JSR     PRINT_SR
00003BA8  4EB9 0000434E           4153                      JSR     SHIFTCURSOR
00003BAE  6000 0018               4154                      BRA     PRINT_REMAIN   
00003BB2                          4155                      
00003BB2                          4156  LSDR_SIZE_LONG                                       * prints .L
00003BB2  41F9 000051FC           4157                      LEA     LONGSTRING,A0
00003BB8  4EB9 00004428           4158                      JSR     PRINT_SR
00003BBE  4EB9 0000434E           4159                      JSR     SHIFTCURSOR
00003BC4  6000 0002               4160                      BRA     PRINT_REMAIN   
00003BC8                          4161                      
00003BC8                          4162                      
00003BC8                          4163                      
00003BC8                          4164  PRINT_REMAIN                                        * prints the remaining parts
00003BC8  B63C 0000               4165                      CMP.B   #%000,D3
00003BCC  6700 0006               4166                      BEQ     PRINT_SHIFTCOUNT        * print shift count
00003BD0  6000 004E               4167                      BRA     PRINT_DATAREG           * Print data register
00003BD4                          4168                      
00003BD4                          4169  PRINT_SHIFTCOUNT        
00003BD4  41F9 00005207           4170                      LEA     POUNDSTRING,A0
00003BDA  4EB9 00004428           4171                      JSR     PRINT_SR                * prints #
00003BE0  B23C 0000               4172                      CMP.B   #%000,D1
00003BE4  6700 0006               4173                      BEQ     EIGHT
00003BE8  6000 0008               4174                      BRA     CONTINUE_PR
00003BEC  5081                    4175  EIGHT               ADDQ.L  #8,D1
00003BEE  6000 0002               4176                      BRA     CONTINUE_PR
00003BF2                          4177                      
00003BF2                          4178  CONTINUE_PR                    
00003BF2  2E01                    4179                      MOVE.L  D1,D7
00003BF4  4EB9 0000443A           4180                      JSR     PRINT_HEX               * Prints the value in D1, from D1 - D7
00003BFA  41F9 000051FF           4181                      LEA     COMMASTRING,A0          
00003C00  4EB9 00004428           4182                      JSR     PRINT_SR                * Prints ","
00003C06  4247                    4183                      CLR     D7                      * clear D7 for next use
00003C08  41F9 0000520F           4184                      LEA     DSTRING,A0
00003C0E  4EB9 00004428           4185                      JSR     PRINT_SR                * Prints D
00003C14  2E04                    4186                      MOVE.L  D4,D7
00003C16  4EB9 0000443A           4187                      JSR     PRINT_HEX               * print the hex
00003C1C  6000 0044               4188                      BRA     LSDR_DECODE_DONE
00003C20                          4189                      
00003C20                          4190   
00003C20                          4191  PRINT_DATAREG     
00003C20  41F9 0000520F           4192                      LEA     DSTRING,A0
00003C26  4EB9 00004428           4193                      JSR     PRINT_SR                * prints #
00003C2C  2E01                    4194                      MOVE.L  D1,D7
00003C2E  4EB9 0000443A           4195                      JSR     PRINT_HEX               * Prints the value in D1, from D1 - D7
00003C34  41F9 000051FF           4196                      LEA     COMMASTRING,A0          
00003C3A  4EB9 00004428           4197                      JSR     PRINT_SR                * Prints ","
00003C40  4247                    4198                      CLR     D7                      * clear D7 for next use
00003C42  41F9 0000520F           4199                      LEA     DSTRING,A0
00003C48  4EB9 00004428           4200                      JSR     PRINT_SR                * Prints D
00003C4E  2E04                    4201                      MOVE.L  D4,D7
00003C50  4EB9 0000443A           4202                      JSR     PRINT_HEX               * print the hex
00003C56  6000 000A               4203                      BRA     LSDR_DECODE_DONE
00003C5A                          4204                       
00003C5A  4EB9 000042B4           4205  LSDR_DECODE_ERR     JSR     PRINTLINE_SR
00003C60  4E75                    4206                      RTS
00003C62                          4207  LSDR_DECODE_DONE                                     * we done
00003C62  41F9 0000513A           4208                      LEA     LINEEND,A0
00003C68  4EB9 00004428           4209                      JSR     PRINT_SR
00003C6E  4E75                    4210                      RTS                   
00003C70                          4211    
00003C70                          4212  
00003C70                          4213  
00003C70                          4214  
00003C70                          4215  
00003C70                          4216  
00003C70                          4217  
00003C70                          4218                    
00003C70                          4219  
00003C70                          4220  
00003C70                          4221  
00003C70                          4222  
00003C70                          4223  
00003C70                          4224  -------------------- end include --------------------
00003C70                          4225  
00003C70                          4226  ASREG_DECODE        INCLUDE "ASDRdecode.X68"        *reads the file ASDRdecode.x68
00003C70                          4227  
00003C70                          4228  ASDRVALIDITY                                        * Lets check the data register/count first
00003C70  B23C 0000               4229                      CMP.B   #%000,D1
00003C74  6700 003E               4230                      BEQ     ASDR_DATAREG_VALID      * can be D0 or immediate 000
00003C78  B23C 0001               4231                      CMP.B   #%001,D1
00003C7C  6700 0036               4232                      BEQ     ASDR_DATAREG_VALID      * can be D1 or immediate 001  
00003C80  B23C 0002               4233                      CMP.B   #%010,D1
00003C84  6700 002E               4234                      BEQ     ASDR_DATAREG_VALID      * can be D2 or immediate 010
00003C88  B23C 0003               4235                      CMP.B   #%011,D1
00003C8C  6700 0026               4236                      BEQ     ASDR_DATAREG_VALID      * can be D3 or immediate 011
00003C90  B23C 0004               4237                      CMP.B   #%100,D1
00003C94  6700 001E               4238                      BEQ     ASDR_DATAREG_VALID      * can be D4 or immediate 100
00003C98  B23C 0005               4239                      CMP.B   #%101,D1
00003C9C  6700 0016               4240                      BEQ     ASDR_DATAREG_VALID      * can be D5 or immediate 101
00003CA0  B23C 0006               4241                      CMP.B   #%110,D1
00003CA4  6700 000E               4242                      BEQ     ASDR_DATAREG_VALID      * can be D6 or immediate 110
00003CA8  B23C 0007               4243                      CMP.B   #%111,D1
00003CAC  6700 0006               4244                      BEQ     ASDR_DATAREG_VALID      * can be D7 or immediate 111
00003CB0  6000 005A               4245                      BRA     ASDR_DECODE_ERR
00003CB4                          4246  
00003CB4                          4247  
00003CB4                          4248  ASDR_DATAREG_VALID                                  * LET'S THE DIRECTION NOW
00003CB4  B43C 0000               4249                      CMP.B   #%0,D2
00003CB8  6700 000E               4250                      BEQ     ASDR_DIRECTION_VALID    * Shift to right
00003CBC  B43C 0001               4251                      CMP.B   #%1,D2
00003CC0  6700 0006               4252                      BEQ     ASDR_DIRECTION_VALID    * Shift to left
00003CC4  6000 0046               4253                      BRA     ASDR_DECODE_ERR         * we will never get here
00003CC8                          4254  
00003CC8                          4255  ASDR_DIRECTION_VALID                                * check the rotation mode
00003CC8  B63C 0000               4256                      CMP.B   #%0,D3
00003CCC  6700 000E               4257                      BEQ     ASDR_MODE_VALIDATE      * contains shift count, immediate
00003CD0  B63C 0001               4258                      CMP.B   #%1,D3
00003CD4  6700 0006               4259                      BEQ     ASDR_MODE_VALIDATE      * contains the data register specified, (D0 - D7)
00003CD8  6000 0032               4260                      BRA     ASDR_DECODE_ERR         * we will never get here->Dn)
00003CDC                          4261  
00003CDC                          4262  
00003CDC                          4263  
00003CDC                          4264  ASDR_MODE_VALIDATE                                  * Branch to the printer      
00003CDC  6000 0002               4265                      BRA     ASDR_DECODE_PRINT       
00003CE0                          4266  
00003CE0                          4267  
00003CE0                          4268  
00003CE0                          4269  ASDR_DECODE_PRINT                                   * Check if it is left or right
00003CE0  B47C 0000               4270                      CMP     #%0,D2
00003CE4  6700 0016               4271                      BEQ     ASR_SR                  * right shift
00003CE8  6000 0002               4272                      BRA     ASL_SR                  * left shift
00003CEC                          4273                      
00003CEC                          4274                      
00003CEC                          4275  ASL_SR                                              * take care of the printing of LSR
00003CEC  41F9 000051C8           4276                      LEA     ASLSTRING,A0
00003CF2  4EB9 00004428           4277                      JSR     PRINT_SR                * prints LSR
00003CF8  6000 FE74               4278                      BRA     PRINT_LSD_SIZE          * branch to LSD SIZE
00003CFC                          4279  
00003CFC                          4280  ASR_SR                                              * take care of the printing of LSR
00003CFC  41F9 000051C4           4281                      LEA     ASRSTRING,A0
00003D02  4EB9 00004428           4282                      JSR     PRINT_SR                * prints LSR
00003D08  6000 FE64               4283                      BRA     PRINT_LSD_SIZE          * branch to LSD SIZE
00003D0C                          4284  
00003D0C  4EB9 000042B4           4285  ASDR_DECODE_ERR     JSR     PRINTLINE_SR
00003D12  4E75                    4286                      RTS
00003D14                          4287  ASDR_DECODE_DONE                                     * we done
00003D14  41F9 0000513A           4288                      LEA     LINEEND,A0
00003D1A  4EB9 00004428           4289                      JSR     PRINT_SR
00003D20  4E75                    4290                      RTS                   
00003D22                          4291    
00003D22                          4292  
00003D22                          4293  
00003D22                          4294  
00003D22                          4295  
00003D22                          4296  
00003D22                          4297  
00003D22                          4298                    
00003D22                          4299  
00003D22                          4300  
00003D22                          4301  
00003D22                          4302  -------------------- end include --------------------
00003D22                          4303  
00003D22                          4304  ROREG_DECODE        INCLUDE "RODRdecode.X68"        *reads the file RODRdecode.x68
00003D22                          4305  
00003D22                          4306  RODRVALIDITY                                        * Lets check the data register/count first
00003D22  B23C 0000               4307                      CMP.B   #%000,D1
00003D26  6700 003E               4308                      BEQ     RODR_DATAREG_VALID      * can be D0 or immediate 000
00003D2A  B23C 0001               4309                      CMP.B   #%001,D1
00003D2E  6700 0036               4310                      BEQ     RODR_DATAREG_VALID      * can be D1 or immediate 001  
00003D32  B23C 0002               4311                      CMP.B   #%010,D1
00003D36  6700 002E               4312                      BEQ     RODR_DATAREG_VALID      * can be D2 or immediate 010
00003D3A  B23C 0003               4313                      CMP.B   #%011,D1
00003D3E  6700 0026               4314                      BEQ     RODR_DATAREG_VALID      * can be D3 or immediate 011
00003D42  B23C 0004               4315                      CMP.B   #%100,D1
00003D46  6700 001E               4316                      BEQ     RODR_DATAREG_VALID      * can be D4 or immediate 100
00003D4A  B23C 0005               4317                      CMP.B   #%101,D1
00003D4E  6700 0016               4318                      BEQ     RODR_DATAREG_VALID      * can be D5 or immediate 101
00003D52  B23C 0006               4319                      CMP.B   #%110,D1
00003D56  6700 000E               4320                      BEQ     RODR_DATAREG_VALID      * can be D6 or immediate 110
00003D5A  B23C 0007               4321                      CMP.B   #%111,D1
00003D5E  6700 0006               4322                      BEQ     RODR_DATAREG_VALID      * can be D7 or immediate 111
00003D62  6000 005A               4323                      BRA     RODR_DECODE_ERR
00003D66                          4324  
00003D66                          4325  
00003D66                          4326  RODR_DATAREG_VALID                                  * LET'S THE DIRECTION NOW
00003D66  B43C 0000               4327                      CMP.B   #%0,D2
00003D6A  6700 000E               4328                      BEQ     RODR_DIRECTION_VALID    * rotate to right
00003D6E  B43C 0001               4329                      CMP.B   #%1,D2
00003D72  6700 0006               4330                      BEQ     RODR_DIRECTION_VALID    * rotate to left
00003D76  6000 0046               4331                      BRA     RODR_DECODE_ERR         * we will never get here
00003D7A                          4332  
00003D7A                          4333  RODR_DIRECTION_VALID                                * check the rotation mode
00003D7A  B63C 0000               4334                      CMP.B   #%0,D3
00003D7E  6700 000E               4335                      BEQ     RODR_MODE_VALIDATE      * contains shift count, immediate
00003D82  B63C 0001               4336                      CMP.B   #%1,D3
00003D86  6700 0006               4337                      BEQ     RODR_MODE_VALIDATE      * contains the data register specified, (D0 - D7)
00003D8A  6000 0032               4338                      BRA     RODR_DECODE_ERR         * we will never get here->Dn)
00003D8E                          4339  
00003D8E                          4340  
00003D8E                          4341  
00003D8E                          4342  RODR_MODE_VALIDATE                                  * Branch to the printer      
00003D8E  6000 0002               4343                      BRA     RODR_DECODE_PRINT       
00003D92                          4344  
00003D92                          4345  
00003D92                          4346  
00003D92                          4347  RODR_DECODE_PRINT                                   * Check if it is left or right
00003D92  B47C 0000               4348                      CMP     #%0,D2
00003D96  6700 0016               4349                      BEQ     ROR_SR                  * right rotation
00003D9A  6000 0002               4350                      BRA     ROL_SR                  * left rotation
00003D9E                          4351                      
00003D9E                          4352                      
00003D9E                          4353  ROL_SR                                              * take care of the printing of LSR
00003D9E  41F9 000051D0           4354                      LEA     ROLSTRING,A0
00003DA4  4EB9 00004428           4355                      JSR     PRINT_SR                * prints LSR
00003DAA  6000 FDC2               4356                      BRA     PRINT_LSD_SIZE          * branch to LSD SIZE
00003DAE                          4357  
00003DAE                          4358  ROR_SR                                              * take care of the printing of LSR
00003DAE  41F9 000051CC           4359                      LEA     RORSTRING,A0
00003DB4  4EB9 00004428           4360                      JSR     PRINT_SR                * prints LSR
00003DBA  6000 FDB2               4361                      BRA     PRINT_LSD_SIZE          * branch to LSD SIZE
00003DBE                          4362  
00003DBE  4EB9 000042B4           4363  RODR_DECODE_ERR     JSR     PRINTLINE_SR
00003DC4  4E75                    4364                      RTS
00003DC6                          4365  RODR_DECODE_DONE                                     * we done
00003DC6  41F9 0000513A           4366                      LEA     LINEEND,A0
00003DCC  4EB9 00004428           4367                      JSR     PRINT_SR
00003DD2  4E75                    4368                      RTS                   
00003DD4                          4369    
00003DD4                          4370  
00003DD4                          4371  
00003DD4                          4372  
00003DD4                          4373  
00003DD4                          4374  
00003DD4                          4375  
00003DD4                          4376                    
00003DD4                          4377  
00003DD4                          4378  
00003DD4                          4379  
00003DD4                          4380  
00003DD4                          4381  -------------------- end include --------------------
00003DD4                          4382  
00003DD4  4EB9 000042B4           4383  SHIFT_DECODE_ERR    JSR     PRINTLINE_SR
00003DDA  4E75                    4384                      RTS
00003DDC                          4385  SHIFT_DECODE_DONE                                     * we done
00003DDC  41F9 0000513A           4386                      LEA     LINEEND,A0
00003DE2  4EB9 00004428           4387                      JSR     PRINT_SR
00003DE8  4E75                    4388                      RTS   
00003DEA                          4389  
00003DEA                          4390  
00003DEA                          4391  
00003DEA                          4392  
00003DEA                          4393  
00003DEA                          4394  
00003DEA                          4395  
00003DEA                          4396  -------------------- end include --------------------
00003DEA                          4397  SUB_SR                  INCLUDE     "SUBdecode.X68"
00003DEA  4280                    4398                      CLR.L   D0
00003DEC  4281                    4399                      CLR.L   D1
00003DEE  4282                    4400                      CLR.L   D2
00003DF0  4283                    4401                      CLR.L   D3
00003DF2  4284                    4402                      CLR.L   D4
00003DF4  4285                    4403                      CLR.L   D5
00003DF6  4286                    4404                      CLR.L   D6
00003DF8  4287                    4405                      CLR.L   D7
00003DFA  43F9 00010000           4406                      LEA     LINESTARTLOC,A1
00003E00                          4407  
00003E00                          4408                                                      *check if it is ADDA instead
00003E00  3011                    4409                      MOVE.W  (A1),D0
00003E02  EC48                    4410                      LSR.W   #6,D0
00003E04  0200 0003               4411                      ANDI.B  #%00000011,D0
00003E08  B03C 0003               4412                      CMP.B   #%11,D0                 *check if 11,holds the size
00003E0C  6700 E0C6               4413                      BEQ     ADD_DECODE_ERR           *Its actually ADDA
00003E10                          4414  
00003E10                          4415  
00003E10  1211                    4416                      MOVE.B  (A1),D1                 *Data register
00003E12  0201 000E               4417                      ANDI.B  #%00001110,D1           *We only need the data register
00003E16  E209                    4418                      LSR.B   #1,D1
00003E18                          4419  
00003E18                          4420  
00003E18  1411                    4421                      MOVE.B  (A1),D2                 *Direction,    *determine if dn + <ea>-><ea> or <ea> + dn->dn
00003E1A  0202 0001               4422                      ANDI.B  #%00000001,D2           *we only need the lat bit
00003E1E                          4423  
00003E1E                          4424  
00003E1E  3611                    4425                      MOVE.W  (A1),D3
00003E20  0243 0038               4426                      ANDI.W  #%0000000000111000,D3   *we only care about the three bits
00003E24  E60B                    4427                      LSR.B   #3,D3
00003E26                          4428  
00003E26  1E19                    4429                      MOVE.B  (A1)+,D7
00003E28  1819                    4430                      MOVE.B  (A1)+,D4                *register
00003E2A  0204 0007               4431                      ANDI.B  #%00000111,D4           *We only care about the last beat
00003E2E                          4432  
00003E2E  4247                    4433                      CLR     D7
00003E30                          4434  
00003E30                          4435  SUBVALIDITY                                         * Lets check the data register first
00003E30  B23C 0000               4436                      CMP.B   #%000,D1
00003E34  6700 003E               4437                      BEQ     SUB_DATAREG_VALID
00003E38  B23C 0001               4438                      CMP.B   #%001,D1
00003E3C  6700 0036               4439                      BEQ     SUB_DATAREG_VALID
00003E40  B23C 0002               4440                      CMP.B   #%010,D1
00003E44  6700 002E               4441                      BEQ     SUB_DATAREG_VALID
00003E48  B23C 0003               4442                      CMP.B   #%011,D1
00003E4C  6700 0026               4443                      BEQ     SUB_DATAREG_VALID
00003E50  B23C 0004               4444                      CMP.B   #%100,D1
00003E54  6700 001E               4445                      BEQ     SUB_DATAREG_VALID
00003E58  B23C 0005               4446                      CMP.B   #%101,D1
00003E5C  6700 0016               4447                      BEQ     SUB_DATAREG_VALID
00003E60  B23C 0006               4448                      CMP.B   #%110,D1
00003E64  6700 000E               4449                      BEQ     SUB_DATAREG_VALID
00003E68  B23C 0007               4450                      CMP.B   #%111,D1
00003E6C  6700 0006               4451                      BEQ     SUB_DATAREG_VALID
00003E70  6000 E062               4452                      BRA     ADD_DECODE_ERR
00003E74                          4453  
00003E74                          4454  
00003E74                          4455  SUB_DATAREG_VALID                                   * LET'S THE DIRECTION NOW
00003E74  B43C 0000               4456                      CMP.B   #0,D2
00003E78  6700 000E               4457                      BEQ     SUB_DN_DESTINATION      *Dn is destination, Dn + <ea>->Dn all effective address are valid
00003E7C  B43C 0001               4458                      CMP.B   #1,D2
00003E80  6700 0112               4459                      BEQ     SUB_DN_SOURCE           *Dn is source, <ea> + Dn-><ea>some effectve addresses are not valid
00003E84  6000 E04E               4460                      BRA     ADD_DECODE_ERR
00003E88                          4461  
00003E88                          4462  SUB_DN_DESTINATION                                  *check mode for Dn is destination (Dn + <ea>->Dn)
00003E88  B63C 0000               4463                      CMP.B   #%000,D3
00003E8C  6700 002E               4464                      BEQ     SUB_MODE_VALIDATE
00003E90  B63C 0001               4465                      CMP.B   #%001,D3
00003E94  6700 00F2               4466                      BEQ     CHECK_SIZE_SUB_AR         *If An is the effective address, check the size, if byte invalid
00003E98  B63C 0002               4467                      CMP.B   #%010,D3
00003E9C  6700 001E               4468                      BEQ     SUB_MODE_VALIDATE
00003EA0  B63C 0003               4469                      CMP.B   #%011,D3
00003EA4  6700 0016               4470                      BEQ     SUB_MODE_VALIDATE
00003EA8  B63C 0004               4471                      CMP.B   #%100,D3
00003EAC  6700 000E               4472                      BEQ     SUB_MODE_VALIDATE
00003EB0  B63C 0007               4473                      CMP.B   #%111,D3
00003EB4  6700 0006               4474                      BEQ     SUB_MODE_VALIDATE
00003EB8  6000 E01A               4475                      BRA     ADD_DECODE_ERR
00003EBC                          4476  
00003EBC                          4477                                                      *Check if source register is valid (Dn + <ea>->Dn)
00003EBC                          4478  
00003EBC                          4479  SUB_MODE_VALIDATE
00003EBC  B63C 0001               4480                      CMP.B   #%001,D3
00003EC0  6700 001A               4481                      BEQ     VALIDATE_SUBAR
00003EC4  B63C 0002               4482                      CMP.B   #%010,D3
00003EC8  6700 0012               4483                      BEQ     VALIDATE_SUBAR
00003ECC  B63C 0003               4484                      CMP.B   #%011,D3
00003ED0  6700 000A               4485                      BEQ     VALIDATE_SUBAR
00003ED4  B63C 0004               4486                      CMP.B   #%100,D3
00003ED8  6700 0002               4487                      BEQ     VALIDATE_SUBAR
00003EDC                          4488  
00003EDC                          4489  VALIDATE_SUBAR                                     *An,it can be be 7
00003EDC  B83C 006F               4490                      CMP.B   #111,D4
00003EE0  6700 DFF2               4491                      BEQ     ADD_DECODE_ERR
00003EE4  6000 0002               4492                      BRA     SUB_IMM_SOURCE
00003EE8                          4493  
00003EE8                          4494  
00003EE8  B63C 0007               4495  SUB_IMM_SOURCE      CMP.B   #%111,D3
00003EEC  6600 004E               4496                      BNE     SUB_SOURCE
00003EF0  B83C 0000               4497                      CMP.B   #%000,D4
00003EF4  6700 0016               4498                      BEQ     SUB_GET_VALUE
00003EF8  B83C 0001               4499                      CMP.B   #%001,D4
00003EFC  6700 000E               4500                      BEQ     SUB_GET_VALUE
00003F00  B83C 0004               4501                      CMP.B   #%100,D4
00003F04  6700 0006               4502                      BEQ     SUB_GET_VALUE
00003F08  6000 DFCA               4503                      BRA     ADD_DECODE_ERR
00003F0C                          4504  
00003F0C                          4505  SUB_GET_VALUE                                       *Now we need to figure out how much data to snag after, should we get a word or a long?
00003F0C  B83C 0004               4506                      CMP.B   #%100,D4
00003F10  6700 0012               4507                      BEQ     SUBS_POUND
00003F14  B83C 0000               4508                      CMP.B   #%000,D4
00003F18  6700 0016               4509                      BEQ     SUBS_GETWORD
00003F1C  B83C 0001               4510                      CMP.B   #%001,D4
00003F20  6700 0014               4511                      BEQ     SUBS_GETLONG
00003F24                          4512  
00003F24                          4513  SUBS_POUND
00003F24  B03C 0002               4514                      CMP.B   #%10,D0                 *The number need to be added is a literal
00003F28  6700 000C               4515                      BEQ     SUBS_GETLONG
00003F2C  6000 0002               4516                      BRA     SUBS_GETWORD
00003F30                          4517  
00003F30                          4518  
00003F30                          4519  SUBS_GETWORD
00003F30  3A19                    4520                      MOVE.W  (A1)+,D5                *D5 store the word data
00003F32  6000 0008               4521                      BRA     SUB_SOURCE
00003F36                          4522  
00003F36                          4523  
00003F36                          4524  SUBS_GETLONG
00003F36  2A19                    4525                      MOVE.L  (A1)+,D5                *D5 store the long data
00003F38  6000 0002               4526                      BRA     SUB_SOURCE
00003F3C                          4527  
00003F3C                          4528  SUB_SOURCE
00003F3C  B43C 0007               4529                      CMP.B   #%111,D2
00003F40  6600 009A               4530                      BNE     SUB_VERIFIED
00003F44  B23C 0002               4531                      CMP.B   #%10,D1
00003F48  6700 0006               4532                      BEQ     SUB_GETLONG
00003F4C  6000 0008               4533                      BRA     SUB_GETWORD
00003F50                          4534  
00003F50                          4535  SUB_GETLONG
00003F50  2C19                    4536                      MOVE.L  (A1)+,D6
00003F52  6000 0008               4537                      BRA     SUB_CHECKLENGTH
00003F56                          4538  SUB_GETWORD
00003F56  3C19                    4539                      MOVE.W  (A1)+,D6
00003F58  6000 0002               4540                      BRA     SUB_CHECKLENGTH
00003F5C                          4541  
00003F5C  48E7 FF00               4542  SUB_CHECKLENGTH     MOVEM.L D0-D7,-(SP)
00003F60  2009                    4543                      MOVE.L  A1,D0
00003F62  2239 00010000           4544                      MOVE.L  LINESTARTLOC,D1
00003F68  9081                    4545                      SUB.L   D1,D0                   *D0 now has the length of the instruction in bytes
00003F6A  C0FC 0008               4546                      MULU    #8,D0                   *Now D0 has the number of bits
00003F6E  0280 000000FF           4547                      ANDI.L  #$000000FF,D0
00003F74  1439 00005230           4548                      MOVE.B  (LINELENGTH),D2         *D2 has line length in bits
00003F7A  B400                    4549                      CMP.B   D0,D2
00003F7C  6600 DF56               4550                      BNE     ADD_DECODE_ERR
00003F80  4CDF 00FF               4551                      MOVEM.L (SP)+,D0-D7
00003F84  6000 0056               4552                      BRA     SUB_VERIFIED
00003F88                          4553                      
00003F88                          4554                      
00003F88                          4555                      
00003F88  B03C 0000               4556  CHECK_SIZE_SUB_AR   CMP.B   #%00,D0                 *The size is byte, invalid size
00003F8C  6600 FF2E               4557                      BNE     SUB_MODE_VALIDATE       *The size is not byte
00003F90  6700 DF42               4558                      BEQ     ADD_DECODE_ERR          *ERROR
00003F94                          4559  
00003F94                          4560  
00003F94                          4561  
00003F94                          4562  SUB_DN_SOURCE                                       *check mode for Dn is source
00003F94                          4563  
00003F94  B63C 0000               4564                      CMP.B   #%000,D3
00003F98  6700 DF3A               4565                      BEQ     ADD_DECODE_ERR
00003F9C  B63C 0001               4566                      CMP.B   #%001,D3
00003FA0  6700 DF32               4567                      BEQ     ADD_DECODE_ERR
00003FA4  B63C 0007               4568                      CMP.B   #%111,D3
00003FA8  6700 0026               4569                      BEQ     CHECK_SUB_REG           *Check register to tell if this is valid or not
00003FAC  B63C 0002               4570                      CMP.B   #%010,D3
00003FB0  6700 FF0A               4571                      BEQ     SUB_MODE_VALIDATE       *Check if the absolute value is short or long
00003FB4  B63C 0003               4572                      CMP.B   #%011,D3
00003FB8  6700 FF02               4573                      BEQ     SUB_MODE_VALIDATE
00003FBC  B63C 0004               4574                      CMP.B   #%100,D3
00003FC0  6700 FEFA               4575                      BEQ     SUB_MODE_VALIDATE
00003FC4  B63C 0003               4576                      CMP.B   #%011,D3
00003FC8  6700 FEF2               4577                      BEQ     SUB_MODE_VALIDATE
00003FCC  6000 DF06               4578                      BRA     ADD_DECODE_ERR
00003FD0                          4579  
00003FD0                          4580  
00003FD0  B83C 0004               4581  CHECK_SUB_REG       CMP.B   #%100,D4
00003FD4  6700 DEFE               4582                      BEQ     ADD_DECODE_ERR
00003FD8  6600 FEE2               4583                      BNE     SUB_MODE_VALIDATE
00003FDC                          4584  
00003FDC                          4585  
00003FDC                          4586                                                      *we need two different ways to handle the printing
00003FDC                          4587                                                      *for each scenarios Dn + <ea> -> Dn
00003FDC                          4588                                                      *and for <ea> + Dn -> <ea>
00003FDC                          4589  
00003FDC                          4590  SUB_VERIFIED
00003FDC  B43C 0000               4591                      CMP.B   #%0,D2
00003FE0  6700 0006               4592                      BEQ     SUB_DECODE_PRINT        *deployed when Dn + <ea> -> Dn, Uses the print method from MOVE
00003FE4  6600 0012               4593                      BNE     SUB_DECODE_PRINT_2      *deployed when <ea> + Dn -> <ea>
00003FE8                          4594  
00003FE8                          4595                                                      *prints add when Dn + <ea>->dn
00003FE8                          4596  
00003FE8  41F9 0000519B           4597  SUB_DECODE_PRINT    LEA     SUBSTRING,A0
00003FEE  4EB9 00004428           4598                      JSR     PRINT_SR
00003FF4  6000 DC54               4599                      BRA     PRINT_SIZE
00003FF8                          4600  
00003FF8                          4601  
00003FF8                          4602  SUB_DECODE_PRINT_2                                  *prints add when <ea> + Dn -><ea>
00003FF8  41F9 0000519B           4603                      LEA     SUBSTRING,A0
00003FFE  4EB9 00004428           4604                      JSR     PRINT_SR
00004004  6000 DCAE               4605                      BRA     PRINT_SIZE_2
00004008                          4606  
00004008                          4607  
00004008                          4608  
00004008                          4609  
00004008                          4610  -------------------- end include --------------------
00004008                          4611  BRANCHSTUFF_SR          INCLUDE     "BRANCHdecode.X68"
00004008                          4612  
00004008  4280                    4613                      CLR.L   D0
0000400A  4281                    4614                      CLR.L   D1
0000400C  4282                    4615                      CLR.L   D2
0000400E  4283                    4616                      CLR.L   D3
00004010  4284                    4617                      CLR.L   D4
00004012  4285                    4618                      CLR.L   D5
00004014  4286                    4619                      CLR.L   D6
00004016  4287                    4620                      CLR.L   D7
00004018  43F9 00010000           4621                      LEA     LINESTARTLOC,A1
0000401E                          4622  
0000401E                          4623  
0000401E  1611                    4624                      MOVE.B  (A1),D3
00004020  0203 000F               4625                      ANDI.B  #%00001111,D3           *we only care about last 4 bits
00004024                          4626                                                      *determines the conditionality
00004024                          4627                                                      
00004024                          4628                      
00004024  1E19                    4629                      MOVE.B  (A1)+,D7
00004026  1819                    4630                      MOVE.B  (A1)+,D4                *holds the 8-bit displacement
00004028                          4631                      
00004028  1404                    4632                      MOVE.B  D4,D2               
0000402A  0202 0080               4633                      ANDI.B  #%10000000,D2           *we only cares a bout the fit determine if
0000402E                          4634                                                      *it's negative or positve
0000402E                          4635  
0000402E                          4636   
0000402E                          4637                      
0000402E                          4638  DETERMINE_CONDITION                                 *here we will determine condition
0000402E                          4639                                                      *for this assignment, it has to be either BCC(0100),BGT(1110) or BLE(1111) 
0000402E                          4640                                                      *to be valid, invalid otherwise
0000402E  B63C 0004               4641                      CMP.B   #%00000100,D3
00004032  6700 0016               4642                      BEQ     CONDITION_VALID         *its BCC
00004036  B63C 000E               4643                      CMP.B   #%00001110,D3
0000403A  6700 000E               4644                      BEQ     CONDITION_VALID         *its BGT
0000403E  B63C 000F               4645                      CMP.B   #%00001111,D3
00004042  6700 0006               4646                      BEQ     CONDITION_VALID         *Its BLE
00004046  6000 00F6               4647                      BRA     BRANCH_DECODE_ERR       *If we get here, its ERROR
0000404A                          4648                      
0000404A                          4649  CONDITION_VALID                                     *If we get here, the condition is valid
0000404A                          4650                                                      *lets check the 8bit displacement
0000404A                          4651                                                      *if its $00, the displacement is in the next 16 bit
0000404A                          4652                                                      *if its $FF, the displacement is in the next 32 bit
0000404A  B83C 0000               4653                      CMP.B   #$00,D4
0000404E  6700 001C               4654                      BEQ     IT_WORD_DIS             *the displacement stored in the next 16 bits field
00004052  B83C 00FF               4655                      CMP.B   #$FF,D4
00004056  6700 0022               4656                      BEQ     IT_LONG_DIS             *the displacement stored in the next 32 bits field
0000405A  6000 0002               4657                      BRA     IT_BYTE_DIS             *the displacement stored in the 8-bit field
0000405E                          4658                              
0000405E                          4659  IT_BYTE_DIS                                         *the displacement is stored in the 8-bit field
0000405E                          4660                                                      *compare the bit at D2 to figure out whether 
0000405E                          4661                                                      *we need to add or substract the displacement 
0000405E                          4662                                                      *from the PC, if 0 we add, subtract otherwise
0000405E  1C04                    4663                      MOVE.B  D4,D6
00004060  B43C 0000               4664                      CMP.B   #%0,D2
00004064  6700 0022               4665                      BEQ     PC_ADD                  *add the displacement on the PC
00004068  6000 002A               4666                      BRA     PC_SUB                  *otherwise,subtract the displacement from the PC
0000406C                          4667                      
0000406C                          4668  
0000406C                          4669                      
0000406C                          4670  IT_WORD_DIS                                         *the displacement is stored in the 16 -bit field
0000406C                          4671                                                      *compare the bit at D2 to figure out whether 
0000406C                          4672                                                      *we need to add or substract the displacement 
0000406C                          4673                                                      *from the PC, if 0 we add, subtract otherwise
0000406C  3C11                    4674                      MOVE.W  (A1),D6                 
0000406E  B43C 0000               4675                      CMP.B   #%0,D2                  *MOVE word field
00004072  6700 0014               4676                      BEQ     PC_ADD
00004076  6000 001C               4677                      BRA     PC_SUB
0000407A                          4678  
0000407A                          4679               
0000407A                          4680  IT_LONG_DIS                                         *the displacement is stored in the 16 -bit field
0000407A                          4681                                                      *compare the bit at D2 to figure out whether 
0000407A                          4682                                                      *we need to add or substract the displacement 
0000407A                          4683                                                      *from the PC, if 0 we add, subtract otherwise
0000407A  2C11                    4684                      MOVE.L  (A1),D6                 
0000407C  B43C 0000               4685                      CMP.B   #%0,D2                  *MOVE long field
00004080  6700 0006               4686                      BEQ     PC_ADD                  *the next PC is greater than the current PC
00004084  6000 000E               4687                      BRA     PC_SUB                  *the next PC is less than the current pc
00004088                          4688   
00004088                          4689  
00004088                          4690  PC_ADD                                              *Add the displacement on PC
00004088  2A39 00005236           4691                      MOVE.L  (CURRENTMEM),D5
0000408E  DA86                    4692                      ADD.L   D6,D5                   *add and store in D5 
00004090  6000 000E               4693                      BRA     BRANCH_VERIFIED
00004094                          4694  PC_SUB                                              *Sub the displacement from pc
00004094  2A39 00005236           4695                      MOVE.L  (CURRENTMEM),D5
0000409A  9A86                    4696                      SUB.L   D6,D5                   *sub and store in D5
0000409C  6000 0002               4697                      BRA     BRANCH_VERIFIED 
000040A0                          4698  
000040A0                          4699  
000040A0                          4700  
000040A0                          4701  
000040A0                          4702  BRANCH_VERIFIED                                     *at this point, everything is good
000040A0  6000 0002               4703                      BRA     BRANCH_PRINT            *branch to print for Branch Stuff
000040A4                          4704                      
000040A4                          4705  
000040A4                          4706  BRANCH_PRINT                                        *Lets print
000040A4  B63C 0004               4707                      CMP.B   #%00000100,D3
000040A8  6700 0016               4708                      BEQ     PRINT_BCC               *branch to print BCC
000040AC  B63C 000E               4709                      CMP.B   #%00001110,D3
000040B0  6700 0038               4710                      BEQ     PRINT_BGT               *branch to print BGT
000040B4  B63C 000F               4711                      CMP.B   #%00001111,D3
000040B8  6700 005A               4712                      BEQ     PRINT_BLE               *branch to print BLE
000040BC  6000 0080               4713                      BRA     BRANCH_DECODE_ERR       *ERROR
000040C0                          4714                      
000040C0                          4715  PRINT_BCC                                           *prints BCC
000040C0                          4716                                     
000040C0  41F9 000051E6           4717                      LEA     BCCSTRING,A0
000040C6  4EB9 00004428           4718                      JSR     PRINT_SR                *prints bcc
000040CC  4EB9 0000434E           4719                      JSR     SHIFTCURSOR
000040D2  41F9 00005209           4720                      LEA     DOLLARSTRING,A0
000040D8  4EB9 00004428           4721                      JSR     PRINT_SR                *prints $
000040DE  2E05                    4722                      MOVE.L  D5,D7
000040E0  4EB9 0000443A           4723                      JSR     PRINT_HEX               *Prints the next instruction address
000040E6  6000 005E               4724                      BRA     BRANCH_DECODE_DONE
000040EA                          4725                      
000040EA                          4726                                        
000040EA                          4727                              
000040EA                          4728  
000040EA                          4729  PRINT_BGT
000040EA  41F9 000051E2           4730                      LEA     BGTSTRING,A0
000040F0  4EB9 00004428           4731                      JSR     PRINT_SR                *prints BGT
000040F6  4EB9 0000434E           4732                      JSR     SHIFTCURSOR
000040FC  41F9 00005209           4733                      LEA     DOLLARSTRING,A0
00004102  4EB9 00004428           4734                      JSR     PRINT_SR                *prints $
00004108  2E05                    4735                      MOVE.L  D5,D7
0000410A  4EB9 0000443A           4736                      JSR     PRINT_HEX               *Prints the new address
00004110  6000 0034               4737                      BRA     BRANCH_DECODE_DONE
00004114                          4738                      
00004114                          4739  
00004114                          4740  PRINT_BLE
00004114  41F9 000051EA           4741                      LEA     BLESTRING,A0
0000411A  4EB9 00004428           4742                      JSR     PRINT_SR                *prints BLE
00004120  4EB9 0000434E           4743                      JSR     SHIFTCURSOR
00004126  41F9 00005209           4744                      LEA     DOLLARSTRING,A0
0000412C  4EB9 00004428           4745                      JSR     PRINT_SR                *prints $
00004132  2E05                    4746                      MOVE.L  D5,D7
00004134  4EB9 0000443A           4747                      JSR     PRINT_HEX               *Prints the next instruction addresss
0000413A  6000 000A               4748                      BRA     BRANCH_DECODE_DONE
0000413E                          4749                      
0000413E                          4750   
0000413E                          4751  
0000413E  4EB9 000042B4           4752  BRANCH_DECODE_ERR   JSR     PRINTLINE_SR
00004144  4E75                    4753                      RTS
00004146                          4754  BRANCH_DECODE_DONE                                     * we done
00004146  41F9 0000513A           4755                      LEA     LINEEND,A0
0000414C  4EB9 00004428           4756                      JSR     PRINT_SR
00004152  4E75                    4757                      RTS   
00004154                          4758  
00004154                          4759  
00004154                          4760  
00004154                          4761  
00004154                          4762  
00004154                          4763  
00004154                          4764  
00004154                          4765  
00004154                          4766  
00004154                          4767  
00004154                          4768  
00004154                          4769  
00004154                          4770  
00004154                          4771  -------------------- end include --------------------
00004154                          4772  
00004154                          4773  MOVEQ_SR                INCLUDE     "MOVEQdecode.X68"
00004154  4280                    4774                  CLR.L   D0
00004156  4281                    4775                  CLR.L   D1
00004158  4282                    4776                  CLR.L   D2
0000415A  4283                    4777                  CLR.L   D3
0000415C  4284                    4778                  CLR.L   D4
0000415E  4285                    4779                  CLR.L   D5
00004160  4286                    4780                  CLR.L   D6
00004162  4287                    4781                  CLR.L   D7
00004164  43F9 00010000           4782                  LEA     LINESTARTLOC,A1
0000416A  0C39 0010 00005230      4783                  CMPI.B  #16,(LINELENGTH)
00004172  6600 00AE               4784                  BNE     MOVEQ_ERROR        *instruction is too long
00004176                          4785                          
00004176  1619                    4786                  MOVE.B  (A1)+,D3            *D3 will contain the number of register
00004178  E20B                    4787                  LSR.B   #1,D3
0000417A  6500 00A6               4788                  BCS     MOVEQ_ERROR         *Must have 0 between data and register
0000417E                          4789                  
0000417E                          4790                  *At this point we know instruction is valid
0000417E  0203 0007               4791                  ANDI.B  #%00000111,D3      *Clear out the leading bits
00004182  1211                    4792                  MOVE.B  (A1),D1             *D3 will now have the data
00004184                          4793  
00004184                          4794                  *Print out the MOVEQ.L part
00004184  41F9 000051EE           4795                  LEA     MOVEQSTRING,A0
0000418A  4EB9 00004428           4796                  JSR     PRINT_SR
00004190  4EB9 0000434E           4797                  JSR     SHIFTCURSOR
00004196                          4798                  *Then print out data follow by comma and data register
00004196  41F9 00005207           4799                  LEA     POUNDSTRING,A0
0000419C  4EB9 00004428           4800                  JSR     PRINT_SR
000041A2  41F9 00005209           4801                  LEA     DOLLARSTRING,A0
000041A8  4EB9 00004428           4802                  JSR     PRINT_SR
000041AE  1401                    4803                  MOVE.B  D1,D2               *Copy data into D2, D1 will be first hex
000041B0  E809                    4804                  LSR.B   #4,D1
000041B2  0202 000F               4805                  ANDI.B  #%00001111,D2
000041B6  B23C 0009               4806                  CMP.B   #9,D1
000041BA  6E00 000A               4807                  BGT     MOVEQ_FLETTER
000041BE  0601 0030               4808                  ADDI.B  #48,D1       
000041C2  6000 000A               4809                  BRA     MOVEQ_SECOND
000041C6  0601 0037               4810  MOVEQ_FLETTER   ADDI.B  #55,D1
000041CA  6000 0002               4811                  BRA     MOVEQ_SECOND
000041CE  103C 0006               4812  MOVEQ_SECOND    MOVE.B  #6,D0
000041D2  4E4F                    4813                  TRAP    #15                *Finish printing first character
000041D4  B43C 0009               4814                  CMP.B   #9,D2
000041D8  6E00 000A               4815                  BGT     MOVEQ_SLETTER
000041DC  0602 0030               4816                  ADDI.B  #48,D2
000041E0  6000 000A               4817                  BRA     MOVEQ_PRNTS
000041E4  0602 0037               4818  MOVEQ_SLETTER   ADDI.B  #55,D2
000041E8  6000 0002               4819                  BRA     MOVEQ_PRNTS
000041EC  1202                    4820  MOVEQ_PRNTS     MOVE.B  D2,D1   
000041EE  4E4F                    4821                  TRAP    #15
000041F0  41F9 000051FF           4822                  LEA     COMMASTRING,A0
000041F6  4EB9 00004428           4823                  JSR     PRINT_SR
000041FC  41F9 0000520F           4824                  LEA     DSTRING,A0
00004202  4EB9 00004428           4825                  JSR     PRINT_SR
00004208  1203                    4826                  MOVE.B  D3,D1
0000420A  143C 000A               4827                  MOVE.B  #10,D2
0000420E  103C 000F               4828                  MOVE.B  #15,D0
00004212  4E4F                    4829                  TRAP    #15
00004214  41F9 0000513A           4830                  LEA     LINEEND,A0
0000421A  4EB9 00004428           4831                  JSR     PRINT_SR
00004220  4E75                    4832                  RTS
00004222                          4833                  
00004222  4EB9 000042B4           4834  MOVEQ_ERROR     JSR     PRINTLINE_SR
00004228  4E75                    4835                  RTS
0000422A                          4836  
0000422A                          4837  
0000422A                          4838  
0000422A                          4839  -------------------- end include --------------------
0000422A  6000 0088               4840  FAIL                    BRA         PRINTLINE_SR            * in case any of the above were hit, handle it
0000422E                          4841  
0000422E  48E7 FFFE               4842  PRINTCURRADDR           MOVEM.L     D0-D7/A0-A6,-(SP)
00004232  103C 000F               4843                          MOVE.B      #15,D0                  * Print the current memory location (hits D0, D1, D7)
00004236  4287                    4844                          CLR.L       D7
00004238  4282                    4845                          CLR.L       D2
0000423A  2E39 00005236           4846                          MOVE.L      (CURRENTMEM),D7
00004240  41F9 00005236           4847                          LEA         CURRENTMEM,A0               
00004246  4281                    4848                          CLR.L       D1                      * D1 will be the number of zeroes we need to print
00004248  BEBC 00000000           4849                          CMP.L       #$00000000,D7               * If cur address is 0, set number of zeroes to 8
0000424E  6600 000A               4850                          BNE         PRINTCURRADDRCALCZERO
00004252  123C 0008               4851                          MOVE.B      #8,D1
00004256  6000 002C               4852                          BRA         PRINTCURADDRNEXTZERO
0000425A                          4853                         
0000425A                          4854                          
0000425A  1418                    4855  PRINTCURRADDRCALCZERO   MOVE.B      (A0)+,D2
0000425C  1602                    4856                          MOVE.B      D2,D3
0000425E  E80B                    4857                          LSR.B       #4,D3
00004260  B63C 0000               4858                          CMP.B       #$0,D3
00004264  6600 001E               4859                          BNE         PRINTCURADDRNEXTZERO
00004268  5201                    4860                          ADDI.B      #1,D1
0000426A  1602                    4861                          MOVE.B      D2,D3
0000426C  0203 000F               4862                          ANDI.B      #%00001111,D3
00004270  B63C 0000               4863                          CMP.B       #$0,D3
00004274  6600 000E               4864                          BNE         PRINTCURADDRNEXTZERO
00004278  5201                    4865                          ADDI.B      #1,D1
0000427A  B23C 0008               4866                          CMP.B       #8,D1
0000427E  6700 0004               4867                          BEQ         PRINTCURADDRNEXTZERO
00004282  60D6                    4868                          BRA         PRINTCURRADDRCALCZERO
00004284                          4869                          
00004284  41F9 00005205           4870  PRINTCURADDRNEXTZERO    LEA         ZEROSTRING,A0
0000428A  4EB9 00004428           4871                          JSR         PRINT_SR           
00004290  5301                    4872                          SUBI.B      #1,D1
00004292  B23C 0000               4873                          CMP.B       #0,D1
00004296  66EC                    4874                          BNE         PRINTCURADDRNEXTZERO
00004298                          4875                           
00004298  4281                    4876                          CLR.L       D1
0000429A  2207                    4877                          MOVE.L      D7,D1
0000429C  143C 0010               4878                          MOVE.B      #16,D2
000042A0  4E4F                    4879                          TRAP        #15                     *Print the actual address
000042A2  41F9 00005174           4880                          LEA         ADRSPACING,A0           *Print a fixed amount of space after the address
000042A8  4EB9 00004428           4881                          JSR         PRINT_SR
000042AE  4CDF 7FFF               4882                          MOVEM.L     (SP)+,D0-D7/A0-A6
000042B2  4E75                    4883                          RTS
000042B4                          4884  
000042B4                          4885  PRINTLINE_SR                                                *This will just go hex by hex printing to screen, example of how to handle the hex line data
000042B4  41F9 0000516B           4886                          LEA         MEMERROR,A0             *Print "DATA"
000042BA  4EB9 00004428           4887                          JSR         PRINT_SR
000042C0  4EB9 0000434E           4888                          JSR         SHIFTCURSOR
000042C6  183C 0000               4889                          MOVE.B      #$0,D4                  *If D4 is not set, get the first half of the byte
000042CA  49F9 00010000           4890                          LEA         LINESTARTLOC,A4
000042D0  1A39 00005230           4891                          MOVE.B      (LINELENGTH),D5
000042D6  1E3C 0000               4892                          MOVE.B      #0,D7                   *D7 will be current offset in bits
000042DA                          4893  
000042DA  B83C 0000               4894  PRINT_SR_LOOP1          CMP.B       #$0,D4
000042DE  6700 0006               4895                          BEQ         PRINT_SR_LOOP2
000042E2  6600 0014               4896                          BNE         PRINT_SR_LOOP3
000042E6                          4897  
000042E6                          4898  PRINT_SR_LOOP2                                              *Print first half of byte
000042E6  1C14                    4899                          MOVE.B      (A4),D6                 *Move what we're currently pointing at to D6
000042E8  0206 00F0               4900                          ANDI.B      #%11110000,D6           *We care about first 4 bits
000042EC  E81E                    4901                          ROR.B       #4,D6                   *Rotate 4 bits to the right
000042EE  183C 0001               4902                          MOVE.B      #1,D4                   *Next read other half of byte
000042F2  5847                    4903                          ADDI        #4,D7
000042F4  6000 0016               4904                          BRA         PRINT_SR_LOOP4
000042F8                          4905  PRINT_SR_LOOP3                                              *Print second half of byte and increment
000042F8  1C14                    4906                          MOVE.B      (A4),D6                 *Move what we're currently pointing at to D6
000042FA  0206 000F               4907                          ANDI.B      #%00001111,D6           *We care about last 4 bits
000042FE  183C 0000               4908                          MOVE.B      #0,D4                   *Next read other half of byte
00004302  49EC 0001               4909                          LEA         (1,A4),A4               *Increment to next byte
00004306  5847                    4910                          ADDI        #4,D7
00004308  6000 0002               4911                          BRA         PRINT_SR_LOOP4
0000430C                          4912  
0000430C                          4913  PRINT_SR_LOOP4                                              *D6 should now have what we want to display in hex, now convert it to ascii oh boy
0000430C  BC3C 0009               4914                          CMP.B       #9,D6
00004310  6F00 0006               4915                          BLE         PRINT_SR_NUMB           *It's a number
00004314  6000 000A               4916                          BRA         PRINT_SR_LETT           *It's a letter
00004318                          4917  
00004318  0606 0030               4918  PRINT_SR_NUMB           ADDI.B      #$30,D6
0000431C  6000 000A               4919                          BRA         PRINT_SR_BACK           *Display and check if we should loop again
00004320                          4920  
00004320  0606 0037               4921  PRINT_SR_LETT           ADDI.B      #$37,D6                 *Display and check if we should loop again
00004324  6000 0002               4922                          BRA         PRINT_SR_BACK
00004328                          4923  
00004328  1206                    4924  PRINT_SR_BACK           MOVE.B      D6,D1                   *Set up display
0000432A  103C 0006               4925                          MOVE.B      #6,D0                   *We're going to display our ascii value
0000432E  4E4F                    4926                          TRAP        #15                     *Display it
00004330  BE05                    4927                          CMP.B       D5,D7
00004332  6C00 0004               4928                          BGE         PRINT_SR_ESCAPE         *We're past our max bits
00004336  60A2                    4929                          BRA         PRINT_SR_LOOP1          *Go display next value
00004338                          4930  
00004338  4EB9 00004340           4931  PRINT_SR_ESCAPE         JSR         DISPLAYEND_SR           *Go to next line
0000433E  4E75                    4932                          RTS
00004340                          4933  
00004340  43F9 0000513A           4934  DISPLAYEND_SR           LEA         LINEEND,A1
00004346  103C 000E               4935                          MOVE.B      #14,D0                  *Displays carriage return and line feed
0000434A  4E4F                    4936                          TRAP        #15
0000434C  4E75                    4937                          RTS
0000434E                          4938  
0000434E  48E7 FFFE               4939  SHIFTCURSOR             MOVEM.L     D0-D7/A0-A6,-(SP)
00004352  4280                    4940                          CLR.L       D0
00004354  103C 000B               4941                          MOVE.B      #11,D0                  *Get cursor position
00004358  323C 00FF               4942                          MOVE.W      #$00FF,D1
0000435C  4E4F                    4943                          TRAP        #15
0000435E  0241 00FF               4944                          ANDI.W      #$00FF,D1               *Clear upper half
00004362  0041 1E00               4945                          ORI.W       #$1E00,D1               *Set upper half to our column
00004366  4E4F                    4946                          TRAP        #15
00004368  4CDF 7FFF               4947                          MOVEM.L     (SP)+,D0-D7/A0-A6
0000436C  4E75                    4948                          RTS
0000436E                          4949  
0000436E  49F9 00010000           4950  CLEARLINE_SR            LEA         LINESTARTLOC,A4         *clear out our line, reset it all
00004374  429C                    4951                          CLR.L       (A4)+
00004376  429C                    4952                          CLR.L       (A4)+
00004378  429C                    4953                          CLR.L       (A4)+
0000437A  429C                    4954                          CLR.L       (A4)+
0000437C  429C                    4955                          CLR.L       (A4)+
0000437E  429C                    4956                          CLR.L       (A4)+
00004380  429C                    4957                          CLR.L       (A4)+
00004382  429C                    4958                          CLR.L       (A4)+
00004384  4E75                    4959                          RTS
00004386                          4960  
00004386                          4961  INPUTTOHEX_SR                                               *This is used for interpreting the starting memory location input. Our text is pointed to by A1
00004386                          4962                                                              *The final hex value will be stored in D4. D5.B will be 1 if there was an error in input
00004386  4284                    4963                          CLR.L       D4                      *We'll store our converted hex value in D4, because why not
00004388  4285                    4964                          CLR.L       D5                      *We'll use D5 as a flag to see if we should write to first half or second half
0000438A  1619                    4965  ITH_SR_LOOP1            MOVE.B      (A1)+,D3                *Move next byte into D3
0000438C  B63C 0000               4966                          CMP.B       #0,D3
00004390  6700 004C               4967                          BEQ         ITH_SR_EXIT             *If we hit the end of the string, exit
00004394  B63C 0041               4968                          CMP.B       #$41,D3                 *Range for letters is 41 to 46
00004398  6C00 000E               4969                          BGE         ITH_SR_LETTER
0000439C  B63C 0030               4970                          CMP.B       #$30,D3                 *Range for numbers is 30 to 39
000043A0  6C00 001A               4971                          BGE         ITH_SR_NUMB
000043A4  6000 0030               4972                          BRA         ITH_SR_ERROR
000043A8                          4973  
000043A8                          4974  ITH_SR_LETTER                                               *The current byte is a letter
000043A8  B63C 0046               4975                          CMP.B       #$46,D3
000043AC  6E00 0028               4976                          BGT         ITH_SR_ERROR            *Out of letter range
000043B0  0603 00A9               4977                          ADDI.B      #$A9,D3                 *Subtract 37
000043B4  0203 000F               4978                          ANDI.B      #%00001111,D3           *Only care about bottom half
000043B8                          4979  
000043B8  6000 0016               4980                          BRA         ITH_SR_PUT
000043BC                          4981  ITH_SR_NUMB                                                 *The current byte is a number
000043BC  B63C 0039               4982                          CMP.B       #$39,D3
000043C0  6E00 0014               4983                          BGT         ITH_SR_ERROR            *Out of number range
000043C4  0603 00B0               4984                          ADDI.B      #$B0,D3                 *Subtract 30
000043C8  0203 000F               4985                          ANDI.B      #%00001111,D3           *We only care about our one hex value
000043CC  6000 0002               4986                          BRA         ITH_SR_PUT
000043D0                          4987  ITH_SR_PUT                                                  *At this point our valid hex character is in D3
000043D0  E98C                    4988                          LSL.L       #4,D4                   *Make room for new hex value
000043D2  8803                    4989                          OR.B        D3,D4                   *Insert our new hex value
000043D4                          4990  
000043D4  60B4                    4991                          BRA         ITH_SR_LOOP1
000043D6                          4992  
000043D6                          4993  ITH_SR_ERROR                                                *We get here if one of the symbols isn't valid
000043D6  1A3C 0001               4994                          MOVE.B      #1,D5                   *Set error flag
000043DA  6000 000A               4995                          BRA         ITH_SR_DONE
000043DE                          4996  
000043DE  1A3C 0000               4997  ITH_SR_EXIT             MOVE.B      #0,D5                   *Make sure error flag isn't set
000043E2  6000 0002               4998                          BRA         ITH_SR_DONE
000043E6                          4999  
000043E6  4E75                    5000  ITH_SR_DONE             RTS
000043E8                          5001  
000043E8                          5002  RTS_SR                                                  * Print out the RTS -- there's no decoding to do IFF there are no leftover bits.
000043E8  5301                    5003                          SUB.B   #1,D1                   * check length of remaining bits
000043EA  6600 FEC8               5004                          BNE     PRINTLINE_SR            * if length is not 0, then this is not RTS
000043EE  41F9 000051DE           5005                          LEA     RTSSTRING,A0            * print "RTS"
000043F4  4EB9 00004428           5006                          JSR     PRINT_SR
000043FA  41F9 0000513A           5007                          LEA     LINEEND,A0
00004400  4EB9 00004428           5008                          JSR     PRINT_SR
00004406  4E75                    5009                          RTS
00004408                          5010  
00004408                          5011  NOP_SR                                                  * Print out the NOP -- there's no decoding to do IFF there are no leftover bits.
00004408  5301                    5012                          SUB.B   #1,D1                   * check length of remaining bits
0000440A  6600 FEA8               5013                          BNE     PRINTLINE_SR            * if length is not 0, then this is not NOP
0000440E  41F9 000051DA           5014                          LEA     NOPSTRING,A0            * print "NOP"
00004414  4EB9 00004428           5015                          JSR     PRINT_SR
0000441A  41F9 0000513A           5016                          LEA     LINEEND,A0
00004420  4EB9 00004428           5017                          JSR     PRINT_SR
00004426  4E75                    5018                          RTS
00004428                          5019  
00004428                          5020  PRINT_SR                                                    * Point A0 to thing to print
00004428  48E7 FFFE               5021                          MOVEM.L     D0-D7/A0-A6,-(SP)
0000442C  103C 000E               5022                          MOVE.B      #14,D0
00004430  2248                    5023                          MOVEA.L     A0,A1
00004432  4E4F                    5024                          TRAP        #15
00004434                          5025  
00004434  4CDF 7FFF               5026                          MOVEM.L     (SP)+,D0-D7/A0-A6
00004438  4E75                    5027                          RTS
0000443A                          5028  
0000443A                          5029  PRINT_HEX                                                   * Put hex to print in D7.L
0000443A  48E7 FFFE               5030                          MOVEM.L     D0-D7/A0-A6,-(SP)
0000443E  103C 000F               5031                          MOVE.B      #15,D0
00004442  2207                    5032                          MOVE.L      D7,D1
00004444  143C 0010               5033                          MOVE.B      #16,D2
00004448  4E4F                    5034                          TRAP        #15
0000444A  4CDF 7FFF               5035                          MOVEM.L     (SP)+,D0-D7/A0-A6
0000444E  4E75                    5036                          RTS
00004450                          5037  
00004450  303C 0032               5038  ENDPRGRM                MOVE        #50,D0                  * Close open files
00004454  4E4F                    5039                          TRAP        #15
00004456                          5040  
00005000                          5041                          ORG         $5000
00005000                          5042                          INCLUDE     "strings.X68"           * Tidying all the strings into one file
00005000= 57 65 6C 63 6F 6D ...   5043  WECLOMEMSG              DC.B        'Welcome!',CR,LF,0
0000500B= 45 6E 74 65 72 20 ...   5044  MEMLOCMSG               DC.B        'Enter the starting memory location in hex between 0 and FFF000',CR,LF,'Memory Location: ',0
0000505D= 4D 65 6D 6F 72 79 ...   5045  MEMLOCERROR             DC.B        'Memory location must be between 0 and FFF000',CR,LF,'Memory Location: ',0
0000509D= 45 6E 74 65 72 20 ...   5046  FILENUMMSG              DC.B        'Enter the decimal file number. The file should be named FILE<X>.TXT',CR,LF,'File Number: ',0
000050F0= 46 69 6C 65 20 6E ...   5047  FILENUMERROR            DC.B        'File number must be a decimal number between 0 and 999999.',CR,LF,'File Number: ',0
0000513A= 0D 0A 00                5048  LINEEND                 DC.B        CR,LF,0
0000513D= 50 72 65 73 73 20 ...   5049  ENTERCNT                DC.B        'Press enter to continue...',CR,LF,0
0000515A= 46 69 6C 65 20 6E ...   5050  FILENOTFOUND            DC.B        'File not found',CR,LF,0
0000516B= 44 41 54 41 20 20 ...   5051  MEMERROR                DC.B        'DATA    ',0
00005174= 20 20 20 20 00          5052  ADRSPACING              DC.B        '    ',0
00005179= 43 4C 52 00             5053  CLRSTRING               DC.B        'CLR',0
0000517D= 4D 4F 56 45 00          5054  MOVESTRING              DC.B        'MOVE',0
00005182= 4D 4F 56 45 4D 00       5055  MOVEMSTRING             DC.B        'MOVEM',0
00005188= 41 44 44 00             5056  ADDSTRING               DC.B        'ADD',0
0000518C= 41 44 44 41 00          5057  ADDASTRING              DC.B        'ADDA',0
00005191= 41 44 44 49 00          5058  ADDISTRING              DC.B        'ADDI',0
00005196= 41 44 44 51 00          5059  ADDQSTRING              DC.B        'ADDQ',0
0000519B= 53 55 42 00             5060  SUBSTRING               DC.B        'SUB',0
0000519F= 41 4E 44 00             5061  ANDSTRING               DC.B        'AND',0
000051A3= 4F 52 00                5062  ORSTRING                DC.B        'OR',0
000051A6= 4A 53 52 00             5063  JSRSTRING               DC.B        'JSR',0
000051AA= 4C 45 41 00             5064  LEASTRING               DC.B        'LEA',0
000051AE= 44 49 56 55 00          5065  DIVUWSTRING             DC.B        'DIVU',0
000051B3= 4D 55 4C 53 00          5066  MULSWSTRING             DC.B        'MULS',0
000051B8= 43 4D 50 00             5067  CMPSTRING               DC.B        'CMP',0
000051BC= 4C 53 4C 00             5068  LSLSTRING               DC.B        'LSL',0
000051C0= 4C 53 52 00             5069  LSRSTRING               DC.B        'LSR',0
000051C4= 41 53 52 00             5070  ASRSTRING               DC.B        'ASR',0
000051C8= 41 53 4C 00             5071  ASLSTRING               DC.B        'ASL',0 
000051CC= 52 4F 52 00             5072  RORSTRING               DC.B        'ROR',0
000051D0= 52 4F 4C 00             5073  ROLSTRING               DC.B        'ROL',0 
000051D4= 4D 4F 56 45 41 00       5074  MOVEASTRING             DC.B        'MOVEA',0
000051DA= 4E 4F 50 00             5075  NOPSTRING               DC.B        'NOP',0
000051DE= 52 54 53 00             5076  RTSSTRING               DC.B        'RTS',0
000051E2= 42 47 54 00             5077  BGTSTRING               DC.B        'BGT',0
000051E6= 42 43 43 00             5078  BCCSTRING               DC.B        'BCC',0
000051EA= 42 4C 45 00             5079  BLESTRING               DC.B        'BLE',0
000051EE= 4D 4F 56 45 51 2E ...   5080  MOVEQSTRING             DC.B        'MOVEQ.L',0
000051F6= 2E 42 00                5081  BYTESTRING              DC.B        '.B',0
000051F9= 2E 57 00                5082  WORDSTRING              DC.B        '.W',0
000051FC= 2E 4C 00                5083  LONGSTRING              DC.B        '.L',0
000051FF= 2C 00                   5084  COMMASTRING             DC.B        ',',0
00005201= 20 00                   5085  SPACESTRING             DC.B        ' ',0
00005203= 09 00                   5086  TABSTRING               DC.B        9,0
00005205= 30 00                   5087  ZEROSTRING              DC.B        '0',0
00005207= 23 00                   5088  POUNDSTRING             DC.B        '#',0
00005209= 24 00                   5089  DOLLARSTRING            DC.B        '$',0
0000520B= 2F 00                   5090  FWDSLASHSTRING          DC.B        '/',0
0000520D= 41 00                   5091  ASTRING                 DC.B        'A',0
0000520F= 44 00                   5092  DSTRING                 DC.B        'D',0
00005211= 28 00                   5093  LPARENSTRING            DC.B        '(',0
00005213= 29 00                   5094  RPARENSTRING            DC.B        ')',0
00005215= 2B 00                   5095  PLUSSTRING              DC.B        '+',0
00005217= 2D 00                   5096  MINUSSTRING             DC.B        '-',0
00005219= 54 45 53 54             5097  FILENAME                DC.B        'TEST'
0000521D                          5098  
0000521D                          5099  
0000521D                          5100  
0000521D                          5101  -------------------- end include --------------------
0000521D                          5102  
0000521D                          5103  FILENAMENUMB            DS.B        11                      *Up to 6 bytes of ascii numbers in the middle, followed by ".TXT"
00005228                          5104  
00005228                          5105  LINECOUNT               DS.B        1
0000522A                          5106  FILEID                  DS.L        1
0000522E                          5107  BUFFER                  DS.B        1                       *Used to store the ascii value of the code when reading
0000522F                          5108  EOFHIT                  DS.B        1                       *Used to tell if we've hit the end of the file. 0 if not, 1 if hit
00005230                          5109  LINELENGTH              DS.B        1                       *We'll store the length in bits here.
00005232                          5110  STARTMEM                DS.L        1                       *The input starting memory location (up to two bytes)
00005236                          5111  CURRENTMEM              DS.L        1                       *The current "virtual" memory location
0000523A                          5112  
00010000                          5113                          ORG         $10000
00010000                          5114  LINESTARTLOC            DS.B        32                      *This is where we store the actual information of the line in hex
00010020                          5115  USERINPUT               DS.B        80                      *This is where user input will be stored. Max user input is 80 bytes
00010070                          5116                          END         START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADECODE_SR       16E6
ADDASTRING          518C
ADDA_000            18F8
ADDA_001            1910
ADDA_010            1928
ADDA_011            1958
ADDA_100            1A1A
ADDA_111            1994
ADDA_111000         19AC
ADDA_111001         19C0
ADDA_111100         19DA
ADDA_111100CONT     1A10
ADDA_111100L        1A0A
ADDA_111100W        1A04
ADDA_ADDREG_VALID   178C
ADDA_DECODE_DONE    1A82
ADDA_DECODE_ERR     1A7A
ADDA_DEST_PRT       1A56
ADDA_GETLONG        185C
ADDA_GETWORD        1856
ADDA_GET_VALUE      1832
ADDA_IMM_SOURCE     180E
ADDA_MODE_VALID     17DC
ADDA_P              18BE
ADDA_POUND          184A
ADDA_PRINT          187A
ADDA_SIZE_VALID     17A0
ADDA_SOURCE         1864
ADDA_SR_VALID       1748
ADDA_VALIDITY       171C
ADDA_VERIFIED       1876
ADDDECODE_SR        1A90
ADDED_GETLONG       1BF6
ADDED_GETWORD       1BFC
ADDIDECODE_SR       1EEA
ADDISTRING          5191
ADDI_000            20CC
ADDI_010            20F0
ADDI_011            212C
ADDI_100            2174
ADDI_111            21BC
ADDI_111000         21D8
ADDI_111001         21F2
ADDI_BYTE           1FDE
ADDI_DECODE_DONE    2214
ADDI_DECODE_ERR     220C
ADDI_DEST_PRT       20A4
ADDI_LONG           1FEC
ADDI_MODE_VALID     1F5E
ADDI_PRINT          1FF2
ADDI_SIZE_VALID     1FC4
ADDI_VALIDITY       1F1E
ADDI_WORD           1FE6
ADDQSTRING          5196
ADDQ_000            23AC
ADDQ_001            23D0
ADDQ_010            23F4
ADDQ_011            2430
ADDQ_100            2478
ADDQ_111            24C0
ADDQ_111000         24DC
ADDQ_111001         24F6
ADDQ_DATA_VALID     2284
ADDQ_DECODE_DONE    2518
ADDQ_DECODE_ERR     2510
ADDQ_DEST_PRT       237C
ADDQ_MODE_VALID     22F4
ADDQ_PRINT          22F8
ADDQ_SIZE_VALID     22A0
ADDQ_SR             2222
ADDQ_VALIDITY       2262
ADDSTRING           5188
ADDS_GETLONG        1BDC
ADDS_GETWORD        1BD6
ADDS_POUND          1BCA
ADDVALIDITY         1AD6
ADD_ABSOLUTE        396C
ADD_ABS_LONG        3986
ADD_ABS_WORD        3980
ADD_CHECKLENGTH     1C02
ADD_DATAREG_VALID   1B1A
ADD_DECODE_DONE     1EDC
ADD_DECODE_ERR      1ED4
ADD_DECODE_PRINT    1C3A
ADD_DECODE_PRINT_2  1CA4
ADD_DN_DESTINATION  1B2E
ADD_DN_SOURCE       1E8C
ADD_GET_VALUE       1BB2
ADD_IMM_SOURCE      1B8E
ADD_MODE_010        1D2E
ADD_MODE_011        1D7E
ADD_MODE_100        1E24
ADD_MODE_111        1DDA
ADD_MODE_VALIDATE   1B62
ADD_SOURCE          1BE2
ADD_VERIFIED        1C2E
ADRSPACING          5174
ANDED_GETLONG       2660
ANDED_GETWORD       2666
ANDSTRING           519F
ANDVALIDITY         256C
AND_CHECKLENGTH     266C
AND_DATAREG_VALID   25B0
AND_DECODE_DONE     2714
AND_DECODE_ERR      270C
AND_DECODE_PRINT    26A4
AND_DECODE_PRINT_2  26B4
AND_DN_DESTINATION  25C4
AND_DN_SOURCE       26C4
AND_GETS_LONG       2646
AND_GETS_WORD       2640
AND_GET_VALUE       261C
AND_MODE_VALIDATE   25F8
AND_POUND           2634
AND_SOURCE          264C
AND_SR              2526
AND_VERIFIED        2698
ASDM_DATAREG_VALID  387E
ASDM_DECODE_DONE    38DA
ASDM_DECODE_ERR     38D2
ASDM_DECODE_PRINT   3896
ASDM_DIRECTION_VALID  3892
ASDRVALIDITY        3C70
ASDR_DATAREG_VALID  3CB4
ASDR_DECODE_DONE    3D14
ASDR_DECODE_ERR     3D0C
ASDR_DECODE_PRINT   3CE0
ASDR_DIRECTION_VALID  3CC8
ASDR_MODE_VALIDATE  3CDC
ASLM_SR             38A2
ASLSTRING           51C8
ASL_SR              3CEC
ASMEM_DECODE        387E
ASREG_DECODE        3C70
ASRM_SR             38B2
ASRSTRING           51C4
ASR_SR              3CFC
ASTRING             520D
A_DN_TEST_DONE      3364
A_DN_TEST_FAIL      3356
A_DN_TEST_LOOP      334A
A_UP_TEST_DONE      3318
A_UP_TEST_FAIL      330C
A_UP_TEST_LOOP      3300
B                   12AC
B0                  142C
B00                 137C
B000                151C
B0000               147C
B00000              1676
B000001             1618
B0000011            1608
B001                150C
B01                 138C
B010                12DC
B0100               14DC
B01000              14FC
B010000             1694
B0100000            139C
B01000001           13BC
B010000011          1656
B0100001            13AC
B01000010           159C
B010000100          146C
B010000101          145C
B01000011           15AC
B010000111          16C4
B010001             1684
B0100010            15E8
B01000101           133C
B010001011          14CC
B0100011            15D8
B01000111           136C
B010001111          14EC
B01001              140C
B010010             149C
B0100100            158C
B01001000           143C
B010010001          12BC
B01001001           144C
B010010011          148C
B0100101            157C
B01001011           15F8
B010010111          132C
B010011             14AC
B0100110            134C
B01001100           1666
B010011001          12CC
B01001101           13FC
B010011011          14BC
B0100111            135C
B01001110           1626
B010011100          16D4
B0100111001         1646
B01001110011        152C
B010011100111       13CC
B0100111001110      16B4
B01001110011100     13EC
B010011100111000    131C
B01001110011101     13DC
B010011100111010    154C
B010011101          16A4
B01001111           1636
B010011111          153C
B011                12EC
B1                  141C
B10                 15CC
B100                155C
B101                156C
B11                 15BC
B110                130C
B111                12FC
BCCSTRING           51E6
BGTSTRING           51E2
BLESTRING           51EA
BRANCHSTUFF_SR      4008
BRANCH_DECODE_DONE  4146
BRANCH_DECODE_ERR   413E
BRANCH_PRINT        40A4
BRANCH_VERIFIED     40A0
BUFFER              522E
BYTESTRING          51F6
BYTE_IMM            208E
CHECKNEXTNUM        10B8
CHECKQ_REGISTER     22E0
CHECKQ_SIZE         22D4
CHECK_B_VALUE       1F7A
CHECK_FOR_CLR       2BC4
CHECK_FOR_ERR       2BE8
CHECK_FOR_JSR       2BDC
CHECK_L_VALUE       1FA8
CHECK_MEMS_REG      384E
CHECK_REG           1EC8
CHECK_REGISTER      1F4A
CHECK_REG_AND       2700
CHECK_REG_OR        3788
CHECK_SIZE_4CMP_AR  2930
CHECK_SIZE_4_AR     1E80
CHECK_SIZE_SUB_AR   3F88
CHECK_SUB_REG       3FD0
CHECK_W_VALUE       1F90
CLEARLINE_SR        436E
CLRB_SR             2722
CLRL_SR             272E
CLRSTRING           5179
CLRW_SR             2728
CLR_ADDR_IND        2784
CLR_AN              2784
CLR_AN_POSTINC      2784
CLR_AN_PREDEC       2784
CLR_DN              2784
CLR_INVALID         2784
CLR_SR              2722
CLR_SR_DONE         2788
CMPSTRING           51B8
CMPVALIDITY         27D0
CMP_DATAREG_VALID   2814
CMP_DECODE_DONE     2944
CMP_DECODE_ERR      293C
CMP_DECODE_PRINT    28D8
CMP_DIRECTION_VALID  2820
CMP_GETLONG         28C2
CMP_GETWORD         28BC
CMP_GET_VALUE       2898
CMP_IMM_SOURCE      2874
CMP_MODE_VALIDATE   2870
CMP_POUND           28B0
CMP_SIZE_VALID      283C
CMP_SOURCE          28C8
CMP_SR              278A
CMP_VERIFIED        28CC
COMMASTRING         51FF
CONDITION_VALID     404A
CONTINUE_PR         3BF2
COULD_BECLR         2BD0
CR                  D
CURRENTMEM          5236
DETERMINE_CONDITION  402E
DETERMINE_MODE      2AA4
DETERMINE_SHIFT     37F0
DISPLAYEND_SR       4340
DIVUWSTRING         51AE
DIVUWVALIDITY       2988
DIVUW_DATAREG_VALID  29D8
DIVUW_DECODE_DONE   2A6E
DIVUW_DECODE_ERR    2A66
DIVUW_DIR_VALID     2994
DIVUW_GETLONG       2A32
DIVUW_GETWORD       2A24
DIVUW_IMM_SOURCE    2A04
DIVUW_POUND         2A20
DIVUW_PRINT         2A4A
DIVUW_SOURCE        2A38
DIVUW_SR            2952
DIVUW_VERIFIED      2A40
DOLLARSTRING        5209
DONECHECKINGNUM     10E0
DONELINE            122C
DONEREADING         1248
DONESHIFTING        1218
DSTRING             520F
D_DN_TEST_DONE      3342
D_DN_TEST_FAIL      3334
D_DN_TEST_LOOP      3328
D_UP_TEST_DONE      32F6
D_UP_TEST_FAIL      32EA
D_UP_TEST_LOOP      32DE
EIGHT               3BEC
ENDPRGRM            4450
ENTERCNT            513D
EOFHIT              522F
FAIL                422A
FILEDNE             107E
FILEID              522A
FILENAME            5219
FILENAMENUMB        521D
FILENOTFOUND        515A
FILENUMERROR        50F0
FILENUMMSG          509D
FWDSLASHSTRING      520B
INPUTTOHEX_SR       4386
INVALIDMEM          1060
INVALIDNUM          10D2
ISLETTER            11BE
ISMOVEA             2ECA
ISNUMBER            11DA
ITH_SR_DONE         43E6
ITH_SR_ERROR        43D6
ITH_SR_EXIT         43DE
ITH_SR_LETTER       43A8
ITH_SR_LOOP1        438A
ITH_SR_NUMB         43BC
ITH_SR_PUT          43D0
IT_BYTE_DIS         405E
IT_IS_EIGHT         227E
IT_LONG_DIS         407A
IT_WORD_DIS         406C
JSR010_PRINT        2AF4
JSR111_PRINT        2B36
JSRSTRING           51A6
JSR_DECODE_DONE     2B68
JSR_DECODE_ERR      2B60
JSR_GET_ABSOLUTE    2AE4
JSR_MODE_VALID      2ACC
JSR_PRINT           2AD0
JSR_SR              2A7C
JSR_VALIDATE_REG    2AB8
LEA010_PRINT        2C48
LEA111_PRINT        2C8A
LEASTRING           51AA
LEA_DECODE_DONE     2CE2
LEA_DECODE_ERR      2CDA
LEA_GET_ABSOLUTE    2C38
LEA_MODE            2BF8
LEA_MODE_VALID      2C20
LEA_PRINT           2C24
LEA_SR              2B76
LEA_VALIDATE_REG    2C0C
LF                  A
LINECOUNT           5228
LINEEND             513A
LINELENGTH          5230
LINESTARTLOC        10000
LONGSTRING          51FC
LONG_IMM            2094
LPARENSTRING        5211
LSDM_DATAREG_VALID  38E8
LSDM_DECODE_DONE    3A54
LSDM_DECODE_ERR     3A4C
LSDM_DECODE_PRINT   3900
LSDM_DIRECTION_VALID  38FC
LSDRVALIDITY        3AD2
LSDR_DATAREG_VALID  3B16
LSDR_DECODE_DONE    3C62
LSDR_DECODE_ERR     3C5A
LSDR_DECODE_PRINT   3B42
LSDR_DIRECTION_VALID  3B2A
LSDR_MODE_VALIDATE  3B3E
LSDR_SIZE_BYTE      3B86
LSDR_SIZE_LONG      3BB2
LSDR_SIZE_WORD      3B9C
LSLM_SR             390C
LSLSTRING           51BC
LSL_SR              3B4E
LSMEM_DECODE        38E8
LSREG_DECODE        3AD2
LSRM_SR             391C
LSRSTRING           51C0
LSR_SR              3B5E
MEMERROR            516B
MEMLOCERROR         505D
MEMLOCMSG           500B
MEMORY_SHIFT        381A
MEMS_MODE_VALID     3862
MINUSSTRING         5217
MOVEAFP             2ED6
MOVEAS              2F1E
MOVEASTRING         51D4
MOVEB               2EEE
MOVECHECKLENGTH     2E78
MOVED000            3106
MOVED001            311E
MOVED010            3136
MOVED011            3166
MOVED100            31A2
MOVED111            31DE
MOVED111L           3202
MOVED111W           31FC
MOVEDCONT           3208
MOVEDECODE_DONE     3212
MOVEDECODE_ERR      2EA8
MOVEDECODE_PRNT     2EB2
MOVEDECODE_SR       2CF0
MOVEDEST            2E58
MOVEDESTMVALID      2D68
MOVEDESTRVALID      2D98
MOVEDGETLONG        2E72
MOVEDGETWORD        2E6C
MOVEDRCANBEADD      2D8C
MOVEIMMSOURCE       2E04
MOVEIMMVR           2E28
MOVEL               2F0E
MOVEMLTM_SR         3228
MOVEMLTR_SR         3238
MOVEMSTRING         5182
MOVEMWTM_SR         3220
MOVEMWTR_SR         3230
MOVEM_ADDR          32B8
MOVEM_DIVIDER       3396
MOVEM_DONE          3384
MOVEM_INVALID       3392
MOVEM_POSTINC       32C2
MOVEM_PREDEC        337E
MOVEM_REGS          32D4
MOVEM_REGS_DONE     3368
MOVEM_REGS_INORDER  32DC
MOVEM_REGS_REVERSE  331E
MOVEPRNTDEST        30CA
MOVEQSTRING         51EE
MOVEQ_ERROR         4222
MOVEQ_FLETTER       41C6
MOVEQ_PRNTS         41EC
MOVEQ_SECOND        41CE
MOVEQ_SLETTER       41E4
MOVEQ_SR            4154
MOVES000            2F58
MOVES001            2F70
MOVES010            2F88
MOVES011            2FB8
MOVES100            308E
MOVES111            2FF4
MOVES111000         300C
MOVES111001         3026
MOVES111100         3040
MOVES111100B        3072
MOVES111100CONT     3084
MOVES111100L        307E
MOVES111100W        3078
MOVESGETLONG        2E52
MOVESGETWORD        2E4C
MOVESOURCEMV        2DD4
MOVESPOUND          2E40
MOVESRCANBEADD      2DF8
MOVESTRING          517D
MOVEVALIDITY        2D34
MOVEVERIFIED        2EA4
MOVEW               2EFE
MULSWSTRING         51B3
MULSWVALIDITY       34B8
MULSW_DATAREG_VALID  3508
MULSW_DECODE_DONE   35A0
MULSW_DECODE_ERR    3598
MULSW_DIR_VALID     34C4
MULSW_GETLONG       3562
MULSW_GETWORD       3554
MULSW_IMM_SOURCE    3534
MULSW_POUND         3550
MULSW_PRINT         357C
MULSW_SOURCE        3568
MULSW_SR            3482
MULSW_VERIFIED      3570
NEXTCHAR            10E6
NOCHARLEFT          10F2
NOPSTRING           51DA
NOP_SR              4408
NOSHIFT             1214
ORED_GETLONG        36E8
ORED_GETWORD        36EE
ORSTRING            51A3
ORVALIDITY          35F4
OR_CHECKLENGTH      36F4
OR_DATAREG_VALID    3638
OR_DECODE_DONE      379C
OR_DECODE_ERR       3794
OR_DECODE_PRINT     372C
OR_DECODE_PRINT_2   373C
OR_DN_DESTINATION   364C
OR_DN_SOURCE        374C
OR_GETS_LONG        36CE
OR_GETS_WORD        36C8
OR_GET_VALUE        36A4
OR_MODE_VALIDATE    3680
OR_POUND            36BC
OR_SOURCE           36D4
OR_SR               35AE
OR_VERIFIED         3720
PC_ADD              4088
PC_SUB              4094
PLUSSTRING          5215
POUNDSTRING         5207
PRINTCURADDRNEXTZERO  4284
PRINTCURRADDR       422E
PRINTCURRADDRCALCZERO  425A
PRINTLINE_SR        42B4
PRINT_ADDA_SIZE     188A
PRINT_ADDI_SIZE     2002
PRINT_ADDQ_SIZE     2308
PRINT_ADDR          33DA
PRINT_ADD_2         1D0E
PRINT_ANUM          33BA
PRINT_ASDM_SIZE     38C2
PRINT_BCC           40C0
PRINT_BGT           40EA
PRINT_BLE           4114
PRINT_CMPSIZE       28E8
PRINT_DATAREG       3C20
PRINT_DNUM          33B0
PRINT_HEX           443A
PRINT_IMM_CONT      209A
PRINT_I_VALUE       205C
PRINT_LEA_RMN       2CB4
PRINT_LSDM_SIZE     392C
PRINT_LSD_SIZE      3B6E
PRINT_M010          398C
PRINT_M011          39BC
PRINT_M100          39F8
PRINT_M111          3A34
PRINT_NUM           33C0
PRINT_POSTINC       3412
PRINT_PREDEC        344A
PRINT_Q_VALUE       2362
PRINT_REMAIN        3BC8
PRINT_REMAINM       3942
PRINT_RSDM_SIZE     3AA6
PRINT_SHIFTCOUNT    3BD4
PRINT_SIZE          1C4A
PRINT_SIZE_2        1CB4
PRINT_SR            4428
PRINT_SR_BACK       4328
PRINT_SR_ESCAPE     4338
PRINT_SR_LETT       4320
PRINT_SR_LOOP1      42DA
PRINT_SR_LOOP2      42E6
PRINT_SR_LOOP3      42F8
PRINT_SR_LOOP4      430C
PRINT_SR_NUMB       4318
PROCESSLINE_CONT    129A
PROCESSLINE_SR      1278
PROMPT4FILENUM      108E
PROMPT4MEM          101C
READBYTE            1182
READFILE            1106
READLINE            114C
REGISTER_SHIFT      37FC
RODRVALIDITY        3D22
RODR_DATAREG_VALID  3D66
RODR_DECODE_DONE    3DC6
RODR_DECODE_ERR     3DBE
RODR_DECODE_PRINT   3D92
RODR_DIRECTION_VALID  3D7A
RODR_MODE_VALIDATE  3D8E
ROLSTRING           51D0
ROL_SR              3D9E
ROMEM_DECODE        3A62
ROREG_DECODE        3D22
RORSTRING           51CC
ROR_SR              3DAE
RPARENSTRING        5213
RSDM_DATAREG_VALID  3A62
RSDM_DECODE_DONE    3AC4
RSDM_DECODE_ERR     3ABC
RSDM_DECODE_PRINT   3A7A
RSDM_DIRECTION_VALID  3A76
RSLM_SR             3A86
RSRM_SR             3A96
RTSSTRING           51DE
RTS_SR              43E8
SETEOF              11F6
SHIFTCURSOR         434E
SHIFTSTUFF_SR       37AA
SHIFT_DECODE_DONE   3DDC
SHIFT_DECODE_ERR    3DD4
SIZEA_L             18AE
SIZEA_W             189E
SIZE_ADDI_B         201A
SIZE_ADDI_L         2046
SIZE_ADDI_W         2030
SIZE_ADDQ_B         2320
SIZE_ADDQ_L         234C
SIZE_ADDQ_W         2336
SIZE_B              1C62
SIZE_B_2            1CCC
SIZE_CMPB           2900
SIZE_CMPL           2920
SIZE_CMPW           2910
SIZE_L              1C8E
SIZE_L_2            1CF8
SIZE_W              1C78
SIZE_W_2            1CE2
SKIPBYTEINC         1228
SKIPMEMINC          117E
SPACESTRING         5201
SPLITMOVEM          3248
START               1000
STARTMEM            5232
STOREDATA           1202
SUBSTRING           519B
SUBS_GETLONG        3F36
SUBS_GETWORD        3F30
SUBS_POUND          3F24
SUBVALIDITY         3E30
SUB_CHECKLENGTH     3F5C
SUB_DATAREG_VALID   3E74
SUB_DECODE_PRINT    3FE8
SUB_DECODE_PRINT_2  3FF8
SUB_DN_DESTINATION  3E88
SUB_DN_SOURCE       3F94
SUB_GETLONG         3F50
SUB_GETWORD         3F56
SUB_GET_VALUE       3F0C
SUB_IMM_SOURCE      3EE8
SUB_MODE_VALIDATE   3EBC
SUB_SOURCE          3F3C
SUB_SR              3DEA
SUB_VERIFIED        3FDC
TABSTRING           5203
TREEDONE            16E4
USERINPUT           10020
VALIDATECLR         2734
VALIDATEMOVEM       3240
VALIDATE_ADDA_AR    17FC
VALIDATE_AR         1B82
VALIDATE_MEMS_MODE  382A
VALIDATE_SUBAR      3EDC
VALIDMEM            106E
VERIFIED_ADDA       1862
V_MOVEM_MODE        3272
V_MOVEM_MODE_V      328E
WAIT4ENTER_SR       124C
WAIT4MEM            1028
WAIT4NUM            109A
WECLOMEMSG          5000
WELCOMELBL          1000
WORDSTRING          51F9
WORD_IMM            208E
ZEROSTRING          5205
